webpackHotUpdate(4,{

/***/ "./pages/index.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style__ = __webpack_require__("./node_modules/styled-jsx/style.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__("./node_modules/react/cjs/react.development.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_immutable__ = __webpack_require__("./node_modules/immutable/dist/immutable.es.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__("./node_modules/prop-types/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_next_head__ = __webpack_require__("./node_modules/next/head.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_next_head___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_next_head__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_color__ = __webpack_require__("./node_modules/color/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_color___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_color__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_react_input_range__ = __webpack_require__("./node_modules/react-input-range/lib/js/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_react_input_range___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_react_input_range__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__input_range_style__ = __webpack_require__("./input-range-style.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__sudoku__ = __webpack_require__("./sudoku.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__colors__ = __webpack_require__("./colors.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__components_tool_tip__ = __webpack_require__("./components/tool-tip.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jsxFileName = 'C:\\Users\\Daniel\\Desktop\\Current Classes\\Senior Design\\Project\\Medium Post src\\react-sudoku-game\\pages\\index.js';


(function () {
  var enterModule = __webpack_require__("./node_modules/react-hot-loader/patch.js").enterModule;

  enterModule && enterModule(module);
})();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/accessible-emoji */







// eslint-disable-next-line import/no-extraneous-dependencies




var LoupeIcon = function LoupeIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M457.602 54.355c-72.417-72.416-190.245-72.416-262.661 0-35.081 35.079-54.399 81.721-54.399 131.331 0 45.193 16.039 87.917 45.413 121.688l-22.119 22.119-22.542-22.542a13.173 13.173 0 0 0-18.628 0L17.055 412.563C6.057 423.559 0 438.18 0 453.733c0 15.552 6.057 30.174 17.053 41.17 10.998 10.998 25.619 17.054 41.17 17.054 15.551 0 30.174-6.057 41.17-17.053l105.612-105.61a13.173 13.173 0 0 0 0-18.628l-22.542-22.542 22.126-22.126c34.793 30.215 78.234 45.331 121.682 45.331 47.561 0 95.123-18.104 131.331-54.311C492.68 281.938 512 235.298 512 185.688c0-49.613-19.318-96.254-54.398-131.333zM80.765 476.275c-6.021 6.021-14.026 9.337-22.542 9.337-8.515 0-16.521-3.317-22.542-9.338-6.02-6.02-9.337-14.026-9.337-22.54s3.317-16.521 9.338-22.542l58.934-58.934L139.7 417.34l-58.935 58.935zm77.565-77.564l-45.084-45.084 18.734-18.734 45.084 45.085-18.734 18.733zm280.643-100.323c-62.144 62.146-163.259 62.146-225.403 0-30.104-30.104-46.683-70.128-46.683-112.702s16.579-82.598 46.683-112.701c31.072-31.072 71.887-46.609 112.702-46.609 40.814 0 81.63 15.535 112.702 46.609 30.104 30.103 46.683 70.128 46.683 112.701s-16.58 82.598-46.684 112.702z'
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M417.234 94.721c-50.158-50.156-131.769-50.158-181.927 0-50.156 50.158-50.156 131.769.001 181.927 25.079 25.077 58.02 37.617 90.963 37.617s65.885-12.54 90.964-37.617v-.001c50.156-50.156 50.156-131.768-.001-181.926zM398.605 258.02c-39.886 39.886-104.783 39.886-144.669.001-39.886-39.886-39.886-104.784-.001-144.67 19.945-19.946 46.136-29.914 72.336-29.914 26.193 0 52.394 9.974 72.334 29.914 39.886 39.885 39.886 104.783 0 144.669z'
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M375.321 136.636c-27.048-27.045-71.053-27.045-98.1 0-5.144 5.144-5.144 13.484 0 18.63 5.144 5.144 13.484 5.144 18.63 0 16.772-16.774 44.068-16.774 60.842 0a13.128 13.128 0 0 0 9.314 3.858 13.13 13.13 0 0 0 9.314-3.858c5.144-5.144 5.144-13.485 0-18.63z'
    })
  );
};

LoupeIcon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  viewBox: '0 0 512 512'
};

var RemoveIcon = function RemoveIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M60.197 418.646H27.571c-6.978 0-12.634 5.657-12.634 12.634s5.656 12.634 12.634 12.634h32.627c6.978 0 12.634-5.657 12.634-12.634-.001-6.976-5.658-12.634-12.635-12.634zM114.205 467.363c-4.934-4.932-12.933-4.934-17.867 0l-23.07 23.07c-4.934 4.934-4.935 12.933 0 17.868a12.598 12.598 0 0 0 8.933 3.701c3.233 0 6.467-1.234 8.933-3.701l23.07-23.07c4.935-4.934 4.936-12.933.001-17.868zM484.431 424.963H262.965l226.699-226.688c9.851-9.852 9.852-25.881.001-35.733L334.522 7.388c-9.853-9.851-25.882-9.851-35.735 0l-247.99 247.99c-14.318 14.318-22.203 33.354-22.203 53.602 0 20.247 7.885 39.284 22.203 53.602l74.701 74.699c8.351 8.351 19.455 12.951 31.266 12.951H484.43c6.978 0 12.634-5.657 12.634-12.634.001-6.977-5.655-12.635-12.633-12.635zm-327.666 0c-5.062 0-9.82-1.972-13.401-5.551l-74.699-74.699c-19.704-19.704-19.704-51.765 0-71.468l40.557-40.557 133.335 133.336c2.467 2.466 5.7 3.7 8.933 3.7s6.467-1.234 8.933-3.7c4.934-4.934 4.935-12.933.001-17.868L127.09 214.821 316.655 25.254l155.142 155.155L227.23 424.963h-70.465z'
    })
  );
};

RemoveIcon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  viewBox: '0 0 512.001 512.001'
};

var ReloadIcon = function ReloadIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M482.195 226.196C482.195 101.471 380.725 0 256.001 0S29.805 101.471 29.805 226.196c0 7.409 6.007 13.416 13.416 13.416s13.416-6.008 13.416-13.416c0-109.93 89.434-199.363 199.363-199.363s199.363 89.434 199.363 199.363c0 109.928-89.434 199.362-199.363 199.362h-23.276l33.282-37.255c4.937-5.525 4.458-14.007-1.067-18.944-5.525-4.937-14.008-4.457-18.944 1.068l-47.576 53.255c-7.788 8.718-7.788 21.866 0 30.584l47.576 53.255a13.379 13.379 0 0 0 10.01 4.478c3.181 0 6.375-1.126 8.934-3.41 5.526-4.937 6.004-13.419 1.067-18.944l-33.282-37.255H256c124.725 0 226.195-101.471 226.195-226.194z'
    })
  );
};

ReloadIcon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  viewBox: '0 0 512 512'
};

var ReturnIcon = function ReturnIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M384.834 180.699H36.101l73.326-82.187c4.755-5.33 4.289-13.505-1.041-18.26-5.328-4.754-13.505-4.29-18.26 1.041l-82.582 92.56c-10.059 11.278-10.058 28.282.001 39.557l82.582 92.561a12.897 12.897 0 0 0 9.654 4.323c3.064 0 6.139-1.083 8.606-3.282 5.33-4.755 5.795-12.93 1.041-18.26l-73.326-82.188h348.733c55.858 0 101.3 45.444 101.3 101.3s-45.443 101.3-101.3 101.3h-61.58c-7.143 0-12.933 5.791-12.933 12.933 0 7.142 5.79 12.933 12.933 12.933h61.58c70.12 0 127.166-57.046 127.166-127.166-.001-70.119-57.047-127.165-127.167-127.165z'
    })
  );
};

ReturnIcon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  viewBox: '0 0 512.001 512.001'
};

var PencilIcon = function PencilIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M328.883 89.125l107.59 107.589-272.34 272.34L56.604 361.465l272.279-272.34zm189.23-25.948l-47.981-47.981c-18.543-18.543-48.653-18.543-67.259 0l-45.961 45.961 107.59 107.59 53.611-53.611c14.382-14.383 14.382-37.577 0-51.959zM.3 512.69c-1.958 8.812 5.998 16.708 14.811 14.565l119.891-29.069L27.473 390.597.3 512.69z'
    })
  );
};

PencilIcon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  width: '800',
  height: '800',
  viewBox: '0 0 528.899 528.899'
};






var Description = 'Discover the next evolution of Sudoku with amazing graphics, animations, and user-friendly features. Enjoy a Sudoku experience like you never have before with customizable game generation, cell highlighting, intuitive controls and more!';
var cellWidth = 2.5;

var LightBlue100 = '#B3E5FC';
var LightBlue200 = '#81D4FA';
var LightBlue300 = '#4FC3F7';
var Indigo700 = '#303F9F';
var DeepOrange200 = '#FFAB91';
var DeepOrange600 = '#F4511E';
var ControlNumberColor = Indigo700;

// eslint-disable-next-line no-lone-blocks
{/* language=CSS */}
var CellStyle = new String('.cell{height:' + cellWidth + 'em;width:' + cellWidth + 'em;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-size:1.1em;font-weight:bold;-webkit-transition:background-color .3s ease-in-out;transition:background-color .3s ease-in-out;}.cell:nth-child(3n+3):not(:last-child){border-right:2px solid black;}.cell:not(:last-child){border-right:1px solid black;}.note-number{font-size:.6em;width:33%;height:33%;box-sizing:border-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */');

// eslint-disable-next-line no-lone-blocks
CellStyle.__hash = '2649640050';
CellStyle.__scoped = '.cell.jsx-80204083{height:' + cellWidth + 'em;width:' + cellWidth + 'em;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-size:1.1em;font-weight:bold;-webkit-transition:background-color .3s ease-in-out;transition:background-color .3s ease-in-out;}.cell.jsx-80204083:nth-child(3n+3):not(:last-child){border-right:2px solid black;}.cell.jsx-80204083:not(:last-child){border-right:1px solid black;}.note-number.jsx-80204083{font-size:.6em;width:33%;height:33%;box-sizing:border-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */';
CellStyle.__scopedHash = '80204083';
{/* language=CSS */}
var ActionsStyle = new String('.actions{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;width:100%;max-width:400px;margin-top:.5em;padding:0 .6em;}.action{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.action svg{width:2.5em;margin-bottom:.2em;}.redo svg{-webkit-transform:scaleX(-1);-ms-transform:scaleX(-1);transform:scaleX(-1);}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */');

// eslint-disable-next-line no-lone-blocks
ActionsStyle.__hash = '3577854778';
ActionsStyle.__scoped = '.actions.jsx-183028603{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;width:100%;max-width:400px;margin-top:.5em;padding:0 .6em;}.action.jsx-183028603{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.action.jsx-183028603 svg{width:2.5em;margin-bottom:.2em;}.redo.jsx-183028603 svg{-webkit-transform:scaleX(-1);-ms-transform:scaleX(-1);transform:scaleX(-1);}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */';
ActionsStyle.__scopedHash = '183028603';
{/* language=CSS */}
var ControlStyle = new String('.control{padding:0 2em;cursor:pointer;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-family:\'Special Elite\',cursive;-webkit-transition:filter .5s ease-in-out;transition:filter .5s ease-in-out;width:100%;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */');

// eslint-disable-next-line no-lone-blocks
ControlStyle.__hash = '3736506914';
ControlStyle.__scoped = '.control.jsx-404884099{padding:0 2em;cursor:pointer;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-family:\'Special Elite\',cursive;-webkit-transition:filter .5s ease-in-out;transition:filter .5s ease-in-out;width:100%;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */';
ControlStyle.__scopedHash = '404884099';
{/* language=CSS */}
var NumberControlStyle = new String('.number{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;position:relative;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:2em;margin:.1em;width:1.5em;height:1.5em;color:' + ControlNumberColor + ';box-shadow:0 1px 2px rgba(0,0,0,0.16),0 1px 2px rgba(0,0,0,0.23);border-radius:100%;}.number>div{margin-top:.3em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */');

// eslint-disable-next-line no-lone-blocks
NumberControlStyle.__hash = '1530312689';
NumberControlStyle.__scoped = '.number.jsx-2450883504{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;position:relative;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:2em;margin:.1em;width:1.5em;height:1.5em;color:' + ControlNumberColor + ';box-shadow:0 1px 2px rgba(0,0,0,0.16),0 1px 2px rgba(0,0,0,0.23);border-radius:100%;}.number.jsx-2450883504>div.jsx-2450883504{margin-top:.3em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */';
NumberControlStyle.__scopedHash = '2450883504';
{/* language=CSS */}
var PuzzleStyle = new String('.puzzle{margin-top:.5em;width:' + cellWidth * 9 + 'em;cursor:pointer;box-shadow:0 3px 6px rgba(0,0,0,0.16),0 3px 6px rgba(0,0,0,0.23);}.row{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex:0;-ms-flex:0;flex:0;width:' + cellWidth * 9 + 'em;}.row:not(:last-child){border-bottom:1px solid black;}.row:nth-child(3n+3):not(:last-child){border-bottom:2px solid black !important;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */');

// eslint-disable-next-line no-lone-blocks
PuzzleStyle.__hash = '3222785624';
PuzzleStyle.__scoped = '.puzzle.jsx-289000025{margin-top:.5em;width:' + cellWidth * 9 + 'em;cursor:pointer;box-shadow:0 3px 6px rgba(0,0,0,0.16),0 3px 6px rgba(0,0,0,0.23);}.row.jsx-289000025{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex:0;-ms-flex:0;flex:0;width:' + cellWidth * 9 + 'em;}.row.jsx-289000025:not(:last-child){border-bottom:1px solid black;}.row.jsx-289000025:nth-child(3n+3):not(:last-child){border-bottom:2px solid black !important;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */';
PuzzleStyle.__scopedHash = '289000025';
{/* language=CSS */}
var CirculuarProgressStyle = new String('.circular-progress{display:block;width:100%;position:absolute;top:0;left:0;-webkit-transition:filter .4s ease-in-out;transition:filter .4s ease-in-out;}.circle-bg{fill:none;stroke:#eee;stroke-width:3.8;}.circle{stroke:' + ControlNumberColor + ';-webkit-transition:stroke-dasharray .4s ease-in-out;transition:stroke-dasharray .4s ease-in-out;fill:none;stroke-width:2.8;stroke-linecap:round;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */');

CirculuarProgressStyle.__hash = '161869746';
CirculuarProgressStyle.__scoped = '.circular-progress.jsx-1880568691{display:block;width:100%;position:absolute;top:0;left:0;-webkit-transition:filter .4s ease-in-out;transition:filter .4s ease-in-out;}.circle-bg.jsx-1880568691{fill:none;stroke:#eee;stroke-width:3.8;}.circle.jsx-1880568691{stroke:' + ControlNumberColor + ';-webkit-transition:stroke-dasharray .4s ease-in-out;transition:stroke-dasharray .4s ease-in-out;fill:none;stroke-width:2.8;stroke-linecap:round;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */';
CirculuarProgressStyle.__scopedHash = '1880568691';
var CircularPathD = 'M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831';

function getBackGroundColor(_ref) {
  var conflict = _ref.conflict,
      isPeer = _ref.isPeer,
      sameValue = _ref.sameValue,
      isSelected = _ref.isSelected;

  if (conflict && isPeer && sameValue) {
    return DeepOrange200;
  } else if (sameValue) {
    return LightBlue300;
  } else if (isSelected) {
    return LightBlue200;
  } else if (isPeer) {
    return LightBlue100;
  }
  return false;
}

function getFontColor(_ref2) {
  var value = _ref2.value,
      conflict = _ref2.conflict,
      prefilled = _ref2.prefilled;

  if (conflict && !prefilled) {
    return DeepOrange600;
  } else if (!prefilled && value) {
    return ControlNumberColor;
  }
  return false;
}

var NumberControl = function NumberControl(_ref3) {
  var number = _ref3.number,
      onClick = _ref3.onClick,
      completionPercentage = _ref3.completionPercentage;
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'div',
    {
      key: number,

      onClick: onClick,
      className: 'jsx-' + NumberControlStyle.__scopedHash + ' ' + 'number',
      __source: {
        fileName: _jsxFileName,
        lineNumber: 206
      }
    },
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
      'div',
      {
        className: 'jsx-' + NumberControlStyle.__scopedHash,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 211
        }
      },
      number
    ),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
      styleId: NumberControlStyle.__scopedHash,
      css: NumberControlStyle.__scoped
    })
  );
};

NumberControl.propTypes = {
  number: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.number.isRequired,
  onClick: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func,
  completionPercentage: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.number.isRequired
};

NumberControl.defaultProps = {
  onClick: null
};

var Cell = function Cell(props) {
  var value = props.value,
      onClick = props.onClick,
      onKeyPress = props.onKeyPress,
      isPeer = props.isPeer,
      isSelected = props.isSelected,
      sameValue = props.sameValue,
      prefilled = props.prefilled,
      notes = props.notes,
      conflict = props.conflict;

  var backgroundColor = getBackGroundColor({
    conflict: conflict, isPeer: isPeer, sameValue: sameValue, isSelected: isSelected
  });
  var fontColor = getFontColor({ conflict: conflict, prefilled: prefilled, value: value });
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'div',
    { onClick: onClick, onKeyDown: onKeyPress, tabIndex: '0', className: 'jsx-' + CellStyle.__scopedHash + ' ' + __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a.dynamic([['60311025', [backgroundColor || 'initial', fontColor || 'initial']]]) + ' ' + 'cell',
      __source: {
        fileName: _jsxFileName,
        lineNumber: 236
      }
    },
    notes ? Object(__WEBPACK_IMPORTED_MODULE_8__sudoku__["d" /* range */])(9).map(function (i) {
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        { key: i, className: 'jsx-' + CellStyle.__scopedHash + ' ' + __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a.dynamic([['60311025', [backgroundColor || 'initial', fontColor || 'initial']]]) + ' ' + 'note-number',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 241
          }
        },
        notes.has(i + 1) && i + 1
      );
    }) : value && value,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
      styleId: CellStyle.__scopedHash,
      css: CellStyle.__scoped
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
      styleId: '60311025',
      css: '.cell.__jsx-style-dynamic-selector{background-color:' + (backgroundColor || 'initial') + ';color:' + (fontColor || 'initial') + ';}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */',
      dynamic: [backgroundColor || 'initial', fontColor || 'initial']
    })
  );
};

Cell.propTypes = {
  // current number value
  value: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.number,
  // cell click handler
  onClick: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func.isRequired,
  // keyboard input handler
  onKeyPress: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func.isRequired,
  // if the cell is a peer of the selected cell
  isPeer: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // if the cell is selected by the user
  isSelected: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // current cell has the same value if the user selected cell
  sameValue: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // if this was prefilled as a part of the puzzle
  prefilled: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // current notes taken on the cell
  notes: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.instanceOf(__WEBPACK_IMPORTED_MODULE_2_immutable__["b" /* Set */]),
  // if the current cell does not satisfy the game constraint
  conflict: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired
};

Cell.defaultProps = {
  notes: null,
  value: null
};

function getClickHandler(onClick, onDoubleClick) {
  var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 250;

  var timeoutID = null;
  return function (event) {
    if (!timeoutID) {
      timeoutID = setTimeout(function () {
        onClick(event);
        timeoutID = null;
      }, delay);
    } else {
      timeoutID = clearTimeout(timeoutID);
      onDoubleClick(event);
    }
  };
}

/**
 * make size 9 array of 0s
 * @returns {Array}
 */
function makeCountObject() {
  var countObj = [];
  for (var i = 0; i < 10; i += 1) {
    countObj.push(0);
  }return countObj;
}

/**
 * given a 2D array of numbers as the initial puzzle, generate the initial game state
 * @param puzzle
 * @returns {any}
 */
function makeBoard(_ref4) {
  var puzzle = _ref4.puzzle;

  // create initial count object to keep track of conflicts per number value
  var rows = Array.from(Array(9).keys()).map(function () {
    return makeCountObject();
  });
  var columns = Array.from(Array(9).keys()).map(function () {
    return makeCountObject();
  });
  var squares = Array.from(Array(9).keys()).map(function () {
    return makeCountObject();
  });
  var result = puzzle.map(function (row, i) {
    return row.map(function (cell, j) {
      if (cell) {
        rows[i][cell] += 1;
        columns[j][cell] += 1;
        squares[Math.floor(i / 3) * 3 + Math.floor(j / 3)][cell] += 1;
      }
      return {
        value: puzzle[i][j] > 0 ? puzzle[i][j] : null,
        prefilled: !!puzzle[i][j]
      };
    });
  });
  return Object(__WEBPACK_IMPORTED_MODULE_2_immutable__["c" /* fromJS */])({ puzzle: result, selected: false, inNoteMode: false, choices: { rows: rows, columns: columns, squares: squares } });
}

/**
 * give the coordinate update the current board with a number choice
 * @param x
 * @param y
 * @param number
 * @param fill whether to set or unset
 * @param board the immutable board given to change
 */
function updateBoardWithNumber(_ref5) {
  var x = _ref5.x,
      y = _ref5.y,
      number = _ref5.number,
      _ref5$fill = _ref5.fill,
      fill = _ref5$fill === undefined ? true : _ref5$fill,
      board = _ref5.board;

  var cell = board.get('puzzle').getIn([x, y]);
  // delete its notes
  cell = cell.delete('notes');
  // set or unset its value depending on `fill`
  cell = fill ? cell.set('value', number) : cell.delete('value');
  var increment = fill ? 1 : -1;
  // update the current group choices
  var rowPath = ['choices', 'rows', x, number];
  var columnPath = ['choices', 'columns', y, number];
  var squarePath = ['choices', 'squares', Math.floor(x / 3) * 3 + Math.floor(y / 3), number];
  return board.setIn(rowPath, board.getIn(rowPath) + increment).setIn(columnPath, board.getIn(columnPath) + increment).setIn(squarePath, board.getIn(squarePath) + increment).setIn(['puzzle', x, y], cell);
}

function getNumberOfGroupsAssignedForNumber(number, groups) {
  return groups.reduce(function (accumulator, row) {
    return accumulator + (row.get(number) > 0 ? 1 : 0);
  }, 0);
}

// eslint-disable-next-line react/no-multi-comp

var Index = function (_Component) {
  _inherits(Index, _Component);

  function Index() {
    var _ref6;

    var _temp, _this, _ret;

    _classCallCheck(this, Index);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref6 = Index.__proto__ || Object.getPrototypeOf(Index)).call.apply(_ref6, [this].concat(args))), _this), _this.state = {}, _this.generateGame = function () {
      var finalCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;

      // get a filled puzzle generated
      var solution = Object(__WEBPACK_IMPORTED_MODULE_8__sudoku__["b" /* makePuzzle */])();
      // pluck values from cells to create the game

      var _pluck = Object(__WEBPACK_IMPORTED_MODULE_8__sudoku__["c" /* pluck */])(solution, finalCount),
          puzzle = _pluck.puzzle;
      // initialize the board with choice counts


      var board = makeBoard({ puzzle: puzzle });
      _this.setState({
        board: board, history: __WEBPACK_IMPORTED_MODULE_2_immutable__["a" /* List */].of(board), historyOffSet: 0, solution: solution
      });
    }, _this.addNumberAsNote = function (number) {
      var board = _this.state.board;

      var selectedCell = _this.getSelectedCell();
      if (!selectedCell) return;
      var prefilled = selectedCell.get('prefilled');
      if (prefilled) return;

      var _board$get = board.get('selected'),
          x = _board$get.x,
          y = _board$get.y;

      var currentValue = selectedCell.get('value');
      if (currentValue) {
        board = updateBoardWithNumber({
          x: x, y: y, number: currentValue, fill: false, board: _this.state.board
        });
      }
      var notes = selectedCell.get('notes') || Object(__WEBPACK_IMPORTED_MODULE_2_immutable__["b" /* Set */])();
      if (notes.has(number)) {
        notes = notes.delete(number);
      } else {
        notes = notes.add(number);
      }
      selectedCell = selectedCell.set('notes', notes);
      selectedCell = selectedCell.delete('value');
      board = board.setIn(['puzzle', x, y], selectedCell);
      _this.updateBoard(board);
    }, _this.updateBoard = function (newBoard) {
      var history = _this.state.history;
      var historyOffSet = _this.state.historyOffSet;
      // anything before current step is still in history

      history = history.slice(0, historyOffSet + 1);
      // add itself onto the history
      history = history.push(newBoard);
      // update the game
      _this.setState({ board: newBoard, history: history, historyOffSet: history.size - 1 });
    }, _this.canUndo = function () {
      return _this.state.historyOffSet > 0;
    }, _this.redo = function () {
      var history = _this.state.history;
      var historyOffSet = _this.state.historyOffSet;

      if (history.size) {
        historyOffSet = Math.min(history.size - 1, historyOffSet + 1);
        var board = history.get(historyOffSet);
        _this.setState({ board: board, historyOffSet: historyOffSet });
      }
    }, _this.undo = function () {
      var history = _this.state.history;
      var _this$state = _this.state,
          historyOffSet = _this$state.historyOffSet,
          board = _this$state.board;

      if (history.size) {
        historyOffSet = Math.max(0, historyOffSet - 1);
        board = history.get(historyOffSet);
        _this.setState({ board: board, historyOffSet: historyOffSet, history: history });
      }
    }, _this.toggleNoteMode = function () {
      var board = _this.state.board;

      var currNoteMode = board.get('inNoteMode');
      board = board.set('inNoteMode', !currNoteMode);
      _this.setState({ board: board });
    }, _this.eraseSelected = function () {
      var selectedCell = _this.getSelectedCell();
      if (!selectedCell) return;
      _this.fillNumber(false);
    }, _this.fillSelectedWithSolution = function () {
      var _this$state2 = _this.state,
          board = _this$state2.board,
          solution = _this$state2.solution;

      var selectedCell = _this.getSelectedCell();
      if (!selectedCell) return;

      var _board$get2 = board.get('selected'),
          x = _board$get2.x,
          y = _board$get2.y;

      _this.fillNumber(solution[x][y]);
    }, _this.fillNumber = function (number) {
      var board = _this.state.board;

      var selectedCell = _this.getSelectedCell();
      // no-op if nothing is selected
      if (!selectedCell) return;
      var prefilled = selectedCell.get('prefilled');
      // no-op if it is refilled
      if (prefilled) return;

      var _board$get3 = board.get('selected'),
          x = _board$get3.x,
          y = _board$get3.y;

      var currentValue = selectedCell.get('value');
      // remove the current value and update the game state
      if (currentValue) {
        board = updateBoardWithNumber({
          x: x, y: y, number: currentValue, fill: false, board: _this.state.board
        });
      }
      // update to new number if any
      var setNumber = currentValue !== number && number;
      if (setNumber) {
        board = updateBoardWithNumber({
          x: x, y: y, number: number, fill: true, board: board
        });
      }
      _this.updateBoard(board);
    }, _this.selectCell = function (x, y) {

      console.log("Cell Selected");

      var board = _this.state.board;

      board = board.set('selected', { x: x, y: y });
      _this.setState({ board: board });
    }, _this.handleKeyDown = function (event) {
      var board = _this.state.board;

      var inNoteMode = board.get('inNoteMode');
      var numberInput = Number(event.key);

      if (inNoteMode) _this.addNumberAsNote(numberInput);else _this.fillNumber(numberInput);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Index, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // eslint-disable-next-line no-undef
      if ('serviceWorker' in navigator) {
        // eslint-disable-next-line no-undef
        navigator.serviceWorker.register('/service-worker.js').then(function (reg) {
          console.log('ServiceWorker scope: ', reg.scope);
          console.log('service worker registration successful');
        }).catch(function (err) {
          console.warn('service worker registration failed', err.message);
        });
      }
    }
  }, {
    key: 'getSelectedCell',
    value: function getSelectedCell() {
      var board = this.state.board;

      var selected = board.get('selected');
      return selected && board.get('puzzle').getIn([selected.x, selected.y]);
    }

    // get the min between its completion in rows, columns and squares.

  }, {
    key: 'getNumberValueCount',
    value: function getNumberValueCount(number) {
      var rows = this.state.board.getIn(['choices', 'rows']);
      var columns = this.state.board.getIn(['choices', 'columns']);
      var squares = this.state.board.getIn(['choices', 'squares']);
      return Math.min(getNumberOfGroupsAssignedForNumber(number, squares), Math.min(getNumberOfGroupsAssignedForNumber(number, rows), getNumberOfGroupsAssignedForNumber(number, columns)));
    }

    // fill currently selected cell with number

  }, {
    key: 'isConflict',
    value: function isConflict(i, j) {
      var _state$board$getIn$to = this.state.board.getIn(['puzzle', i, j]).toJSON(),
          value = _state$board$getIn$to.value;

      if (!value) return false;
      var rowConflict = this.state.board.getIn(['choices', 'rows', i, value]) > 1;
      var columnConflict = this.state.board.getIn(['choices', 'columns', j, value]) > 1;
      var squareConflict = this.state.board.getIn(['choices', 'squares', Math.floor(i / 3) * 3 + Math.floor(j / 3), value]) > 1;
      return rowConflict || columnConflict || squareConflict;
    }
  }, {
    key: 'renderCell',
    value: function renderCell(cell, x, y) {
      var _this2 = this;

      var board = this.state.board;

      var selected = this.getSelectedCell();

      var _cell$toJSON = cell.toJSON(),
          value = _cell$toJSON.value,
          prefilled = _cell$toJSON.prefilled,
          notes = _cell$toJSON.notes;

      var conflict = this.isConflict(x, y);
      var peer = Object(__WEBPACK_IMPORTED_MODULE_8__sudoku__["a" /* isPeer */])({ x: x, y: y }, board.get('selected'));
      var sameValue = !!(selected && selected.get('value') && value === selected.get('value'));

      var isSelected = cell === selected;
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(Cell, {
        prefilled: prefilled,
        notes: notes,
        sameValue: sameValue,
        isSelected: isSelected,
        isPeer: peer,
        value: value,
        onClick: function onClick() {
          _this2.selectCell(x, y);
        }
        // A good spot to handle keypresses?
        , onKeyPress: function onKeyPress(event) {
          return _this2.handleKeyDown(event);
        },
        key: y,
        x: x,
        y: y,
        conflict: conflict,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 571
        }
      });
    }
  }, {
    key: 'renderNumberControl',
    value: function renderNumberControl() {
      var _this3 = this;

      var selectedCell = this.getSelectedCell();
      var prefilled = selectedCell && selectedCell.get('prefilled');
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-' + ControlStyle.__scopedHash + ' ' + 'control',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 593
          }
        },
        Object(__WEBPACK_IMPORTED_MODULE_8__sudoku__["d" /* range */])(9).map(function (i) {
          var number = i + 1;
          // handles binding single click and double click callbacks
          var clickHandle = getClickHandler(function () {
            _this3.fillNumber(number);
          }, function () {
            _this3.addNumberAsNote(number);
          });
          return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(NumberControl, {
            key: number,
            number: number,
            onClick: !prefilled ? clickHandle : undefined,
            completionPercentage: _this3.getNumberValueCount(number) / 9,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 602
            }
          });
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: ControlStyle.__scopedHash,
          css: ControlStyle.__scoped
        })
      );
    }
    /*<div className="action redo" onClick={history.size ? this.redo : null}>
            <ReloadIcon />Redo
          </div> */

  }, {
    key: 'renderActions',
    value: function renderActions() {
      var _state = this.state,
          board = _state.board,
          history = _state.history;

      var selectedCell = this.getSelectedCell();
      var prefilled = selectedCell && selectedCell.get('prefilled');
      var inNoteMode = board.get('inNoteMode');
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-' + ActionsStyle.__scopedHash + ' ' + 'actions',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 622
          }
        },
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          { onClick: history.size ? this.undo : null, className: 'jsx-' + ActionsStyle.__scopedHash + ' ' + 'action',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 623
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(ReloadIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 624
            }
          }),
          'Undo'
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          { onClick: this.toggleNoteMode, className: 'jsx-' + ActionsStyle.__scopedHash + ' ' + 'action note',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 626
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(ReloadIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 627
            }
          }),
          ' ',
          inNoteMode ? "On" : "Off"
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          { onClick: !prefilled ? this.eraseSelected : null, className: 'jsx-' + ActionsStyle.__scopedHash + ' ' + 'action',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 629
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(RemoveIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 630
            }
          }),
          'Erase'
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          {
            onClick: !prefilled ? this.fillSelectedWithSolution : null,
            className: 'jsx-' + ActionsStyle.__scopedHash + ' ' + 'action',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 632
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(LoupeIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 637
            }
          }),
          'Hint'
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: ActionsStyle.__scopedHash,
          css: ActionsStyle.__scoped
        })
      );
    }
  }, {
    key: 'renderPuzzle',
    value: function renderPuzzle() {
      var _this4 = this;

      var board = this.state.board;

      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-' + PuzzleStyle.__scopedHash + ' ' + 'puzzle',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 647
          }
        },
        board.get('puzzle').map(function (row, i) {
          return (
            // eslint-disable-next-line react/no-array-index-key
            __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
              'div',
              { key: i, className: 'jsx-' + PuzzleStyle.__scopedHash + ' ' + 'row',
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 650
                }
              },
              row.map(function (cell, j) {
                return _this4.renderCell(cell, i, j);
              }).toArray()
            )
          );
        }).toArray(),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: PuzzleStyle.__scopedHash,
          css: PuzzleStyle.__scoped
        })
      );
    }
  }, {
    key: 'renderControls',
    value: function renderControls() {
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-3626433229' + ' ' + 'controls',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 663
          }
        },
        this.renderNumberControl(),
        this.renderActions(),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: '3626433229',
          css: '.controls.jsx-3626433229{margin-top:.3em;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;width:100%;padding:.5em 0;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */'
        })
      );
    }
  }, {
    key: 'renderHeader',
    value: function renderHeader() {
      var _this5 = this;

      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-2229275753' + ' ' + 'header',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 684
          }
        },
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          { onClick: function onClick() {
              return _this5.setState({ board: false });
            }, className: 'jsx-2229275753' + ' ' + 'new-game',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 685
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(ReturnIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 686
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
            'div',
            {
              className: 'jsx-2229275753',
              __source: {
                fileName: _jsxFileName,
                lineNumber: 687
              }
            },
            'New Game'
          )
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_10__components_tool_tip__["a" /* default */], {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 689
          }
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: '2229275753',
          css: '.header.jsx-2229275753{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;max-width:500px;padding:0 0.5em;box-sizing:border-box;}.new-game.jsx-2229275753{cursor:pointer;margin-top:.2em;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:.2em 0;}.new-game.jsx-2229275753 svg{height:1em;margin-bottom:.3em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2VzXFxpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrckJvQixBQUc4QixBQVFFLEFBUUosV0FDUSxJQVJILGVBU3BCLENBUndCLDJDQVRULFdBQ21CLGdEQVNQLG1FQVJQLGdCQUNBLGdCQUNNLEFBT0gsc0JBTnZCLHVFQU9tQixlQUNuQiIsImZpbGUiOiJwYWdlc1xcaW5kZXguanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvRGFuaWVsL0Rlc2t0b3AvQ3VycmVudCBDbGFzc2VzL1NlbmlvciBEZXNpZ24vUHJvamVjdC9NZWRpdW0gUG9zdCBzcmMvcmVhY3Qtc3Vkb2t1LWdhbWUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9hY2Nlc3NpYmxlLWVtb2ppICovXHJcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFNldCwgTGlzdCwgZnJvbUpTIH0gZnJvbSAnaW1tdXRhYmxlJztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IE5leHRIZWFkIGZyb20gJ25leHQvaGVhZCc7XHJcbmltcG9ydCBDb2xvciBmcm9tICdjb2xvcic7XHJcbmltcG9ydCBJbnB1dFJhbmdlIGZyb20gJ3JlYWN0LWlucHV0LXJhbmdlJztcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcclxuaW1wb3J0IGNzcyBmcm9tICdzdHlsZWQtanN4L2Nzcyc7XHJcblxyXG5pbXBvcnQgUmFuZ2VTdHlsZSBmcm9tICcuLi9pbnB1dC1yYW5nZS1zdHlsZSc7XHJcbmltcG9ydCBMb3VwZUljb24gZnJvbSAnLi4vc3ZnL2xvdXBlLnN2Zyc7XHJcbmltcG9ydCBSZW1vdmVJY29uIGZyb20gJy4uL3N2Zy9yZW1vdmUuc3ZnJztcclxuaW1wb3J0IFJlbG9hZEljb24gZnJvbSAnLi4vc3ZnL3JlbG9hZC5zdmcnO1xyXG5pbXBvcnQgUmV0dXJuSWNvbiBmcm9tICcuLi9zdmcvcmV0dXJuLnN2Zyc7XHJcbmltcG9ydCBQZW5jaWxJY29uIGZyb20gJy4uL3N2Zy9wZW5jaWwuc3ZnJztcclxuXHJcbmltcG9ydCB7IG1ha2VQdXp6bGUsIHBsdWNrLCBpc1BlZXIgYXMgYXJlQ29vcmRpbmF0ZVBlZXJzLCByYW5nZSB9IGZyb20gJy4uL3N1ZG9rdSc7XHJcbmltcG9ydCB7IGJhY2tHcm91bmRCbHVlIH0gZnJvbSAnLi4vY29sb3JzJztcclxuaW1wb3J0IFRpcCBmcm9tICcuLi9jb21wb25lbnRzL3Rvb2wtdGlwJztcclxuXHJcblxyXG5jb25zdCBEZXNjcmlwdGlvbiA9ICdEaXNjb3ZlciB0aGUgbmV4dCBldm9sdXRpb24gb2YgU3Vkb2t1IHdpdGggYW1hemluZyBncmFwaGljcywgYW5pbWF0aW9ucywgYW5kIHVzZXItZnJpZW5kbHkgZmVhdHVyZXMuIEVuam95IGEgU3Vkb2t1IGV4cGVyaWVuY2UgbGlrZSB5b3UgbmV2ZXIgaGF2ZSBiZWZvcmUgd2l0aCBjdXN0b21pemFibGUgZ2FtZSBnZW5lcmF0aW9uLCBjZWxsIGhpZ2hsaWdodGluZywgaW50dWl0aXZlIGNvbnRyb2xzIGFuZCBtb3JlISc7XHJcbmNvbnN0IGNlbGxXaWR0aCA9IDIuNTtcclxuXHJcbmNvbnN0IExpZ2h0Qmx1ZTEwMCA9ICcjQjNFNUZDJztcclxuY29uc3QgTGlnaHRCbHVlMjAwID0gJyM4MUQ0RkEnO1xyXG5jb25zdCBMaWdodEJsdWUzMDAgPSAnIzRGQzNGNyc7XHJcbmNvbnN0IEluZGlnbzcwMCA9ICcjMzAzRjlGJztcclxuY29uc3QgRGVlcE9yYW5nZTIwMCA9ICcjRkZBQjkxJztcclxuY29uc3QgRGVlcE9yYW5nZTYwMCA9ICcjRjQ1MTFFJztcclxuY29uc3QgQ29udHJvbE51bWJlckNvbG9yID0gSW5kaWdvNzAwO1xyXG5cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXHJcbnsgLyogbGFuZ3VhZ2U9Q1NTICovIH1cclxuY29uc3QgQ2VsbFN0eWxlID0gY3NzYFxyXG4uY2VsbCB7XHJcbiAgICBoZWlnaHQ6ICR7Y2VsbFdpZHRofWVtO1xyXG4gICAgd2lkdGg6ICR7Y2VsbFdpZHRofWVtO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGZvbnQtc2l6ZTogMS4xZW07XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgLjNzIGVhc2UtaW4tb3V0O1xyXG59XHJcbi5jZWxsOm50aC1jaGlsZCgzbiszKTpub3QoOmxhc3QtY2hpbGQpIHtcclxuICAgIGJvcmRlci1yaWdodDogMnB4IHNvbGlkIGJsYWNrO1xyXG59XHJcbi5jZWxsOm5vdCg6bGFzdC1jaGlsZCkge1xyXG4gICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgYmxhY2s7XHJcbn1cclxuLm5vdGUtbnVtYmVyIHtcclxuICAgIGZvbnQtc2l6ZTogLjZlbTtcclxuICAgIHdpZHRoOiAzMyU7XHJcbiAgICBoZWlnaHQ6IDMzJTtcclxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59XHJcbmA7XHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcclxueyAvKiBsYW5ndWFnZT1DU1MgKi8gfVxyXG5jb25zdCBBY3Rpb25zU3R5bGUgPSBjc3NgXHJcbi5hY3Rpb25zIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgbWFyZ2luLXRvcDogLjVlbTtcclxuICAgIHBhZGRpbmc6IDAgLjZlbTtcclxufVxyXG4uYWN0aW9uIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxufVxyXG4uYWN0aW9uIDpnbG9iYWwoc3ZnKSB7XHJcbiAgICB3aWR0aDogMi41ZW07XHJcbiAgICBtYXJnaW4tYm90dG9tOiAuMmVtO1xyXG59XHJcbi5yZWRvIDpnbG9iYWwoc3ZnKSB7XHJcbiAgICB0cmFuc2Zvcm06IHNjYWxlWCgtMSk7XHJcbn1cclxuYDtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xyXG57IC8qIGxhbmd1YWdlPUNTUyAqLyB9XHJcbmNvbnN0IENvbnRyb2xTdHlsZSA9IGNzc2BcclxuLmNvbnRyb2wge1xyXG4gICAgcGFkZGluZzogMCAyZW07XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGZvbnQtZmFtaWx5OiAnU3BlY2lhbCBFbGl0ZScsIGN1cnNpdmU7XHJcbiAgICB0cmFuc2l0aW9uOiBmaWx0ZXIgLjVzIGVhc2UtaW4tb3V0O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxuYDtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xyXG57IC8qIGxhbmd1YWdlPUNTUyAqLyB9XHJcbmNvbnN0IE51bWJlckNvbnRyb2xTdHlsZSA9IGNzc2BcclxuLm51bWJlciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZm9udC1zaXplOiAyZW07XHJcbiAgICBtYXJnaW46IC4xZW07XHJcbiAgICB3aWR0aDogMS41ZW07XHJcbiAgICBoZWlnaHQ6IDEuNWVtO1xyXG4gICAgY29sb3I6ICR7Q29udHJvbE51bWJlckNvbG9yfTtcclxuICAgIGJveC1zaGFkb3c6IDAgMXB4IDJweCByZ2JhKDAsMCwwLDAuMTYpLCAwIDFweCAycHggcmdiYSgwLDAsMCwwLjIzKTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XHJcbn1cclxuLm51bWJlciA+IGRpdiB7XHJcbiAgICBtYXJnaW4tdG9wOiAuM2VtO1xyXG59XHJcbmA7XHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcclxueyAvKiBsYW5ndWFnZT1DU1MgKi8gfVxyXG5jb25zdCBQdXp6bGVTdHlsZSA9IGNzc2BcclxuLnB1enpsZSB7XHJcbiAgICBtYXJnaW4tdG9wOiAuNWVtO1xyXG4gICAgd2lkdGg6ICR7Y2VsbFdpZHRoICogOX1lbTtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIGJveC1zaGFkb3c6IDAgM3B4IDZweCByZ2JhKDAsMCwwLDAuMTYpLCAwIDNweCA2cHggcmdiYSgwLDAsMCwwLjIzKTtcclxufVxyXG4ucm93IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZmxleDogMDtcclxuICAgIHdpZHRoOiAke2NlbGxXaWR0aCAqIDl9ZW07XHJcbn1cclxuLnJvdzpub3QoOmxhc3QtY2hpbGQpIHtcclxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBibGFjaztcclxufVxyXG4ucm93Om50aC1jaGlsZCgzbiszKTpub3QoOmxhc3QtY2hpbGQpIHtcclxuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCBibGFjayAhaW1wb3J0YW50O1xyXG59XHJcbmA7XHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcclxueyAvKiBsYW5ndWFnZT1DU1MgKi8gfVxyXG5jb25zdCBDaXJjdWx1YXJQcm9ncmVzc1N0eWxlID0gY3NzYFxyXG4uY2lyY3VsYXItcHJvZ3Jlc3Mge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICB0cmFuc2l0aW9uOiBmaWx0ZXIgLjRzIGVhc2UtaW4tb3V0O1xyXG59XHJcblxyXG4uY2lyY2xlLWJnIHtcclxuICAgIGZpbGw6IG5vbmU7XHJcbiAgICBzdHJva2U6ICNlZWU7XHJcbiAgICBzdHJva2Utd2lkdGg6IDMuODtcclxufVxyXG5cclxuLmNpcmNsZSB7XHJcbiAgICBzdHJva2U6ICR7Q29udHJvbE51bWJlckNvbG9yfTtcclxuICAgIHRyYW5zaXRpb246IHN0cm9rZS1kYXNoYXJyYXkgLjRzIGVhc2UtaW4tb3V0O1xyXG4gICAgZmlsbDogbm9uZTtcclxuICAgIHN0cm9rZS13aWR0aDogMi44O1xyXG4gICAgc3Ryb2tlLWxpbmVjYXA6IHJvdW5kO1xyXG59XHJcbmA7XHJcblxyXG5jb25zdCBDaXJjdWxhclBhdGhEID0gJ00xOCAyLjA4NDUgYSAxNS45MTU1IDE1LjkxNTUgMCAwIDEgMCAzMS44MzEgYSAxNS45MTU1IDE1LjkxNTUgMCAwIDEgMCAtMzEuODMxJztcclxuXHJcbmZ1bmN0aW9uIGdldEJhY2tHcm91bmRDb2xvcih7XHJcbiAgY29uZmxpY3QsIGlzUGVlciwgc2FtZVZhbHVlLCBpc1NlbGVjdGVkLFxyXG59KSB7XHJcbiAgaWYgKGNvbmZsaWN0ICYmIGlzUGVlciAmJiBzYW1lVmFsdWUpIHtcclxuICAgIHJldHVybiBEZWVwT3JhbmdlMjAwO1xyXG4gIH0gZWxzZSBpZiAoc2FtZVZhbHVlKSB7XHJcbiAgICByZXR1cm4gTGlnaHRCbHVlMzAwO1xyXG4gIH0gZWxzZSBpZiAoaXNTZWxlY3RlZCkge1xyXG4gICAgcmV0dXJuIExpZ2h0Qmx1ZTIwMDtcclxuICB9IGVsc2UgaWYgKGlzUGVlcikge1xyXG4gICAgcmV0dXJuIExpZ2h0Qmx1ZTEwMDtcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRGb250Q29sb3IoeyB2YWx1ZSwgY29uZmxpY3QsIHByZWZpbGxlZCB9KSB7XHJcbiAgaWYgKGNvbmZsaWN0ICYmICFwcmVmaWxsZWQpIHtcclxuICAgIHJldHVybiBEZWVwT3JhbmdlNjAwO1xyXG4gIH0gZWxzZSBpZiAoIXByZWZpbGxlZCAmJiB2YWx1ZSkge1xyXG4gICAgcmV0dXJuIENvbnRyb2xOdW1iZXJDb2xvcjtcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5jb25zdCBOdW1iZXJDb250cm9sID0gKHsgbnVtYmVyLCBvbkNsaWNrLCBjb21wbGV0aW9uUGVyY2VudGFnZSB9KSA9PiAoXHJcbiAgPGRpdlxyXG4gICAga2V5PXtudW1iZXJ9XHJcbiAgICBjbGFzc05hbWU9XCJudW1iZXJcIlxyXG4gICAgb25DbGljaz17b25DbGlja31cclxuICA+XHJcbiAgICA8ZGl2PntudW1iZXJ9PC9kaXY+XHJcbiAgICB7LyogPENpcmNsdWxhclByb2dyZXNzIHBlcmNlbnQ9e2NvbXBsZXRpb25QZXJjZW50YWdlfSAvPiAqL31cclxuICAgIDxzdHlsZSBqc3g+e051bWJlckNvbnRyb2xTdHlsZX08L3N0eWxlPlxyXG4gIDwvZGl2PlxyXG4pO1xyXG5cclxuTnVtYmVyQ29udHJvbC5wcm9wVHlwZXMgPSB7XHJcbiAgbnVtYmVyOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXHJcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgY29tcGxldGlvblBlcmNlbnRhZ2U6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbk51bWJlckNvbnRyb2wuZGVmYXVsdFByb3BzID0ge1xyXG4gIG9uQ2xpY2s6IG51bGwsXHJcbn07XHJcblxyXG5jb25zdCBDZWxsID0gKHByb3BzKSA9PiB7XHJcbiAgY29uc3Qge1xyXG4gICAgdmFsdWUsIG9uQ2xpY2ssIG9uS2V5UHJlc3MsIGlzUGVlciwgaXNTZWxlY3RlZCwgc2FtZVZhbHVlLCBwcmVmaWxsZWQsIG5vdGVzLCBjb25mbGljdCxcclxuICB9ID0gcHJvcHM7XHJcbiAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gZ2V0QmFja0dyb3VuZENvbG9yKHtcclxuICAgIGNvbmZsaWN0LCBpc1BlZXIsIHNhbWVWYWx1ZSwgaXNTZWxlY3RlZCxcclxuICB9KTtcclxuICBjb25zdCBmb250Q29sb3IgPSBnZXRGb250Q29sb3IoeyBjb25mbGljdCwgcHJlZmlsbGVkLCB2YWx1ZSB9KTtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJjZWxsXCIgb25DbGljaz17b25DbGlja30gb25LZXlEb3duPXtvbktleVByZXNzfSB0YWJJbmRleD1cIjBcIj5cclxuICAgICAge1xyXG4gICAgICAgIG5vdGVzID9cclxuICAgICAgICAgIHJhbmdlKDkpLm1hcChpID0+XHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICA8ZGl2IGtleT17aX0gY2xhc3NOYW1lPVwibm90ZS1udW1iZXJcIj5cclxuICAgICAgICAgICAgICAgIHtub3Rlcy5oYXMoaSArIDEpICYmIChpICsgMSl9XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICkpIDpcclxuICAgICAgICAgIHZhbHVlICYmIHZhbHVlXHJcbiAgICAgIH1cclxuICAgICAgey8qIGxhbmd1YWdlPUNTUyAqL31cclxuICAgICAgPHN0eWxlIGpzeD57Q2VsbFN0eWxlfTwvc3R5bGU+XHJcbiAgICAgIDxzdHlsZSBqc3g+e2BcclxuICAgICAgICAgICAgICAgIC5jZWxsIHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2JhY2tncm91bmRDb2xvciB8fCAnaW5pdGlhbCd9O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke2ZvbnRDb2xvciB8fCAnaW5pdGlhbCd9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBgfVxyXG4gICAgICA8L3N0eWxlPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbkNlbGwucHJvcFR5cGVzID0ge1xyXG4gIC8vIGN1cnJlbnQgbnVtYmVyIHZhbHVlXHJcbiAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIsXHJcbiAgLy8gY2VsbCBjbGljayBoYW5kbGVyXHJcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAvLyBrZXlib2FyZCBpbnB1dCBoYW5kbGVyXHJcbiAgb25LZXlQcmVzczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAvLyBpZiB0aGUgY2VsbCBpcyBhIHBlZXIgb2YgdGhlIHNlbGVjdGVkIGNlbGxcclxuICBpc1BlZXI6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXHJcbiAgLy8gaWYgdGhlIGNlbGwgaXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXJcclxuICBpc1NlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxyXG4gIC8vIGN1cnJlbnQgY2VsbCBoYXMgdGhlIHNhbWUgdmFsdWUgaWYgdGhlIHVzZXIgc2VsZWN0ZWQgY2VsbFxyXG4gIHNhbWVWYWx1ZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcclxuICAvLyBpZiB0aGlzIHdhcyBwcmVmaWxsZWQgYXMgYSBwYXJ0IG9mIHRoZSBwdXp6bGVcclxuICBwcmVmaWxsZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXHJcbiAgLy8gY3VycmVudCBub3RlcyB0YWtlbiBvbiB0aGUgY2VsbFxyXG4gIG5vdGVzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihTZXQpLFxyXG4gIC8vIGlmIHRoZSBjdXJyZW50IGNlbGwgZG9lcyBub3Qgc2F0aXNmeSB0aGUgZ2FtZSBjb25zdHJhaW50XHJcbiAgY29uZmxpY3Q6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXHJcbn07XHJcblxyXG5DZWxsLmRlZmF1bHRQcm9wcyA9IHtcclxuICBub3RlczogbnVsbCxcclxuICB2YWx1ZTogbnVsbCxcclxufTtcclxuXHJcbmZ1bmN0aW9uIGdldENsaWNrSGFuZGxlcihvbkNsaWNrLCBvbkRvdWJsZUNsaWNrLCBkZWxheSA9IDI1MCkge1xyXG4gIGxldCB0aW1lb3V0SUQgPSBudWxsO1xyXG4gIHJldHVybiAoZXZlbnQpID0+IHtcclxuICAgIGlmICghdGltZW91dElEKSB7XHJcbiAgICAgIHRpbWVvdXRJRCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIG9uQ2xpY2soZXZlbnQpO1xyXG4gICAgICAgIHRpbWVvdXRJRCA9IG51bGw7XHJcbiAgICAgIH0sIGRlbGF5KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRpbWVvdXRJRCA9IGNsZWFyVGltZW91dCh0aW1lb3V0SUQpO1xyXG4gICAgICBvbkRvdWJsZUNsaWNrKGV2ZW50KTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICogbWFrZSBzaXplIDkgYXJyYXkgb2YgMHNcclxuICogQHJldHVybnMge0FycmF5fVxyXG4gKi9cclxuZnVuY3Rpb24gbWFrZUNvdW50T2JqZWN0KCkge1xyXG4gIGNvbnN0IGNvdW50T2JqID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSArPSAxKSBjb3VudE9iai5wdXNoKDApO1xyXG4gIHJldHVybiBjb3VudE9iajtcclxufVxyXG5cclxuLyoqXHJcbiAqIGdpdmVuIGEgMkQgYXJyYXkgb2YgbnVtYmVycyBhcyB0aGUgaW5pdGlhbCBwdXp6bGUsIGdlbmVyYXRlIHRoZSBpbml0aWFsIGdhbWUgc3RhdGVcclxuICogQHBhcmFtIHB1enpsZVxyXG4gKiBAcmV0dXJucyB7YW55fVxyXG4gKi9cclxuZnVuY3Rpb24gbWFrZUJvYXJkKHsgcHV6emxlIH0pIHtcclxuICAvLyBjcmVhdGUgaW5pdGlhbCBjb3VudCBvYmplY3QgdG8ga2VlcCB0cmFjayBvZiBjb25mbGljdHMgcGVyIG51bWJlciB2YWx1ZVxyXG4gIGNvbnN0IHJvd3MgPSBBcnJheS5mcm9tKEFycmF5KDkpLmtleXMoKSkubWFwKCgpID0+IG1ha2VDb3VudE9iamVjdCgpKTtcclxuICBjb25zdCBjb2x1bW5zID0gQXJyYXkuZnJvbShBcnJheSg5KS5rZXlzKCkpLm1hcCgoKSA9PiBtYWtlQ291bnRPYmplY3QoKSk7XHJcbiAgY29uc3Qgc3F1YXJlcyA9IEFycmF5LmZyb20oQXJyYXkoOSkua2V5cygpKS5tYXAoKCkgPT4gbWFrZUNvdW50T2JqZWN0KCkpO1xyXG4gIGNvbnN0IHJlc3VsdCA9IHB1enpsZS5tYXAoKHJvdywgaSkgPT4gKFxyXG4gICAgcm93Lm1hcCgoY2VsbCwgaikgPT4ge1xyXG4gICAgICBpZiAoY2VsbCkge1xyXG4gICAgICAgIHJvd3NbaV1bY2VsbF0gKz0gMTtcclxuICAgICAgICBjb2x1bW5zW2pdW2NlbGxdICs9IDE7XHJcbiAgICAgICAgc3F1YXJlc1soKE1hdGguZmxvb3IoaSAvIDMpKSAqIDMpICsgTWF0aC5mbG9vcihqIC8gMyldW2NlbGxdICs9IDE7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB2YWx1ZTogcHV6emxlW2ldW2pdID4gMCA/IHB1enpsZVtpXVtqXSA6IG51bGwsXHJcbiAgICAgICAgcHJlZmlsbGVkOiAhIXB1enpsZVtpXVtqXSxcclxuICAgICAgfTtcclxuICAgIH0pXHJcbiAgKSk7XHJcbiAgcmV0dXJuIGZyb21KUyh7IHB1enpsZTogcmVzdWx0LCBzZWxlY3RlZDogZmFsc2UsIGluTm90ZU1vZGU6IGZhbHNlLCBjaG9pY2VzOiB7IHJvd3MsIGNvbHVtbnMsIHNxdWFyZXMgfSB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIGdpdmUgdGhlIGNvb3JkaW5hdGUgdXBkYXRlIHRoZSBjdXJyZW50IGJvYXJkIHdpdGggYSBudW1iZXIgY2hvaWNlXHJcbiAqIEBwYXJhbSB4XHJcbiAqIEBwYXJhbSB5XHJcbiAqIEBwYXJhbSBudW1iZXJcclxuICogQHBhcmFtIGZpbGwgd2hldGhlciB0byBzZXQgb3IgdW5zZXRcclxuICogQHBhcmFtIGJvYXJkIHRoZSBpbW11dGFibGUgYm9hcmQgZ2l2ZW4gdG8gY2hhbmdlXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVCb2FyZFdpdGhOdW1iZXIoe1xyXG4gIHgsIHksIG51bWJlciwgZmlsbCA9IHRydWUsIGJvYXJkLFxyXG59KSB7XHJcbiAgbGV0IGNlbGwgPSBib2FyZC5nZXQoJ3B1enpsZScpLmdldEluKFt4LCB5XSk7XHJcbiAgLy8gZGVsZXRlIGl0cyBub3Rlc1xyXG4gIGNlbGwgPSBjZWxsLmRlbGV0ZSgnbm90ZXMnKTtcclxuICAvLyBzZXQgb3IgdW5zZXQgaXRzIHZhbHVlIGRlcGVuZGluZyBvbiBgZmlsbGBcclxuICBjZWxsID0gZmlsbCA/IGNlbGwuc2V0KCd2YWx1ZScsIG51bWJlcikgOiBjZWxsLmRlbGV0ZSgndmFsdWUnKTtcclxuICBjb25zdCBpbmNyZW1lbnQgPSBmaWxsID8gMSA6IC0xO1xyXG4gIC8vIHVwZGF0ZSB0aGUgY3VycmVudCBncm91cCBjaG9pY2VzXHJcbiAgY29uc3Qgcm93UGF0aCA9IFsnY2hvaWNlcycsICdyb3dzJywgeCwgbnVtYmVyXTtcclxuICBjb25zdCBjb2x1bW5QYXRoID0gWydjaG9pY2VzJywgJ2NvbHVtbnMnLCB5LCBudW1iZXJdO1xyXG4gIGNvbnN0IHNxdWFyZVBhdGggPSBbJ2Nob2ljZXMnLCAnc3F1YXJlcycsXHJcbiAgICAoKE1hdGguZmxvb3IoeCAvIDMpKSAqIDMpICsgTWF0aC5mbG9vcih5IC8gMyksIG51bWJlcl07XHJcbiAgcmV0dXJuIGJvYXJkLnNldEluKHJvd1BhdGgsIGJvYXJkLmdldEluKHJvd1BhdGgpICsgaW5jcmVtZW50KVxyXG4gICAgLnNldEluKGNvbHVtblBhdGgsIGJvYXJkLmdldEluKGNvbHVtblBhdGgpICsgaW5jcmVtZW50KVxyXG4gICAgLnNldEluKHNxdWFyZVBhdGgsIGJvYXJkLmdldEluKHNxdWFyZVBhdGgpICsgaW5jcmVtZW50KVxyXG4gICAgLnNldEluKFsncHV6emxlJywgeCwgeV0sIGNlbGwpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXROdW1iZXJPZkdyb3Vwc0Fzc2lnbmVkRm9yTnVtYmVyKG51bWJlciwgZ3JvdXBzKSB7XHJcbiAgcmV0dXJuIGdyb3Vwcy5yZWR1Y2UoKGFjY3VtdWxhdG9yLCByb3cpID0+XHJcbiAgICBhY2N1bXVsYXRvciArIChyb3cuZ2V0KG51bWJlcikgPiAwID8gMSA6IDApLCAwKTtcclxufVxyXG5cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLW11bHRpLWNvbXBcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5kZXggZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIHN0YXRlID0ge307XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICBpZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcikge1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXJcclxuICAgICAgICAucmVnaXN0ZXIoJy9zZXJ2aWNlLXdvcmtlci5qcycpXHJcbiAgICAgICAgLnRoZW4oKHJlZykgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ1NlcnZpY2VXb3JrZXIgc2NvcGU6ICcsIHJlZy5zY29wZSk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnc2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uIHN1Y2Nlc3NmdWwnKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ3NlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbiBmYWlsZWQnLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRTZWxlY3RlZENlbGwoKSB7XHJcbiAgICBjb25zdCB7IGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3Qgc2VsZWN0ZWQgPSBib2FyZC5nZXQoJ3NlbGVjdGVkJyk7XHJcbiAgICByZXR1cm4gc2VsZWN0ZWQgJiYgYm9hcmQuZ2V0KCdwdXp6bGUnKS5nZXRJbihbc2VsZWN0ZWQueCwgc2VsZWN0ZWQueV0pO1xyXG4gIH1cclxuXHJcbiAgLy8gZ2V0IHRoZSBtaW4gYmV0d2VlbiBpdHMgY29tcGxldGlvbiBpbiByb3dzLCBjb2x1bW5zIGFuZCBzcXVhcmVzLlxyXG4gIGdldE51bWJlclZhbHVlQ291bnQobnVtYmVyKSB7XHJcbiAgICBjb25zdCByb3dzID0gdGhpcy5zdGF0ZS5ib2FyZC5nZXRJbihbJ2Nob2ljZXMnLCAncm93cyddKTtcclxuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLnN0YXRlLmJvYXJkLmdldEluKFsnY2hvaWNlcycsICdjb2x1bW5zJ10pO1xyXG4gICAgY29uc3Qgc3F1YXJlcyA9IHRoaXMuc3RhdGUuYm9hcmQuZ2V0SW4oWydjaG9pY2VzJywgJ3NxdWFyZXMnXSk7XHJcbiAgICByZXR1cm4gTWF0aC5taW4oXHJcbiAgICAgIGdldE51bWJlck9mR3JvdXBzQXNzaWduZWRGb3JOdW1iZXIobnVtYmVyLCBzcXVhcmVzKSxcclxuICAgICAgTWF0aC5taW4oXHJcbiAgICAgICAgZ2V0TnVtYmVyT2ZHcm91cHNBc3NpZ25lZEZvck51bWJlcihudW1iZXIsIHJvd3MpLFxyXG4gICAgICAgIGdldE51bWJlck9mR3JvdXBzQXNzaWduZWRGb3JOdW1iZXIobnVtYmVyLCBjb2x1bW5zKSxcclxuICAgICAgKSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBnZW5lcmF0ZUdhbWUgPSAoZmluYWxDb3VudCA9IDIwKSA9PiB7XHJcbiAgICAvLyBnZXQgYSBmaWxsZWQgcHV6emxlIGdlbmVyYXRlZFxyXG4gICAgY29uc3Qgc29sdXRpb24gPSBtYWtlUHV6emxlKCk7XHJcbiAgICAvLyBwbHVjayB2YWx1ZXMgZnJvbSBjZWxscyB0byBjcmVhdGUgdGhlIGdhbWVcclxuICAgIGNvbnN0IHsgcHV6emxlIH0gPSBwbHVjayhzb2x1dGlvbiwgZmluYWxDb3VudCk7XHJcbiAgICAvLyBpbml0aWFsaXplIHRoZSBib2FyZCB3aXRoIGNob2ljZSBjb3VudHNcclxuICAgIGNvbnN0IGJvYXJkID0gbWFrZUJvYXJkKHsgcHV6emxlIH0pO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGJvYXJkLCBoaXN0b3J5OiBMaXN0Lm9mKGJvYXJkKSwgaGlzdG9yeU9mZlNldDogMCwgc29sdXRpb24sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFkZE51bWJlckFzTm90ZSA9IChudW1iZXIpID0+IHtcclxuICAgIGxldCB7IGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgbGV0IHNlbGVjdGVkQ2VsbCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XHJcbiAgICBpZiAoIXNlbGVjdGVkQ2VsbCkgcmV0dXJuO1xyXG4gICAgY29uc3QgcHJlZmlsbGVkID0gc2VsZWN0ZWRDZWxsLmdldCgncHJlZmlsbGVkJyk7XHJcbiAgICBpZiAocHJlZmlsbGVkKSByZXR1cm47XHJcbiAgICBjb25zdCB7IHgsIHkgfSA9IGJvYXJkLmdldCgnc2VsZWN0ZWQnKTtcclxuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHNlbGVjdGVkQ2VsbC5nZXQoJ3ZhbHVlJyk7XHJcbiAgICBpZiAoY3VycmVudFZhbHVlKSB7XHJcbiAgICAgIGJvYXJkID0gdXBkYXRlQm9hcmRXaXRoTnVtYmVyKHtcclxuICAgICAgICB4LCB5LCBudW1iZXI6IGN1cnJlbnRWYWx1ZSwgZmlsbDogZmFsc2UsIGJvYXJkOiB0aGlzLnN0YXRlLmJvYXJkLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGxldCBub3RlcyA9IHNlbGVjdGVkQ2VsbC5nZXQoJ25vdGVzJykgfHwgU2V0KCk7XHJcbiAgICBpZiAobm90ZXMuaGFzKG51bWJlcikpIHtcclxuICAgICAgbm90ZXMgPSBub3Rlcy5kZWxldGUobnVtYmVyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG5vdGVzID0gbm90ZXMuYWRkKG51bWJlcik7XHJcbiAgICB9XHJcbiAgICBzZWxlY3RlZENlbGwgPSBzZWxlY3RlZENlbGwuc2V0KCdub3RlcycsIG5vdGVzKTtcclxuICAgIHNlbGVjdGVkQ2VsbCA9IHNlbGVjdGVkQ2VsbC5kZWxldGUoJ3ZhbHVlJyk7XHJcbiAgICBib2FyZCA9IGJvYXJkLnNldEluKFsncHV6emxlJywgeCwgeV0sIHNlbGVjdGVkQ2VsbCk7XHJcbiAgICB0aGlzLnVwZGF0ZUJvYXJkKGJvYXJkKTtcclxuICB9O1xyXG5cclxuICB1cGRhdGVCb2FyZCA9IChuZXdCb2FyZCkgPT4ge1xyXG4gICAgbGV0IHsgaGlzdG9yeSB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHsgaGlzdG9yeU9mZlNldCB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIC8vIGFueXRoaW5nIGJlZm9yZSBjdXJyZW50IHN0ZXAgaXMgc3RpbGwgaW4gaGlzdG9yeVxyXG4gICAgaGlzdG9yeSA9IGhpc3Rvcnkuc2xpY2UoMCwgaGlzdG9yeU9mZlNldCArIDEpO1xyXG4gICAgLy8gYWRkIGl0c2VsZiBvbnRvIHRoZSBoaXN0b3J5XHJcbiAgICBoaXN0b3J5ID0gaGlzdG9yeS5wdXNoKG5ld0JvYXJkKTtcclxuICAgIC8vIHVwZGF0ZSB0aGUgZ2FtZVxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGJvYXJkOiBuZXdCb2FyZCwgaGlzdG9yeSwgaGlzdG9yeU9mZlNldDogaGlzdG9yeS5zaXplIC0gMSB9KTtcclxuICB9O1xyXG5cclxuICBjYW5VbmRvID0gKCkgPT4gdGhpcy5zdGF0ZS5oaXN0b3J5T2ZmU2V0ID4gMFxyXG5cclxuICByZWRvID0gKCkgPT4ge1xyXG4gICAgY29uc3QgeyBoaXN0b3J5IH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgbGV0IHsgaGlzdG9yeU9mZlNldCB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGlmIChoaXN0b3J5LnNpemUpIHtcclxuICAgICAgaGlzdG9yeU9mZlNldCA9IE1hdGgubWluKGhpc3Rvcnkuc2l6ZSAtIDEsIGhpc3RvcnlPZmZTZXQgKyAxKTtcclxuICAgICAgY29uc3QgYm9hcmQgPSBoaXN0b3J5LmdldChoaXN0b3J5T2ZmU2V0KTtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGJvYXJkLCBoaXN0b3J5T2ZmU2V0IH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHVuZG8gPSAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGhpc3RvcnkgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBsZXQgeyBoaXN0b3J5T2ZmU2V0LCBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGlmIChoaXN0b3J5LnNpemUpIHtcclxuICAgICAgaGlzdG9yeU9mZlNldCA9IE1hdGgubWF4KDAsIGhpc3RvcnlPZmZTZXQgLSAxKTtcclxuICAgICAgYm9hcmQgPSBoaXN0b3J5LmdldChoaXN0b3J5T2ZmU2V0KTtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGJvYXJkLCBoaXN0b3J5T2ZmU2V0LCBoaXN0b3J5IH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRvZ2dsZU5vdGVNb2RlID0gKCkgPT4ge1xyXG4gICAgbGV0IHsgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBsZXQgY3Vyck5vdGVNb2RlID0gYm9hcmQuZ2V0KCdpbk5vdGVNb2RlJyk7XHJcbiAgICBib2FyZCA9IGJvYXJkLnNldCgnaW5Ob3RlTW9kZScsICFjdXJyTm90ZU1vZGUpO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGJvYXJkIH0pO1xyXG4gIH1cclxuXHJcbiAgZXJhc2VTZWxlY3RlZCA9ICgpID0+IHtcclxuICAgIGNvbnN0IHNlbGVjdGVkQ2VsbCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XHJcbiAgICBpZiAoIXNlbGVjdGVkQ2VsbCkgcmV0dXJuO1xyXG4gICAgdGhpcy5maWxsTnVtYmVyKGZhbHNlKTtcclxuICB9XHJcblxyXG4gIGZpbGxTZWxlY3RlZFdpdGhTb2x1dGlvbiA9ICgpID0+IHtcclxuICAgIGNvbnN0IHsgYm9hcmQsIHNvbHV0aW9uIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3Qgc2VsZWN0ZWRDZWxsID0gdGhpcy5nZXRTZWxlY3RlZENlbGwoKTtcclxuICAgIGlmICghc2VsZWN0ZWRDZWxsKSByZXR1cm47XHJcbiAgICBjb25zdCB7IHgsIHkgfSA9IGJvYXJkLmdldCgnc2VsZWN0ZWQnKTtcclxuICAgIHRoaXMuZmlsbE51bWJlcihzb2x1dGlvblt4XVt5XSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gZmlsbCBjdXJyZW50bHkgc2VsZWN0ZWQgY2VsbCB3aXRoIG51bWJlclxyXG4gIGZpbGxOdW1iZXIgPSAobnVtYmVyKSA9PiB7XHJcbiAgICBsZXQgeyBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHNlbGVjdGVkQ2VsbCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XHJcbiAgICAvLyBuby1vcCBpZiBub3RoaW5nIGlzIHNlbGVjdGVkXHJcbiAgICBpZiAoIXNlbGVjdGVkQ2VsbCkgcmV0dXJuO1xyXG4gICAgY29uc3QgcHJlZmlsbGVkID0gc2VsZWN0ZWRDZWxsLmdldCgncHJlZmlsbGVkJyk7XHJcbiAgICAvLyBuby1vcCBpZiBpdCBpcyByZWZpbGxlZFxyXG4gICAgaWYgKHByZWZpbGxlZCkgcmV0dXJuO1xyXG4gICAgY29uc3QgeyB4LCB5IH0gPSBib2FyZC5nZXQoJ3NlbGVjdGVkJyk7XHJcbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBzZWxlY3RlZENlbGwuZ2V0KCd2YWx1ZScpO1xyXG4gICAgLy8gcmVtb3ZlIHRoZSBjdXJyZW50IHZhbHVlIGFuZCB1cGRhdGUgdGhlIGdhbWUgc3RhdGVcclxuICAgIGlmIChjdXJyZW50VmFsdWUpIHtcclxuICAgICAgYm9hcmQgPSB1cGRhdGVCb2FyZFdpdGhOdW1iZXIoe1xyXG4gICAgICAgIHgsIHksIG51bWJlcjogY3VycmVudFZhbHVlLCBmaWxsOiBmYWxzZSwgYm9hcmQ6IHRoaXMuc3RhdGUuYm9hcmQsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gdXBkYXRlIHRvIG5ldyBudW1iZXIgaWYgYW55XHJcbiAgICBjb25zdCBzZXROdW1iZXIgPSBjdXJyZW50VmFsdWUgIT09IG51bWJlciAmJiBudW1iZXI7XHJcbiAgICBpZiAoc2V0TnVtYmVyKSB7XHJcbiAgICAgIGJvYXJkID0gdXBkYXRlQm9hcmRXaXRoTnVtYmVyKHtcclxuICAgICAgICB4LCB5LCBudW1iZXIsIGZpbGw6IHRydWUsIGJvYXJkLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlQm9hcmQoYm9hcmQpO1xyXG4gIH07XHJcblxyXG4gIHNlbGVjdENlbGwgPSAoeCwgeSkgPT4ge1xyXG5cclxuICAgIGNvbnNvbGUubG9nKFwiQ2VsbCBTZWxlY3RlZFwiKTtcclxuXHJcbiAgICBsZXQgeyBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGJvYXJkID0gYm9hcmQuc2V0KCdzZWxlY3RlZCcsIHsgeCwgeSB9KTtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBib2FyZCB9KTtcclxuICB9O1xyXG5cclxuICBpc0NvbmZsaWN0KGksIGopIHtcclxuICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXMuc3RhdGUuYm9hcmQuZ2V0SW4oWydwdXp6bGUnLCBpLCBqXSkudG9KU09OKCk7XHJcbiAgICBpZiAoIXZhbHVlKSByZXR1cm4gZmFsc2U7XHJcbiAgICBjb25zdCByb3dDb25mbGljdCA9XHJcbiAgICAgIHRoaXMuc3RhdGUuYm9hcmQuZ2V0SW4oWydjaG9pY2VzJywgJ3Jvd3MnLCBpLCB2YWx1ZV0pID4gMTtcclxuICAgIGNvbnN0IGNvbHVtbkNvbmZsaWN0ID1cclxuICAgICAgdGhpcy5zdGF0ZS5ib2FyZC5nZXRJbihbJ2Nob2ljZXMnLCAnY29sdW1ucycsIGosIHZhbHVlXSkgPiAxO1xyXG4gICAgY29uc3Qgc3F1YXJlQ29uZmxpY3QgPVxyXG4gICAgICB0aGlzLnN0YXRlLmJvYXJkLmdldEluKFsnY2hvaWNlcycsICdzcXVhcmVzJyxcclxuICAgICAgICAoKE1hdGguZmxvb3IoaSAvIDMpKSAqIDMpICsgTWF0aC5mbG9vcihqIC8gMyksIHZhbHVlXSkgPiAxO1xyXG4gICAgcmV0dXJuIHJvd0NvbmZsaWN0IHx8IGNvbHVtbkNvbmZsaWN0IHx8IHNxdWFyZUNvbmZsaWN0O1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlS2V5RG93biA9IChldmVudCkgPT4ge1xyXG4gICAgbGV0IHsgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBsZXQgaW5Ob3RlTW9kZSA9IGJvYXJkLmdldCgnaW5Ob3RlTW9kZScpO1xyXG4gICAgbGV0IG51bWJlcklucHV0ID0gTnVtYmVyKGV2ZW50LmtleSk7XHJcbiAgICBcclxuICAgIGlmIChpbk5vdGVNb2RlKSB0aGlzLmFkZE51bWJlckFzTm90ZShudW1iZXJJbnB1dCk7XHJcbiAgICBlbHNlIHRoaXMuZmlsbE51bWJlcihudW1iZXJJbnB1dCk7XHJcbiAgICBcclxuICB9O1xyXG5cclxuICByZW5kZXJDZWxsKGNlbGwsIHgsIHkpIHtcclxuICAgIGNvbnN0IHsgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCBzZWxlY3RlZCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XHJcbiAgICBjb25zdCB7IHZhbHVlLCBwcmVmaWxsZWQsIG5vdGVzIH0gPSBjZWxsLnRvSlNPTigpO1xyXG4gICAgY29uc3QgY29uZmxpY3QgPSB0aGlzLmlzQ29uZmxpY3QoeCwgeSk7XHJcbiAgICBjb25zdCBwZWVyID0gYXJlQ29vcmRpbmF0ZVBlZXJzKHsgeCwgeSB9LCBib2FyZC5nZXQoJ3NlbGVjdGVkJykpO1xyXG4gICAgY29uc3Qgc2FtZVZhbHVlID0gISEoc2VsZWN0ZWQgJiYgc2VsZWN0ZWQuZ2V0KCd2YWx1ZScpXHJcbiAgICAgICYmIHZhbHVlID09PSBzZWxlY3RlZC5nZXQoJ3ZhbHVlJykpO1xyXG5cclxuICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSBjZWxsID09PSBzZWxlY3RlZDtcclxuICAgIHJldHVybiAoPENlbGxcclxuICAgICAgcHJlZmlsbGVkPXtwcmVmaWxsZWR9XHJcbiAgICAgIG5vdGVzPXtub3Rlc31cclxuICAgICAgc2FtZVZhbHVlPXtzYW1lVmFsdWV9XHJcbiAgICAgIGlzU2VsZWN0ZWQ9e2lzU2VsZWN0ZWR9XHJcbiAgICAgIGlzUGVlcj17cGVlcn1cclxuICAgICAgdmFsdWU9e3ZhbHVlfVxyXG4gICAgICBvbkNsaWNrPXsoKSA9PiB7IHRoaXMuc2VsZWN0Q2VsbCh4LCB5KTsgfX1cclxuICAgICAgLy8gQSBnb29kIHNwb3QgdG8gaGFuZGxlIGtleXByZXNzZXM/XHJcbiAgICAgIG9uS2V5UHJlc3M9eyhldmVudCkgPT4gdGhpcy5oYW5kbGVLZXlEb3duKGV2ZW50KX1cclxuICAgICAga2V5PXt5fVxyXG4gICAgICB4PXt4fVxyXG4gICAgICB5PXt5fVxyXG4gICAgICBjb25mbGljdD17Y29uZmxpY3R9XHJcbiAgICAvPik7XHJcbiAgfVxyXG4gIFxyXG5cclxuICByZW5kZXJOdW1iZXJDb250cm9sKCkge1xyXG4gICAgY29uc3Qgc2VsZWN0ZWRDZWxsID0gdGhpcy5nZXRTZWxlY3RlZENlbGwoKTtcclxuICAgIGNvbnN0IHByZWZpbGxlZCA9IHNlbGVjdGVkQ2VsbCAmJiBzZWxlY3RlZENlbGwuZ2V0KCdwcmVmaWxsZWQnKTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbFwiPlxyXG4gICAgICAgIHtyYW5nZSg5KS5tYXAoKGkpID0+IHtcclxuICAgICAgICAgIGNvbnN0IG51bWJlciA9IGkgKyAxO1xyXG4gICAgICAgICAgLy8gaGFuZGxlcyBiaW5kaW5nIHNpbmdsZSBjbGljayBhbmQgZG91YmxlIGNsaWNrIGNhbGxiYWNrc1xyXG4gICAgICAgICAgY29uc3QgY2xpY2tIYW5kbGUgPSBnZXRDbGlja0hhbmRsZXIoXHJcbiAgICAgICAgICAgICgpID0+IHsgdGhpcy5maWxsTnVtYmVyKG51bWJlcik7IH0sXHJcbiAgICAgICAgICAgICgpID0+IHsgdGhpcy5hZGROdW1iZXJBc05vdGUobnVtYmVyKTsgfSxcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8TnVtYmVyQ29udHJvbFxyXG4gICAgICAgICAgICAgIGtleT17bnVtYmVyfVxyXG4gICAgICAgICAgICAgIG51bWJlcj17bnVtYmVyfVxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eyFwcmVmaWxsZWQgPyBjbGlja0hhbmRsZSA6IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgICBjb21wbGV0aW9uUGVyY2VudGFnZT17dGhpcy5nZXROdW1iZXJWYWx1ZUNvdW50KG51bWJlcikgLyA5fVxyXG4gICAgICAgICAgICAvPik7XHJcbiAgICAgICAgfSl9XHJcbiAgICAgICAgPHN0eWxlIGpzeD57Q29udHJvbFN0eWxlfTwvc3R5bGU+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbiAgLyo8ZGl2IGNsYXNzTmFtZT1cImFjdGlvbiByZWRvXCIgb25DbGljaz17aGlzdG9yeS5zaXplID8gdGhpcy5yZWRvIDogbnVsbH0+XHJcbiAgICAgICAgICA8UmVsb2FkSWNvbiAvPlJlZG9cclxuICAgICAgICA8L2Rpdj4gKi9cclxuICByZW5kZXJBY3Rpb25zKCkge1xyXG4gICAgY29uc3QgeyBib2FyZCwgaGlzdG9yeSB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHNlbGVjdGVkQ2VsbCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XHJcbiAgICBjb25zdCBwcmVmaWxsZWQgPSBzZWxlY3RlZENlbGwgJiYgc2VsZWN0ZWRDZWxsLmdldCgncHJlZmlsbGVkJyk7XHJcbiAgICBjb25zdCBpbk5vdGVNb2RlID0gYm9hcmQuZ2V0KCdpbk5vdGVNb2RlJyk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvbnNcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvblwiIG9uQ2xpY2s9e2hpc3Rvcnkuc2l6ZSA/IHRoaXMudW5kbyA6IG51bGx9PlxyXG4gICAgICAgICAgPFJlbG9hZEljb24gLz5VbmRvXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb24gbm90ZVwiIG9uQ2xpY2s9e3RoaXMudG9nZ2xlTm90ZU1vZGV9PlxyXG4gICAgICAgICAgPFJlbG9hZEljb24gLz4ge2luTm90ZU1vZGUgPyBcIk9uXCIgOiBcIk9mZlwifVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWN0aW9uXCIgb25DbGljaz17IXByZWZpbGxlZCA/IHRoaXMuZXJhc2VTZWxlY3RlZCA6IG51bGx9PlxyXG4gICAgICAgICAgPFJlbW92ZUljb24gLz5FcmFzZVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXZcclxuICAgICAgICAgIGNsYXNzTmFtZT1cImFjdGlvblwiXHJcbiAgICAgICAgICBvbkNsaWNrPXshcHJlZmlsbGVkID9cclxuICAgICAgICAgIHRoaXMuZmlsbFNlbGVjdGVkV2l0aFNvbHV0aW9uIDogbnVsbH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TG91cGVJY29uIC8+SGludFxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxzdHlsZSBqc3g+e0FjdGlvbnNTdHlsZX08L3N0eWxlPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJQdXp6bGUoKSB7XHJcbiAgICBjb25zdCB7IGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwdXp6bGVcIj5cclxuICAgICAgICB7Ym9hcmQuZ2V0KCdwdXp6bGUnKS5tYXAoKHJvdywgaSkgPT4gKFxyXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxyXG4gICAgICAgICAgPGRpdiBrZXk9e2l9IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgcm93Lm1hcCgoY2VsbCwgaikgPT4gdGhpcy5yZW5kZXJDZWxsKGNlbGwsIGksIGopKS50b0FycmF5KClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKSkudG9BcnJheSgpfVxyXG4gICAgICAgIDxzdHlsZSBqc3g+e1B1enpsZVN0eWxlfTwvc3R5bGU+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJlbmRlckNvbnRyb2xzKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sc1wiPlxyXG4gICAgICAgIHt0aGlzLnJlbmRlck51bWJlckNvbnRyb2woKX1cclxuICAgICAgICB7dGhpcy5yZW5kZXJBY3Rpb25zKCl9XHJcbiAgICAgICAgeyAvKiBsYW5ndWFnZT1DU1MgKi8gfVxyXG4gICAgICAgIDxzdHlsZSBqc3g+e2BcclxuICAgICAgICAgICAgLmNvbnRyb2xzIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IC4zZW07XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwO1xyXG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IC41ZW0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIGB9XHJcbiAgICAgICAgPC9zdHlsZT5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySGVhZGVyKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5ldy1nYW1lXCIgb25DbGljaz17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGJvYXJkOiBmYWxzZSB9KX0+XHJcbiAgICAgICAgICA8UmV0dXJuSWNvbiAvPlxyXG4gICAgICAgICAgPGRpdj5OZXcgR2FtZTwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxUaXAgLz5cclxuICAgICAgICB7IC8qIGxhbmd1YWdlPUNTUyAqLyB9XHJcbiAgICAgICAgPHN0eWxlIGpzeD57YFxyXG4gICAgICAgICAgICAuaGVhZGVyIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgICAgICAgICAgICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwIDAuNWVtO1xyXG4gICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAubmV3LWdhbWUge1xyXG4gICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogLjJlbTtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xyXG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogLjJlbSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC5uZXctZ2FtZSA6Z2xvYmFsKHN2Zykge1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxZW07XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAuM2VtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgYH1cclxuICAgICAgICA8L3N0eWxlPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgaWYgKCFib2FyZCkgXHJcbiAgICAgIHRoaXMuZ2VuZXJhdGVHYW1lKCk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvZHlcIj5cclxuICAgICAgICA8TmV4dEhlYWQ+XHJcbiAgICAgICAgICA8dGl0bGU+U3Vkb2t1IEV2b2x2ZWQ8L3RpdGxlPlxyXG4gICAgICAgICAgPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cImluaXRpYWwtc2NhbGU9MS4wLCB3aWR0aD1kZXZpY2Utd2lkdGhcIiAvPlxyXG4gICAgICAgICAgPG1ldGEgbmFtZT1cImRlc2NyaXB0aW9uXCIgY29udGVudD17RGVzY3JpcHRpb259IC8+XHJcbiAgICAgICAgICA8bGluayBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVNwZWNpYWwrRWxpdGVcIiByZWw9XCJzdHlsZXNoZWV0XCIgLz5cclxuICAgICAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dXJsXCIgY29udGVudD1cImh0dHBzOi8vc3Vkb2t1LnNpdGlhbmxpdS5jb20vXCIgLz5cclxuICAgICAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dGl0bGVcIiBjb250ZW50PVwiU3Vkb2t1IEV2b2x2ZWRcIiAvPlxyXG4gICAgICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzp0eXBlXCIgY29udGVudD1cIndlYnNpdGVcIiAvPlxyXG4gICAgICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzpkZXNjcmlwdGlvblwiIGNvbnRlbnQ9e0Rlc2NyaXB0aW9ufSAvPlxyXG4gICAgICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzppbWFnZVwiIGNvbnRlbnQ9XCJodHRwczovL3N1ZG9rdS5zaXRpYW5saXUuY29tL3N0YXRpYy9vZy1pbWFnZS5wbmdcIiAvPlxyXG4gICAgICAgIDwvTmV4dEhlYWQ+XHJcbiAgICAgICAge2JvYXJkICYmIHRoaXMucmVuZGVySGVhZGVyKCl9XHJcbiAgICAgICAge2JvYXJkICYmIHRoaXMucmVuZGVyUHV6emxlKCl9XHJcbiAgICAgICAge2JvYXJkICYmIHRoaXMucmVuZGVyQ29udHJvbHMoKX1cclxuICAgICAgICB7IC8qIGxhbmd1YWdlPUNTUyAqLyB9XHJcbiAgICAgICAgPHN0eWxlIGpzeD57YFxyXG4gICAgICAgICAgICA6Z2xvYmFsKGJvZHkpLCAuYm9keSB7XHJcbiAgICAgICAgICAgICAgICBmb250LWZhbWlseTogJ1NwZWNpYWwgRWxpdGUnLCBjdXJzaXZlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC5ib2R5IHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDB2dztcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBAbWVkaWEgKG1pbi13aWR0aDogODAwcHgpIGFuZCAobWluLWhlaWdodDogOTMwcHgpe1xyXG4gICAgICAgICAgICAgICAgOmdsb2JhbCguaGVhZGVyLCAucHV6emxlLCAuY29udHJvbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDEuNWVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4MDBweCkgYW5kIChtaW4td2lkdGg6IDYwMHB4KXtcclxuICAgICAgICAgICAgICAgIDpnbG9iYWwoLmhlYWRlciwgLnB1enpsZSwgLmNvbnRyb2xzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjJlbTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBAbWVkaWEgKG1heC1oZWlnaHQ6IDkzMHB4KSBhbmQgKG1pbi1oZWlnaHQ6IDgwMHB4KSBhbmQgKG1pbi13aWR0aDogNjAwcHgpe1xyXG4gICAgICAgICAgICAgICAgOmdsb2JhbCguaGVhZGVyLCAucHV6emxlLCAuY29udHJvbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDEuMmVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEBtZWRpYSAobWF4LWhlaWdodDogODAwcHgpIGFuZCAobWluLWhlaWdodDogNjAwcHgpIGFuZCAobWluLXdpZHRoOiAzNzBweCl7XHJcbiAgICAgICAgICAgICAgICA6Z2xvYmFsKC5oZWFkZXIsIC5wdXp6bGUsIC5jb250cm9scykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMWVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAzNzBweCl7XHJcbiAgICAgICAgICAgICAgICA6Z2xvYmFsKC5oZWFkZXIsIC5wdXp6bGUsIC5jb250cm9scykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogLjhlbTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBAbWVkaWEgKG1heC1oZWlnaHQ6IDYwMHB4KXtcclxuICAgICAgICAgICAgICAgIDpnbG9iYWwoLmhlYWRlciwgLnB1enpsZSwgLmNvbnRyb2xzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAuOGVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDpnbG9iYWwoYm9keSkge1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC5yb290ZXIge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwO1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAuOGVtO1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBgfVxyXG4gICAgICAgIDwvc3R5bGU+XHJcbiAgICAgICAgPHN0eWxlIGpzeCBnbG9iYWw+e1JhbmdlU3R5bGV9PC9zdHlsZT5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0= */\n/*@ sourceURL=pages\\index.js */'
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var board = this.state.board;

      if (!board) this.generateGame();
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-389099333' + ' ' + 'body',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 723
          }
        },
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          __WEBPACK_IMPORTED_MODULE_4_next_head___default.a,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 724
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
            'title',
            {
              className: 'jsx-389099333',
              __source: {
                fileName: _jsxFileName,
                lineNumber: 725
              }
            },
            'Sudoku Evolved'
          ),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { name: 'viewport', content: 'initial-scale=1.0, width=device-width', className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 726
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { name: 'description', content: Description, className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 727
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('link', { href: 'https://fonts.googleapis.com/css?family=Special+Elite', rel: 'stylesheet', className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 728
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { property: 'og:url', content: 'https://sudoku.sitianliu.com/', className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 729
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { property: 'og:title', content: 'Sudoku Evolved', className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 730
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { property: 'og:type', content: 'website', className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 731
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { property: 'og:description', content: Description, className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 732
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { property: 'og:image', content: 'https://sudoku.sitianliu.com/static/og-image.png', className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 733
            }
          })
        ),
        board && this.renderHeader(),
        board && this.renderPuzzle(),
        board && this.renderControls(),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: '389099333',
          css: 'body,.body.jsx-389099333{font-family:\'Special Elite\',cursive;}.body.jsx-389099333{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;height:100vh;width:100vw;position:relative;}@media (min-width:800px) and (min-height:930px){.header,.puzzle,.controls{font-size:1.5em;}}@media (max-width:800px) and (min-width:600px){.header,.puzzle,.controls{font-size:1.2em;}}@media (max-height:930px) and (min-height:800px) and (min-width:600px){.header,.puzzle,.controls{font-size:1.2em;}}@media (max-height:800px) and (min-height:600px) and (min-width:370px){.header,.puzzle,.controls{font-size:1em;}}@media (max-width:370px){.header,.puzzle,.controls{font-size:.8em;}}@media (max-height:600px){.header,.puzzle,.controls{font-size:.8em;}}body{margin:0;}.rooter.jsx-389099333{position:fixed;bottom:0;font-size:.8em;width:100%;text-align:center;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */'
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: __WEBPACK_IMPORTED_MODULE_7__input_range_style__["a" /* default */].__hash,
          css: __WEBPACK_IMPORTED_MODULE_7__input_range_style__["a" /* default */]
        })
      );
    }
  }, {
    key: '__reactstandin__regenerateByEval',
    value: function __reactstandin__regenerateByEval(key, code) {
      this[key] = eval(code);
    }
  }]);

  return Index;
}(__WEBPACK_IMPORTED_MODULE_1_react__["Component"]);

var _default = Index;
/* harmony default export */ __webpack_exports__["default"] = (_default);
;

(function () {
  var reactHotLoader = __webpack_require__("./node_modules/react-hot-loader/patch.js").default;

  var leaveModule = __webpack_require__("./node_modules/react-hot-loader/patch.js").leaveModule;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(Description, 'Description', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(cellWidth, 'cellWidth', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(LightBlue100, 'LightBlue100', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(LightBlue200, 'LightBlue200', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(LightBlue300, 'LightBlue300', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(Indigo700, 'Indigo700', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(DeepOrange200, 'DeepOrange200', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(DeepOrange600, 'DeepOrange600', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(ControlNumberColor, 'ControlNumberColor', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(CellStyle, 'CellStyle', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(ActionsStyle, 'ActionsStyle', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(ControlStyle, 'ControlStyle', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(NumberControlStyle, 'NumberControlStyle', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(PuzzleStyle, 'PuzzleStyle', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(CirculuarProgressStyle, 'CirculuarProgressStyle', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(CircularPathD, 'CircularPathD', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(getBackGroundColor, 'getBackGroundColor', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(getFontColor, 'getFontColor', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(NumberControl, 'NumberControl', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(Cell, 'Cell', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(getClickHandler, 'getClickHandler', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(makeCountObject, 'makeCountObject', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(makeBoard, 'makeBoard', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(updateBoardWithNumber, 'updateBoardWithNumber', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(getNumberOfGroupsAssignedForNumber, 'getNumberOfGroupsAssignedForNumber', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(Index, 'Index', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(_default, 'default', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  leaveModule(module);
})();

;
    (function (Component, route) {
      if(!Component) return
      if (false) return
      module.hot.accept()
      Component.__route = route

      if (module.hot.status() === 'idle') return

      var components = next.router.components
      for (var r in components) {
        if (!components.hasOwnProperty(r)) continue

        if (components[r].Component.__route === route) {
          next.router.update(r, Component)
        }
      }
    })(typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__.default : (module.exports.default || module.exports), "/")
  
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__("./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ })

})
//# sourceMappingURL=4.9310844ac8cc6c6f2376.hot-update.js.map