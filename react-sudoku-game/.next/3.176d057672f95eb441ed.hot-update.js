webpackHotUpdate(3,{

/***/ "./components/SudokuBoard.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style__ = __webpack_require__("./node_modules/styled-jsx/style.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__("./node_modules/react/cjs/react.development.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_immutable__ = __webpack_require__("./node_modules/immutable/dist/immutable.es.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__("./node_modules/next/node_modules/prop-types/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__input_range_style__ = __webpack_require__("./input-range-style.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__sudoku__ = __webpack_require__("./sudoku.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jsxFileName = 'C:\\Users\\Daniel\\Desktop\\Current Classes\\Senior Design\\Project\\Medium Post src\\react-sudoku-game\\components\\SudokuBoard.js';


(function () {
  var enterModule = __webpack_require__("./node_modules/react-hot-loader/index.js").enterModule;

  enterModule && enterModule(module);
})();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/accessible-emoji */




// eslint-disable-next-line import/no-extraneous-dependencies




var EraseIcon = function EraseIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M22.4 31.7l5.6-5.6 5.6 5.6 2.15-2.15L30.1 24l5.55-5.55-2.15-2.15-5.5 5.6-5.6-5.6-2.15 2.15L25.9 24l-5.65 5.55zM6 24l8.45-11.95q.65-.9 1.55-1.475.9-.575 2-.575h21q1.25 0 2.125.875T42 13v22q0 1.25-.875 2.125T39 38H18q-1.1 0-2-.575-.9-.575-1.55-1.475zm3.75 0l7.7 11H39V13H17.45zM39 24V13v22z'
    })
  );
};

EraseIcon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  height: '48',
  width: '48'
};

var HintIcon = function HintIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M24.2 35.65q.8 0 1.35-.55t.55-1.35q0-.8-.55-1.35t-1.35-.55q-.8 0-1.35.55t-.55 1.35q0 .8.55 1.35t1.35.55zm-1.75-7.3h2.95q0-1.3.325-2.375T27.75 23.5q1.55-1.3 2.2-2.55.65-1.25.65-2.75 0-2.65-1.725-4.25t-4.575-1.6q-2.45 0-4.325 1.225T17.25 16.95l2.65 1q.55-1.4 1.65-2.175 1.1-.775 2.6-.775 1.7 0 2.75.925t1.05 2.375q0 1.1-.65 2.075-.65.975-1.9 2.025-1.5 1.3-2.225 2.575-.725 1.275-.725 3.375zM24 44q-4.1 0-7.75-1.575-3.65-1.575-6.375-4.3-2.725-2.725-4.3-6.375Q4 28.1 4 24q0-4.15 1.575-7.8 1.575-3.65 4.3-6.35 2.725-2.7 6.375-4.275Q19.9 4 24 4q4.15 0 7.8 1.575 3.65 1.575 6.35 4.275 2.7 2.7 4.275 6.35Q44 19.85 44 24q0 4.1-1.575 7.75-1.575 3.65-4.275 6.375t-6.35 4.3Q28.15 44 24 44zm0-3q7.1 0 12.05-4.975Q41 31.05 41 24q0-7.1-4.95-12.05Q31.1 7 24 7q-7.05 0-12.025 4.95Q7 16.9 7 24q0 7.05 4.975 12.025Q16.95 41 24 41zm0-17z'
    })
  );
};

HintIcon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  height: '48',
  width: '48'
};

var NoteIcon = function NoteIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M9 39h2.2l22.15-22.15-2.2-2.2L9 36.8zm30.7-24.3l-6.4-6.4 2.1-2.1q.85-.85 2.1-.85t2.1.85l2.2 2.2q.85.85.85 2.1t-.85 2.1zm-2.1 2.1L12.4 42H6v-6.4l25.2-25.2zm-5.35-1.05l-1.1-1.1 2.2 2.2z'
    })
  );
};

NoteIcon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  height: '48',
  width: '48'
};

var NoteOffIcon = function NoteOffIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M39.8 44.2L25 29.4 12.4 42H6v-6.4L18.6 23 3.8 8.2l2.1-2.1 36 36zm-18-18l-1.1-1.1 1.1 1.1 1.1 1.1zm7.4-1l-2.1-2.1 6.25-6.25-2.2-2.2-6.25 6.25-2.1-2.1 8.4-8.4 6.4 6.4zm10.5-10.5l-6.4-6.4 2.1-2.1q.85-.85 2.125-.825 1.275.025 2.125.875L41.8 8.4q.85.85.875 2.075Q42.7 11.7 41.8 12.6zM26 22zM9 39h2.2l11.7-11.7-2.2-2.2L9 36.8z'
    })
  );
};

NoteOffIcon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  height: '48',
  width: '48'
};

var UndoIcon = function UndoIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M14 38v-3h14.45q3.5 0 6.025-2.325Q37 30.35 37 26.9t-2.525-5.775Q31.95 18.8 28.45 18.8H13.7l5.7 5.7-2.1 2.1L8 17.3 17.3 8l2.1 2.1-5.7 5.7h14.7q4.75 0 8.175 3.2Q40 22.2 40 26.9t-3.425 7.9Q33.15 38 28.4 38z'
    })
  );
};

UndoIcon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  height: '48',
  width: '48'
};




var Description = '';
var cellWidth = 2.5;

var LightBlue100 = '#B3E5FC';
var LightBlue200 = '#81D4FA';
var LightBlue300 = '#4FC3F7';
var Indigo700 = '#303F9F';
var DeepOrange200 = '#FFAB91';
var DeepOrange600 = '#F4511E';
var ControlNumberColor = Indigo700;

// eslint-disable-next-line no-lone-blocks
{/* language=CSS */}
var CellStyle = new String('.cell{height:' + cellWidth + 'em;width:' + cellWidth + 'em;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-size:1.1em;font-weight:bold;-webkit-transition:background-color .3s ease-in-out;transition:background-color .3s ease-in-out;outline:none;box-shadow:none;}.cell:nth-child(3n+3):not(:last-child){border-right:2px solid black;}.cell:not(:last-child){border-right:1px solid black;}.note-number{font-size:.6em;width:33%;height:33%;box-sizing:border-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=components\\SudokuBoard.js */');

// eslint-disable-next-line no-lone-blocks
CellStyle.__hash = '978898158';
CellStyle.__scoped = '.cell.jsx-3884272975{height:' + cellWidth + 'em;width:' + cellWidth + 'em;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-size:1.1em;font-weight:bold;-webkit-transition:background-color .3s ease-in-out;transition:background-color .3s ease-in-out;outline:none;box-shadow:none;}.cell.jsx-3884272975:nth-child(3n+3):not(:last-child){border-right:2px solid black;}.cell.jsx-3884272975:not(:last-child){border-right:1px solid black;}.note-number.jsx-3884272975{font-size:.6em;width:33%;height:33%;box-sizing:border-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=components\\SudokuBoard.js */';
CellStyle.__scopedHash = '3884272975';
{/* language=CSS */}
var ActionsStyle = new String('.actions{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;width:100%;max-width:400px;margin-top:.5em;padding:0 .6em;}.action{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.action svg{width:2.5em;margin-bottom:.2em;}.redo svg{-webkit-transform:scaleX(-1);-ms-transform:scaleX(-1);transform:scaleX(-1);}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=components\\SudokuBoard.js */');

// eslint-disable-next-line no-lone-blocks
ActionsStyle.__hash = '3577854778';
ActionsStyle.__scoped = '.actions.jsx-183028603{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;width:100%;max-width:400px;margin-top:.5em;padding:0 .6em;}.action.jsx-183028603{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.action.jsx-183028603 svg{width:2.5em;margin-bottom:.2em;}.redo.jsx-183028603 svg{-webkit-transform:scaleX(-1);-ms-transform:scaleX(-1);transform:scaleX(-1);}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=components\\SudokuBoard.js */';
ActionsStyle.__scopedHash = '183028603';
{/* language=CSS */}
var ControlStyle = new String('.control{padding:0 2em;cursor:pointer;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-family:"Inter",sans-serif;-webkit-transition:filter .5s ease-in-out;transition:filter .5s ease-in-out;width:100%;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=components\\SudokuBoard.js */');

// eslint-disable-next-line no-lone-blocks
ControlStyle.__hash = '1080650077';
ControlStyle.__scoped = '.control.jsx-4254371036{padding:0 2em;cursor:pointer;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-family:"Inter",sans-serif;-webkit-transition:filter .5s ease-in-out;transition:filter .5s ease-in-out;width:100%;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=components\\SudokuBoard.js */';
ControlStyle.__scopedHash = '4254371036';
{/* language=CSS */}
var NumberControlStyle = new String('.number{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;position:relative;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:2em;margin:.1em;width:1em;height:1em;color:black;border:2px solid black;border-radius:.15em;}.number>div{margin-top:.0em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=components\\SudokuBoard.js */');

// eslint-disable-next-line no-lone-blocks
NumberControlStyle.__hash = '2714819212';
NumberControlStyle.__scoped = '.number.jsx-1380962989{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;position:relative;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:2em;margin:.1em;width:1em;height:1em;color:black;border:2px solid black;border-radius:.15em;}.number.jsx-1380962989>div.jsx-1380962989{margin-top:.0em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=components\\SudokuBoard.js */';
NumberControlStyle.__scopedHash = '1380962989';
{/* language=CSS */}
var PuzzleStyle = new String('.puzzle{margin-top:.5em;width:' + cellWidth * 9 + 'em;cursor:pointer;box-shadow:0 3px 6px rgba(0,0,0,0.16),0 3px 6px rgba(0,0,0,0.23);}.row{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex:0;-ms-flex:0;flex:0;width:' + cellWidth * 9 + 'em;}.row:not(:last-child){border-bottom:1px solid black;}.row:nth-child(3n+3):not(:last-child){border-bottom:2px solid black !important;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=components\\SudokuBoard.js */');

PuzzleStyle.__hash = '3222785624';
PuzzleStyle.__scoped = '.puzzle.jsx-289000025{margin-top:.5em;width:' + cellWidth * 9 + 'em;cursor:pointer;box-shadow:0 3px 6px rgba(0,0,0,0.16),0 3px 6px rgba(0,0,0,0.23);}.row.jsx-289000025{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex:0;-ms-flex:0;flex:0;width:' + cellWidth * 9 + 'em;}.row.jsx-289000025:not(:last-child){border-bottom:1px solid black;}.row.jsx-289000025:nth-child(3n+3):not(:last-child){border-bottom:2px solid black !important;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=components\\SudokuBoard.js */';
PuzzleStyle.__scopedHash = '289000025';
function getBackGroundColor(_ref) {
  var conflict = _ref.conflict,
      isPeer = _ref.isPeer,
      sameValue = _ref.sameValue,
      isSelected = _ref.isSelected;

  if (conflict && isPeer && sameValue) {
    return DeepOrange200;
  } else if (sameValue) {
    return LightBlue300;
  } else if (isSelected) {
    return LightBlue200;
  } else if (isPeer) {
    return LightBlue100;
  }
  return false;
}

function getFontColor(_ref2) {
  var value = _ref2.value,
      conflict = _ref2.conflict,
      prefilled = _ref2.prefilled;

  if (conflict && !prefilled) {
    return DeepOrange600;
  } else if (!prefilled && value) {
    return ControlNumberColor;
  }
  return false;
}

var NumberControl = function NumberControl(_ref3) {
  var number = _ref3.number,
      onClick = _ref3.onClick,
      completionPercentage = _ref3.completionPercentage;
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'div',
    {
      key: number,

      onClick: onClick,
      className: 'jsx-' + NumberControlStyle.__scopedHash + ' ' + 'number',
      __source: {
        fileName: _jsxFileName,
        lineNumber: 173
      }
    },
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
      'div',
      {
        className: 'jsx-' + NumberControlStyle.__scopedHash,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 178
        }
      },
      number
    ),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
      styleId: NumberControlStyle.__scopedHash,
      css: NumberControlStyle.__scoped
    })
  );
};

NumberControl.propTypes = {
  number: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.number.isRequired,
  onClick: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func,
  completionPercentage: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.number.isRequired
};

NumberControl.defaultProps = {
  onClick: null
};

var Cell = function Cell(props) {
  var value = props.value,
      onClick = props.onClick,
      onKeyPress = props.onKeyPress,
      isPeer = props.isPeer,
      isSelected = props.isSelected,
      sameValue = props.sameValue,
      prefilled = props.prefilled,
      notes = props.notes,
      conflict = props.conflict;

  var backgroundColor = getBackGroundColor({
    conflict: conflict, isPeer: isPeer, sameValue: sameValue, isSelected: isSelected
  });
  var fontColor = getFontColor({ conflict: conflict, prefilled: prefilled, value: value });
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'div',
    { onClick: onClick, onKeyDown: onKeyPress, tabIndex: '0', className: 'jsx-' + CellStyle.__scopedHash + ' ' + __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a.dynamic([['60311025', [backgroundColor || 'initial', fontColor || 'initial']]]) + ' ' + 'cell',
      __source: {
        fileName: _jsxFileName,
        lineNumber: 203
      }
    },
    notes ? Object(__WEBPACK_IMPORTED_MODULE_5__sudoku__["d" /* range */])(9).map(function (i) {
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        { key: i, className: 'jsx-' + CellStyle.__scopedHash + ' ' + __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a.dynamic([['60311025', [backgroundColor || 'initial', fontColor || 'initial']]]) + ' ' + 'note-number',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 208
          }
        },
        notes.has(i + 1) && i + 1
      );
    }) : value && value,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
      styleId: CellStyle.__scopedHash,
      css: CellStyle.__scoped
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
      styleId: '60311025',
      css: '.cell.__jsx-style-dynamic-selector{background-color:' + (backgroundColor || 'initial') + ';color:' + (fontColor || 'initial') + ';}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=components\\SudokuBoard.js */',
      dynamic: [backgroundColor || 'initial', fontColor || 'initial']
    })
  );
};

Cell.propTypes = {
  // current number value
  value: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.number,
  // cell click handler
  onClick: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func.isRequired,
  // keyboard input handler
  onKeyPress: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func.isRequired,
  // if the cell is a peer of the selected cell
  isPeer: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // if the cell is selected by the user
  isSelected: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // current cell has the same value if the user selected cell
  sameValue: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // if this was prefilled as a part of the puzzle
  prefilled: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // current notes taken on the cell
  notes: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.instanceOf(__WEBPACK_IMPORTED_MODULE_2_immutable__["b" /* Set */]),
  // if the current cell does not satisfy the game constraint
  conflict: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired
};

Cell.defaultProps = {
  notes: null,
  value: null
};

/**
 * make size 9 array of 0s
 * @returns {Array}
 */
function makeCountObject() {
  var countObj = [];
  for (var i = 0; i < 10; i += 1) {
    countObj.push(0);
  }return countObj;
}

/**
 * given a 2D array of numbers as the initial puzzle, generate the initial game state
 * @param puzzle
 * @returns {any}
 */
function makeBoard(_ref4) {
  var puzzle = _ref4.puzzle;

  // create initial count object to keep track of conflicts per number value
  var rows = Array.from(Array(9).keys()).map(function () {
    return makeCountObject();
  });
  var columns = Array.from(Array(9).keys()).map(function () {
    return makeCountObject();
  });
  var squares = Array.from(Array(9).keys()).map(function () {
    return makeCountObject();
  });
  var result = puzzle.map(function (row, i) {
    return row.map(function (cell, j) {
      if (cell) {
        rows[i][cell] += 1;
        columns[j][cell] += 1;
        squares[Math.floor(i / 3) * 3 + Math.floor(j / 3)][cell] += 1;
      }
      return {
        value: puzzle[i][j] > 0 ? puzzle[i][j] : null,
        prefilled: !!puzzle[i][j]
      };
    });
  });
  return Object(__WEBPACK_IMPORTED_MODULE_2_immutable__["c" /* fromJS */])({ puzzle: result, selected: false, inNoteMode: false, choices: { rows: rows, columns: columns, squares: squares } });
}

/**
 * give the coordinate update the current board with a number choice
 * @param x
 * @param y
 * @param number
 * @param fill whether to set or unset
 * @param board the immutable board given to change
 */
function updateBoardWithNumber(_ref5) {
  var x = _ref5.x,
      y = _ref5.y,
      number = _ref5.number,
      _ref5$fill = _ref5.fill,
      fill = _ref5$fill === undefined ? true : _ref5$fill,
      board = _ref5.board;

  var cell = board.get('puzzle').getIn([x, y]);
  // delete its notes
  cell = cell.delete('notes');
  // set or unset its value depending on `fill`
  cell = fill ? cell.set('value', number) : cell.delete('value');
  var increment = fill ? 1 : -1;
  // update the current group choices
  var rowPath = ['choices', 'rows', x, number];
  var columnPath = ['choices', 'columns', y, number];
  var squarePath = ['choices', 'squares', Math.floor(x / 3) * 3 + Math.floor(y / 3), number];
  return board.setIn(rowPath, board.getIn(rowPath) + increment).setIn(columnPath, board.getIn(columnPath) + increment).setIn(squarePath, board.getIn(squarePath) + increment).setIn(['puzzle', x, y], cell);
}

function getNumberOfGroupsAssignedForNumber(number, groups) {
  return groups.reduce(function (accumulator, row) {
    return accumulator + (row.get(number) > 0 ? 1 : 0);
  }, 0);
}

// eslint-disable-next-line react/no-multi-comp

var SudokuBoard = function (_Component) {
  _inherits(SudokuBoard, _Component);

  function SudokuBoard() {
    var _ref6;

    var _temp, _this, _ret;

    _classCallCheck(this, SudokuBoard);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref6 = SudokuBoard.__proto__ || Object.getPrototypeOf(SudokuBoard)).call.apply(_ref6, [this].concat(args))), _this), _this.state = {}, _this.generateGame = function () {
      var finalCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;

      // get a filled puzzle generated
      var solution = Object(__WEBPACK_IMPORTED_MODULE_5__sudoku__["b" /* makePuzzle */])();
      // pluck values from cells to create the game

      var _pluck = Object(__WEBPACK_IMPORTED_MODULE_5__sudoku__["c" /* pluck */])(solution, finalCount),
          puzzle = _pluck.puzzle;
      // initialize the board with choice counts


      var board = makeBoard({ puzzle: puzzle });
      _this.setState({
        board: board, history: __WEBPACK_IMPORTED_MODULE_2_immutable__["a" /* List */].of(board), historyOffSet: 0, solution: solution
      });
    }, _this.addNumberAsNote = function (number) {
      var board = _this.state.board;

      var selectedCell = _this.getSelectedCell();
      if (!selectedCell) return;
      var prefilled = selectedCell.get('prefilled');
      if (prefilled) return;

      var _board$get = board.get('selected'),
          x = _board$get.x,
          y = _board$get.y;

      var currentValue = selectedCell.get('value');
      if (currentValue) {
        board = updateBoardWithNumber({
          x: x, y: y, number: currentValue, fill: false, board: _this.state.board
        });
      }
      var notes = selectedCell.get('notes') || Object(__WEBPACK_IMPORTED_MODULE_2_immutable__["b" /* Set */])();
      if (notes.has(number)) {
        notes = notes.delete(number);
      } else {
        notes = notes.add(number);
      }
      selectedCell = selectedCell.set('notes', notes);
      selectedCell = selectedCell.delete('value');
      board = board.setIn(['puzzle', x, y], selectedCell);
      _this.updateBoard(board);
    }, _this.updateBoard = function (newBoard) {
      var history = _this.state.history;
      var historyOffSet = _this.state.historyOffSet;
      // anything before current step is still in history

      history = history.slice(0, historyOffSet + 1);
      // add itself onto the history
      history = history.push(newBoard);
      // update the game
      _this.setState({ board: newBoard, history: history, historyOffSet: history.size - 1 });
    }, _this.canUndo = function () {
      return _this.state.historyOffSet > 0;
    }, _this.redo = function () {
      var history = _this.state.history;
      var historyOffSet = _this.state.historyOffSet;

      if (history.size) {
        historyOffSet = Math.min(history.size - 1, historyOffSet + 1);
        var board = history.get(historyOffSet);
        _this.setState({ board: board, historyOffSet: historyOffSet });
      }
    }, _this.undo = function () {
      var history = _this.state.history;
      var _this$state = _this.state,
          historyOffSet = _this$state.historyOffSet,
          board = _this$state.board;

      if (history.size) {
        historyOffSet = Math.max(0, historyOffSet - 1);
        board = history.get(historyOffSet);
        _this.setState({ board: board, historyOffSet: historyOffSet, history: history });
      }
    }, _this.toggleNoteMode = function () {
      var board = _this.state.board;

      var currNoteMode = board.get('inNoteMode');
      board = board.set('inNoteMode', !currNoteMode);
      _this.setState({ board: board });
    }, _this.eraseSelected = function () {
      var selectedCell = _this.getSelectedCell();
      if (!selectedCell) return;
      _this.fillNumber(false);
    }, _this.fillSelectedWithSolution = function () {
      var _this$state2 = _this.state,
          board = _this$state2.board,
          solution = _this$state2.solution;

      var selectedCell = _this.getSelectedCell();
      if (!selectedCell) return;

      var _board$get2 = board.get('selected'),
          x = _board$get2.x,
          y = _board$get2.y;

      _this.fillNumber(solution[x][y]);
    }, _this.fillNumber = function (number) {
      var board = _this.state.board;

      var selectedCell = _this.getSelectedCell();
      // no-op if nothing is selected
      if (!selectedCell) return;
      var prefilled = selectedCell.get('prefilled');
      // no-op if it is refilled
      if (prefilled) return;

      var _board$get3 = board.get('selected'),
          x = _board$get3.x,
          y = _board$get3.y;

      var currentValue = selectedCell.get('value');
      // remove the current value and update the game state
      if (currentValue) {
        board = updateBoardWithNumber({
          x: x, y: y, number: currentValue, fill: false, board: _this.state.board
        });
      }
      // update to new number if any
      var setNumber = currentValue !== number && number;
      if (setNumber) {
        board = updateBoardWithNumber({
          x: x, y: y, number: number, fill: true, board: board
        });
      }
      _this.updateBoard(board);
    }, _this.selectCell = function (x, y) {
      var board = _this.state.board;

      board = board.set('selected', { x: x, y: y });
      _this.setState({ board: board });
    }, _this.handleKeyDown = function (event) {
      var board = _this.state.board;

      var inNoteMode = board.get('inNoteMode');
      var numberInput = Number(event.key);

      if (inNoteMode) _this.addNumberAsNote(numberInput);else _this.fillNumber(numberInput);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SudokuBoard, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // eslint-disable-next-line no-undef
      if ('serviceWorker' in navigator) {
        // eslint-disable-next-line no-undef
        navigator.serviceWorker.register('/service-worker.js').then(function (reg) {
          console.log('ServiceWorker scope: ', reg.scope);
          console.log('service worker registration successful');
        }).catch(function (err) {
          console.warn('service worker registration failed', err.message);
        });
      }
    }
  }, {
    key: 'getSelectedCell',
    value: function getSelectedCell() {
      var board = this.state.board;

      var selected = board.get('selected');
      return selected && board.get('puzzle').getIn([selected.x, selected.y]);
    }

    // get the min between its completion in rows, columns and squares.

  }, {
    key: 'getNumberValueCount',
    value: function getNumberValueCount(number) {
      var rows = this.state.board.getIn(['choices', 'rows']);
      var columns = this.state.board.getIn(['choices', 'columns']);
      var squares = this.state.board.getIn(['choices', 'squares']);
      return Math.min(getNumberOfGroupsAssignedForNumber(number, squares), Math.min(getNumberOfGroupsAssignedForNumber(number, rows), getNumberOfGroupsAssignedForNumber(number, columns)));
    }

    // fill currently selected cell with number

  }, {
    key: 'isConflict',
    value: function isConflict(i, j) {
      var _state$board$getIn$to = this.state.board.getIn(['puzzle', i, j]).toJSON(),
          value = _state$board$getIn$to.value;

      if (!value) return false;
      var rowConflict = this.state.board.getIn(['choices', 'rows', i, value]) > 1;
      var columnConflict = this.state.board.getIn(['choices', 'columns', j, value]) > 1;
      var squareConflict = this.state.board.getIn(['choices', 'squares', Math.floor(i / 3) * 3 + Math.floor(j / 3), value]) > 1;
      return rowConflict || columnConflict || squareConflict;
    }
  }, {
    key: 'renderCell',
    value: function renderCell(cell, x, y) {
      var _this2 = this;

      var board = this.state.board;

      var selected = this.getSelectedCell();

      var _cell$toJSON = cell.toJSON(),
          value = _cell$toJSON.value,
          prefilled = _cell$toJSON.prefilled,
          notes = _cell$toJSON.notes;

      var conflict = this.isConflict(x, y);
      var peer = Object(__WEBPACK_IMPORTED_MODULE_5__sudoku__["a" /* isPeer */])({ x: x, y: y }, board.get('selected'));
      var sameValue = !!(selected && selected.get('value') && value === selected.get('value'));

      var isSelected = cell === selected;
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(Cell, {
        prefilled: prefilled,
        notes: notes,
        sameValue: sameValue,
        isSelected: isSelected,
        isPeer: peer,
        value: value,
        onClick: function onClick() {
          _this2.selectCell(x, y);
        },
        onKeyPress: function onKeyPress(event) {
          return _this2.handleKeyDown(event);
        },
        key: y,
        x: x,
        y: y,
        conflict: conflict,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 519
        }
      });
    }
  }, {
    key: 'renderNumberControl',
    value: function renderNumberControl() {
      var _this3 = this;

      var board = this.state.board;

      var selectedCell = this.getSelectedCell();
      var prefilled = selectedCell && selectedCell.get('prefilled');
      var inNoteMode = board.get('inNoteMode');

      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-' + ControlStyle.__scopedHash + ' ' + 'control',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 542
          }
        },
        Object(__WEBPACK_IMPORTED_MODULE_5__sudoku__["d" /* range */])(9).map(function (i) {
          var number = i + 1;
          var onClick = !prefilled ? function () {
            inNoteMode ? _this3.addNumberAsNote(number) : _this3.fillNumber(number);
          } : undefined;

          return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(NumberControl, {
            key: number,
            number: number,
            onClick: onClick,
            completionPercentage: _this3.getNumberValueCount(number) / 9,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 554
            }
          });
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: ControlStyle.__scopedHash,
          css: ControlStyle.__scoped
        })
      );
    }
  }, {
    key: 'renderActions',
    value: function renderActions() {
      var _state = this.state,
          board = _state.board,
          history = _state.history;

      var selectedCell = this.getSelectedCell();
      var prefilled = selectedCell && selectedCell.get('prefilled');
      var inNoteMode = board.get('inNoteMode');
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-' + ActionsStyle.__scopedHash + ' ' + 'actions',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 573
          }
        },
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          { onClick: history.size ? this.undo : null, className: 'jsx-' + ActionsStyle.__scopedHash + ' ' + 'action',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 574
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(UndoIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 575
            }
          })
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          { onClick: this.toggleNoteMode, className: 'jsx-' + ActionsStyle.__scopedHash + ' ' + 'action note',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 577
            }
          },
          inNoteMode ? __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(NoteIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 578
            }
          }) : __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(NoteOffIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 578
            }
          })
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          { onClick: !prefilled ? this.eraseSelected : null, className: 'jsx-' + ActionsStyle.__scopedHash + ' ' + 'action',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 580
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(EraseIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 581
            }
          })
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          {
            onClick: !prefilled ? this.fillSelectedWithSolution : null,
            className: 'jsx-' + ActionsStyle.__scopedHash + ' ' + 'action',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 583
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(HintIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 588
            }
          })
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: ActionsStyle.__scopedHash,
          css: ActionsStyle.__scoped
        })
      );
    }
  }, {
    key: 'renderPuzzle',
    value: function renderPuzzle() {
      var _this4 = this;

      var board = this.state.board;

      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-' + PuzzleStyle.__scopedHash + ' ' + 'puzzle',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 598
          }
        },
        board.get('puzzle').map(function (row, i) {
          return (
            // eslint-disable-next-line react/no-array-index-key
            __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
              'div',
              { key: i, className: 'jsx-' + PuzzleStyle.__scopedHash + ' ' + 'row',
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 601
                }
              },
              row.map(function (cell, j) {
                return _this4.renderCell(cell, i, j);
              }).toArray()
            )
          );
        }).toArray(),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: PuzzleStyle.__scopedHash,
          css: PuzzleStyle.__scoped
        })
      );
    }
  }, {
    key: 'renderControls',
    value: function renderControls() {
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-3053133025' + ' ' + 'controls',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 614
          }
        },
        this.renderNumberControl(),
        this.renderActions(),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: '3053133025',
          css: '.controls.jsx-3053133025{margin-top:.25em;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:.5em 0;width:100%;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=components\\SudokuBoard.js */'
        })
      );
    }
  }, {
    key: 'renderHeader',
    value: function renderHeader() {
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-2229275753' + ' ' + 'header',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 636
          }
        },
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: '2229275753',
          css: '.header.jsx-2229275753{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;max-width:500px;padding:0 0.5em;box-sizing:border-box;}.new-game.jsx-2229275753{cursor:pointer;margin-top:.2em;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:.2em 0;}.new-game.jsx-2229275753 svg{height:1em;margin-bottom:.3em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=components\\SudokuBoard.js */'
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var board = this.state.board;

      if (!board) this.generateGame();
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-1536992459' + ' ' + 'body',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 670
          }
        },
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'title',
          {
            className: 'jsx-1536992459',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 671
            }
          },
          'Sudoku Evolved'
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { name: 'viewport', content: 'initial-scale=1.0, width=device-width', className: 'jsx-1536992459',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 672
          }
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { name: 'description', content: Description, className: 'jsx-1536992459',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 673
          }
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('link', { href: 'https://fonts.googleapis.com/css?family=Special+Elite', rel: 'stylesheet', className: 'jsx-1536992459',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 674
          }
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { property: 'og:url', content: 'https://sudoku.sitianliu.com/', className: 'jsx-1536992459',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 675
          }
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { property: 'og:title', content: 'Sudoku Evolved', className: 'jsx-1536992459',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 676
          }
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { property: 'og:type', content: 'website', className: 'jsx-1536992459',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 677
          }
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { property: 'og:description', content: Description, className: 'jsx-1536992459',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 678
          }
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { property: 'og:image', content: 'https://sudoku.sitianliu.com/static/og-image.png', className: 'jsx-1536992459',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 679
          }
        }),
        board && this.renderHeader(),
        board && this.renderPuzzle(),
        board && this.renderControls(),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: '1536992459',
          css: 'body,.body.jsx-1536992459{font-family:"Inter",sans-serif;}.body.jsx-1536992459{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;height:100vh;width:100vw;position:relative;}@media (min-width:800px) and (min-height:930px){.header,.puzzle,.controls{font-size:1.5em;}}body{margin:0;}.rooter.jsx-1536992459{position:fixed;bottom:0;font-size:.8em;width:100%;text-align:center;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=components\\SudokuBoard.js */'
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: __WEBPACK_IMPORTED_MODULE_4__input_range_style__["a" /* default */].__hash,
          css: __WEBPACK_IMPORTED_MODULE_4__input_range_style__["a" /* default */]
        })
      );
    }
  }, {
    key: '__reactstandin__regenerateByEval',
    value: function __reactstandin__regenerateByEval(key, code) {
      this[key] = eval(code);
    }
  }]);

  return SudokuBoard;
}(__WEBPACK_IMPORTED_MODULE_1_react__["Component"]);

var _default = SudokuBoard;
/* harmony default export */ __webpack_exports__["a"] = (_default);
;

(function () {
  var reactHotLoader = __webpack_require__("./node_modules/react-hot-loader/index.js").default;

  var leaveModule = __webpack_require__("./node_modules/react-hot-loader/index.js").leaveModule;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(Description, 'Description', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(cellWidth, 'cellWidth', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(LightBlue100, 'LightBlue100', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(LightBlue200, 'LightBlue200', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(LightBlue300, 'LightBlue300', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(Indigo700, 'Indigo700', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(DeepOrange200, 'DeepOrange200', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(DeepOrange600, 'DeepOrange600', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(ControlNumberColor, 'ControlNumberColor', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(CellStyle, 'CellStyle', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(ActionsStyle, 'ActionsStyle', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(ControlStyle, 'ControlStyle', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(NumberControlStyle, 'NumberControlStyle', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(PuzzleStyle, 'PuzzleStyle', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(getBackGroundColor, 'getBackGroundColor', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(getFontColor, 'getFontColor', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(NumberControl, 'NumberControl', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(Cell, 'Cell', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(makeCountObject, 'makeCountObject', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(makeBoard, 'makeBoard', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(updateBoardWithNumber, 'updateBoardWithNumber', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(getNumberOfGroupsAssignedForNumber, 'getNumberOfGroupsAssignedForNumber', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(SudokuBoard, 'SudokuBoard', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  reactHotLoader.register(_default, 'default', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/components/SudokuBoard.js');
  leaveModule(module);
})();

;
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__("./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./pages/index.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__("./node_modules/react/cjs/react.development.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_SudokuBoard__ = __webpack_require__("./components/SudokuBoard.js");
var _jsxFileName = 'C:\\Users\\Daniel\\Desktop\\Current Classes\\Senior Design\\Project\\Medium Post src\\react-sudoku-game\\pages\\index.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

(function () {
  var enterModule = __webpack_require__("./node_modules/react-hot-loader/index.js").enterModule;

  enterModule && enterModule(module);
})();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/accessible-emoji */



// eslint-disable-next-line react/no-multi-comp

var Index = function (_Component) {
  _inherits(Index, _Component);

  function Index() {
    _classCallCheck(this, Index);

    return _possibleConstructorReturn(this, (Index.__proto__ || Object.getPrototypeOf(Index)).apply(this, arguments));
  }

  _createClass(Index, [{
    key: 'render',
    value: function render() {
      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__components_SudokuBoard__["a" /* default */], {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 10
        }
      });
    }
  }, {
    key: '__reactstandin__regenerateByEval',
    value: function __reactstandin__regenerateByEval(key, code) {
      this[key] = eval(code);
    }
  }]);

  return Index;
}(__WEBPACK_IMPORTED_MODULE_0_react__["Component"]);

var _default = Index;
/* harmony default export */ __webpack_exports__["default"] = (_default);
;

(function () {
  var reactHotLoader = __webpack_require__("./node_modules/react-hot-loader/index.js").default;

  var leaveModule = __webpack_require__("./node_modules/react-hot-loader/index.js").leaveModule;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(Index, 'Index', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  reactHotLoader.register(_default, 'default', 'C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages/index.js');
  leaveModule(module);
})();

;
    (function (Component, route) {
      if(!Component) return
      if (false) return
      module.hot.accept()
      Component.__route = route

      if (module.hot.status() === 'idle') return

      var components = next.router.components
      for (var r in components) {
        if (!components.hasOwnProperty(r)) continue

        if (components[r].Component.__route === route) {
          next.router.update(r, Component)
        }
      }
    })(typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__.default : (module.exports.default || module.exports), "/")
  
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__("./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ })

})
//# sourceMappingURL=3.176d057672f95eb441ed.hot-update.js.map