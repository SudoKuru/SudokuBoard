{"version":3,"sources":["C:/Users/Daniel/Desktop/Current Classes/Senior Design/Project/Medium Post src/react-sudoku-game/pages\\index.js"],"names":["LoupeIcon","RemoveIcon","ReloadIcon","ReturnIcon","PencilIcon","Description","cellWidth","LightBlue100","LightBlue200","LightBlue300","Indigo700","DeepOrange200","DeepOrange600","ControlNumberColor","CellStyle","ActionsStyle","ControlStyle","NumberControlStyle","PuzzleStyle","CirculuarProgressStyle","CircularPathD","getBackGroundColor","conflict","isPeer","sameValue","isSelected","getFontColor","value","prefilled","NumberControl","number","onClick","completionPercentage","propTypes","PropTypes","isRequired","func","defaultProps","Cell","props","onKeyPress","notes","backgroundColor","fontColor","range","map","i","has","bool","instanceOf","getClickHandler","onDoubleClick","delay","timeoutID","event","setTimeout","clearTimeout","makeCountObject","countObj","push","makeBoard","puzzle","rows","Array","from","keys","columns","squares","result","row","cell","j","Math","floor","fromJS","selected","inNoteMode","choices","updateBoardWithNumber","x","y","fill","board","get","getIn","delete","set","increment","rowPath","columnPath","squarePath","setIn","getNumberOfGroupsAssignedForNumber","groups","reduce","accumulator","Index","state","generateGame","finalCount","solution","makePuzzle","pluck","setState","history","List","of","historyOffSet","addNumberAsNote","selectedCell","getSelectedCell","currentValue","Set","add","updateBoard","newBoard","slice","size","canUndo","redo","min","undo","max","toggleNoteMode","currNoteMode","eraseSelected","fillNumber","fillSelectedWithSolution","setNumber","selectCell","console","log","handleKeyDown","numberInput","Number","key","navigator","serviceWorker","register","then","reg","scope","catch","err","warn","message","toJSON","rowConflict","columnConflict","squareConflict","isConflict","peer","areCoordinatePeers","clickHandle","undefined","getNumberValueCount","renderCell","toArray","renderNumberControl","renderActions","renderHeader","renderPuzzle","renderControls"],"mappings":"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","file":"4.9310844ac8cc6c6f2376.hot-update.js","sourcesContent":["/* eslint-disable jsx-a11y/accessible-emoji */\r\nimport React, { Component } from 'react';\r\nimport { Set, List, fromJS } from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport NextHead from 'next/head';\r\nimport Color from 'color';\r\nimport InputRange from 'react-input-range';\r\n\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport css from 'styled-jsx/css';\r\n\r\nimport RangeStyle from '../input-range-style';\r\nimport LoupeIcon from '../svg/loupe.svg';\r\nimport RemoveIcon from '../svg/remove.svg';\r\nimport ReloadIcon from '../svg/reload.svg';\r\nimport ReturnIcon from '../svg/return.svg';\r\nimport PencilIcon from '../svg/pencil.svg';\r\n\r\nimport { makePuzzle, pluck, isPeer as areCoordinatePeers, range } from '../sudoku';\r\nimport { backGroundBlue } from '../colors';\r\nimport Tip from '../components/tool-tip';\r\n\r\n\r\nconst Description = 'Discover the next evolution of Sudoku with amazing graphics, animations, and user-friendly features. Enjoy a Sudoku experience like you never have before with customizable game generation, cell highlighting, intuitive controls and more!';\r\nconst cellWidth = 2.5;\r\n\r\nconst LightBlue100 = '#B3E5FC';\r\nconst LightBlue200 = '#81D4FA';\r\nconst LightBlue300 = '#4FC3F7';\r\nconst Indigo700 = '#303F9F';\r\nconst DeepOrange200 = '#FFAB91';\r\nconst DeepOrange600 = '#F4511E';\r\nconst ControlNumberColor = Indigo700;\r\n\r\n// eslint-disable-next-line no-lone-blocks\r\n{ /* language=CSS */ }\r\nconst CellStyle = css`\r\n.cell {\r\n    height: ${cellWidth}em;\r\n    width: ${cellWidth}em;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 1.1em;\r\n    font-weight: bold;\r\n    transition: background-color .3s ease-in-out;\r\n}\r\n.cell:nth-child(3n+3):not(:last-child) {\r\n    border-right: 2px solid black;\r\n}\r\n.cell:not(:last-child) {\r\n    border-right: 1px solid black;\r\n}\r\n.note-number {\r\n    font-size: .6em;\r\n    width: 33%;\r\n    height: 33%;\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n`;\r\n\r\n// eslint-disable-next-line no-lone-blocks\r\n{ /* language=CSS */ }\r\nconst ActionsStyle = css`\r\n.actions {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    max-width: 400px;\r\n    margin-top: .5em;\r\n    padding: 0 .6em;\r\n}\r\n.action {\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n}\r\n.action :global(svg) {\r\n    width: 2.5em;\r\n    margin-bottom: .2em;\r\n}\r\n.redo :global(svg) {\r\n    transform: scaleX(-1);\r\n}\r\n`;\r\n\r\n// eslint-disable-next-line no-lone-blocks\r\n{ /* language=CSS */ }\r\nconst ControlStyle = css`\r\n.control {\r\n    padding: 0 2em;\r\n    cursor: pointer;\r\n    display: inline-flex;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    font-family: 'Special Elite', cursive;\r\n    transition: filter .5s ease-in-out;\r\n    width: 100%;\r\n}\r\n`;\r\n\r\n// eslint-disable-next-line no-lone-blocks\r\n{ /* language=CSS */ }\r\nconst NumberControlStyle = css`\r\n.number {\r\n    display: flex;\r\n    position: relative;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: 2em;\r\n    margin: .1em;\r\n    width: 1.5em;\r\n    height: 1.5em;\r\n    color: ${ControlNumberColor};\r\n    box-shadow: 0 1px 2px rgba(0,0,0,0.16), 0 1px 2px rgba(0,0,0,0.23);\r\n    border-radius: 100%;\r\n}\r\n.number > div {\r\n    margin-top: .3em;\r\n}\r\n`;\r\n\r\n// eslint-disable-next-line no-lone-blocks\r\n{ /* language=CSS */ }\r\nconst PuzzleStyle = css`\r\n.puzzle {\r\n    margin-top: .5em;\r\n    width: ${cellWidth * 9}em;\r\n    cursor: pointer;\r\n    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\r\n}\r\n.row {\r\n    display: flex;\r\n    align-items: center;\r\n    flex: 0;\r\n    width: ${cellWidth * 9}em;\r\n}\r\n.row:not(:last-child) {\r\n    border-bottom: 1px solid black;\r\n}\r\n.row:nth-child(3n+3):not(:last-child) {\r\n    border-bottom: 2px solid black !important;\r\n}\r\n`;\r\n\r\n// eslint-disable-next-line no-lone-blocks\r\n{ /* language=CSS */ }\r\nconst CirculuarProgressStyle = css`\r\n.circular-progress {\r\n    display: block;\r\n    width: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    transition: filter .4s ease-in-out;\r\n}\r\n\r\n.circle-bg {\r\n    fill: none;\r\n    stroke: #eee;\r\n    stroke-width: 3.8;\r\n}\r\n\r\n.circle {\r\n    stroke: ${ControlNumberColor};\r\n    transition: stroke-dasharray .4s ease-in-out;\r\n    fill: none;\r\n    stroke-width: 2.8;\r\n    stroke-linecap: round;\r\n}\r\n`;\r\n\r\nconst CircularPathD = 'M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831';\r\n\r\nfunction getBackGroundColor({\r\n  conflict, isPeer, sameValue, isSelected,\r\n}) {\r\n  if (conflict && isPeer && sameValue) {\r\n    return DeepOrange200;\r\n  } else if (sameValue) {\r\n    return LightBlue300;\r\n  } else if (isSelected) {\r\n    return LightBlue200;\r\n  } else if (isPeer) {\r\n    return LightBlue100;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction getFontColor({ value, conflict, prefilled }) {\r\n  if (conflict && !prefilled) {\r\n    return DeepOrange600;\r\n  } else if (!prefilled && value) {\r\n    return ControlNumberColor;\r\n  }\r\n  return false;\r\n}\r\n\r\nconst NumberControl = ({ number, onClick, completionPercentage }) => (\r\n  <div\r\n    key={number}\r\n    className=\"number\"\r\n    onClick={onClick}\r\n  >\r\n    <div>{number}</div>\r\n    {/* <CirclularProgress percent={completionPercentage} /> */}\r\n    <style jsx>{NumberControlStyle}</style>\r\n  </div>\r\n);\r\n\r\nNumberControl.propTypes = {\r\n  number: PropTypes.number.isRequired,\r\n  onClick: PropTypes.func,\r\n  completionPercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nNumberControl.defaultProps = {\r\n  onClick: null,\r\n};\r\n\r\nconst Cell = (props) => {\r\n  const {\r\n    value, onClick, onKeyPress, isPeer, isSelected, sameValue, prefilled, notes, conflict,\r\n  } = props;\r\n  const backgroundColor = getBackGroundColor({\r\n    conflict, isPeer, sameValue, isSelected,\r\n  });\r\n  const fontColor = getFontColor({ conflict, prefilled, value });\r\n  return (\r\n    <div className=\"cell\" onClick={onClick} onKeyDown={onKeyPress} tabIndex=\"0\">\r\n      {\r\n        notes ?\r\n          range(9).map(i =>\r\n            (\r\n              <div key={i} className=\"note-number\">\r\n                {notes.has(i + 1) && (i + 1)}\r\n              </div>\r\n            )) :\r\n          value && value\r\n      }\r\n      {/* language=CSS */}\r\n      <style jsx>{CellStyle}</style>\r\n      <style jsx>{`\r\n                .cell {\r\n                    background-color: ${backgroundColor || 'initial'};\r\n                    color: ${fontColor || 'initial'};\r\n                }\r\n            `}\r\n      </style>\r\n    </div>\r\n  );\r\n};\r\n\r\nCell.propTypes = {\r\n  // current number value\r\n  value: PropTypes.number,\r\n  // cell click handler\r\n  onClick: PropTypes.func.isRequired,\r\n  // keyboard input handler\r\n  onKeyPress: PropTypes.func.isRequired,\r\n  // if the cell is a peer of the selected cell\r\n  isPeer: PropTypes.bool.isRequired,\r\n  // if the cell is selected by the user\r\n  isSelected: PropTypes.bool.isRequired,\r\n  // current cell has the same value if the user selected cell\r\n  sameValue: PropTypes.bool.isRequired,\r\n  // if this was prefilled as a part of the puzzle\r\n  prefilled: PropTypes.bool.isRequired,\r\n  // current notes taken on the cell\r\n  notes: PropTypes.instanceOf(Set),\r\n  // if the current cell does not satisfy the game constraint\r\n  conflict: PropTypes.bool.isRequired,\r\n};\r\n\r\nCell.defaultProps = {\r\n  notes: null,\r\n  value: null,\r\n};\r\n\r\nfunction getClickHandler(onClick, onDoubleClick, delay = 250) {\r\n  let timeoutID = null;\r\n  return (event) => {\r\n    if (!timeoutID) {\r\n      timeoutID = setTimeout(() => {\r\n        onClick(event);\r\n        timeoutID = null;\r\n      }, delay);\r\n    } else {\r\n      timeoutID = clearTimeout(timeoutID);\r\n      onDoubleClick(event);\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * make size 9 array of 0s\r\n * @returns {Array}\r\n */\r\nfunction makeCountObject() {\r\n  const countObj = [];\r\n  for (let i = 0; i < 10; i += 1) countObj.push(0);\r\n  return countObj;\r\n}\r\n\r\n/**\r\n * given a 2D array of numbers as the initial puzzle, generate the initial game state\r\n * @param puzzle\r\n * @returns {any}\r\n */\r\nfunction makeBoard({ puzzle }) {\r\n  // create initial count object to keep track of conflicts per number value\r\n  const rows = Array.from(Array(9).keys()).map(() => makeCountObject());\r\n  const columns = Array.from(Array(9).keys()).map(() => makeCountObject());\r\n  const squares = Array.from(Array(9).keys()).map(() => makeCountObject());\r\n  const result = puzzle.map((row, i) => (\r\n    row.map((cell, j) => {\r\n      if (cell) {\r\n        rows[i][cell] += 1;\r\n        columns[j][cell] += 1;\r\n        squares[((Math.floor(i / 3)) * 3) + Math.floor(j / 3)][cell] += 1;\r\n      }\r\n      return {\r\n        value: puzzle[i][j] > 0 ? puzzle[i][j] : null,\r\n        prefilled: !!puzzle[i][j],\r\n      };\r\n    })\r\n  ));\r\n  return fromJS({ puzzle: result, selected: false, inNoteMode: false, choices: { rows, columns, squares } });\r\n}\r\n\r\n/**\r\n * give the coordinate update the current board with a number choice\r\n * @param x\r\n * @param y\r\n * @param number\r\n * @param fill whether to set or unset\r\n * @param board the immutable board given to change\r\n */\r\nfunction updateBoardWithNumber({\r\n  x, y, number, fill = true, board,\r\n}) {\r\n  let cell = board.get('puzzle').getIn([x, y]);\r\n  // delete its notes\r\n  cell = cell.delete('notes');\r\n  // set or unset its value depending on `fill`\r\n  cell = fill ? cell.set('value', number) : cell.delete('value');\r\n  const increment = fill ? 1 : -1;\r\n  // update the current group choices\r\n  const rowPath = ['choices', 'rows', x, number];\r\n  const columnPath = ['choices', 'columns', y, number];\r\n  const squarePath = ['choices', 'squares',\r\n    ((Math.floor(x / 3)) * 3) + Math.floor(y / 3), number];\r\n  return board.setIn(rowPath, board.getIn(rowPath) + increment)\r\n    .setIn(columnPath, board.getIn(columnPath) + increment)\r\n    .setIn(squarePath, board.getIn(squarePath) + increment)\r\n    .setIn(['puzzle', x, y], cell);\r\n}\r\n\r\nfunction getNumberOfGroupsAssignedForNumber(number, groups) {\r\n  return groups.reduce((accumulator, row) =>\r\n    accumulator + (row.get(number) > 0 ? 1 : 0), 0);\r\n}\r\n\r\n// eslint-disable-next-line react/no-multi-comp\r\nexport default class Index extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    // eslint-disable-next-line no-undef\r\n    if ('serviceWorker' in navigator) {\r\n      // eslint-disable-next-line no-undef\r\n      navigator.serviceWorker\r\n        .register('/service-worker.js')\r\n        .then((reg) => {\r\n          console.log('ServiceWorker scope: ', reg.scope);\r\n          console.log('service worker registration successful');\r\n        })\r\n        .catch((err) => {\r\n          console.warn('service worker registration failed', err.message);\r\n        });\r\n    }\r\n  }\r\n\r\n  getSelectedCell() {\r\n    const { board } = this.state;\r\n    const selected = board.get('selected');\r\n    return selected && board.get('puzzle').getIn([selected.x, selected.y]);\r\n  }\r\n\r\n  // get the min between its completion in rows, columns and squares.\r\n  getNumberValueCount(number) {\r\n    const rows = this.state.board.getIn(['choices', 'rows']);\r\n    const columns = this.state.board.getIn(['choices', 'columns']);\r\n    const squares = this.state.board.getIn(['choices', 'squares']);\r\n    return Math.min(\r\n      getNumberOfGroupsAssignedForNumber(number, squares),\r\n      Math.min(\r\n        getNumberOfGroupsAssignedForNumber(number, rows),\r\n        getNumberOfGroupsAssignedForNumber(number, columns),\r\n      ),\r\n    );\r\n  }\r\n\r\n  generateGame = (finalCount = 20) => {\r\n    // get a filled puzzle generated\r\n    const solution = makePuzzle();\r\n    // pluck values from cells to create the game\r\n    const { puzzle } = pluck(solution, finalCount);\r\n    // initialize the board with choice counts\r\n    const board = makeBoard({ puzzle });\r\n    this.setState({\r\n      board, history: List.of(board), historyOffSet: 0, solution,\r\n    });\r\n  }\r\n\r\n  addNumberAsNote = (number) => {\r\n    let { board } = this.state;\r\n    let selectedCell = this.getSelectedCell();\r\n    if (!selectedCell) return;\r\n    const prefilled = selectedCell.get('prefilled');\r\n    if (prefilled) return;\r\n    const { x, y } = board.get('selected');\r\n    const currentValue = selectedCell.get('value');\r\n    if (currentValue) {\r\n      board = updateBoardWithNumber({\r\n        x, y, number: currentValue, fill: false, board: this.state.board,\r\n      });\r\n    }\r\n    let notes = selectedCell.get('notes') || Set();\r\n    if (notes.has(number)) {\r\n      notes = notes.delete(number);\r\n    } else {\r\n      notes = notes.add(number);\r\n    }\r\n    selectedCell = selectedCell.set('notes', notes);\r\n    selectedCell = selectedCell.delete('value');\r\n    board = board.setIn(['puzzle', x, y], selectedCell);\r\n    this.updateBoard(board);\r\n  };\r\n\r\n  updateBoard = (newBoard) => {\r\n    let { history } = this.state;\r\n    const { historyOffSet } = this.state;\r\n    // anything before current step is still in history\r\n    history = history.slice(0, historyOffSet + 1);\r\n    // add itself onto the history\r\n    history = history.push(newBoard);\r\n    // update the game\r\n    this.setState({ board: newBoard, history, historyOffSet: history.size - 1 });\r\n  };\r\n\r\n  canUndo = () => this.state.historyOffSet > 0\r\n\r\n  redo = () => {\r\n    const { history } = this.state;\r\n    let { historyOffSet } = this.state;\r\n    if (history.size) {\r\n      historyOffSet = Math.min(history.size - 1, historyOffSet + 1);\r\n      const board = history.get(historyOffSet);\r\n      this.setState({ board, historyOffSet });\r\n    }\r\n  };\r\n\r\n  undo = () => {\r\n    const { history } = this.state;\r\n    let { historyOffSet, board } = this.state;\r\n    if (history.size) {\r\n      historyOffSet = Math.max(0, historyOffSet - 1);\r\n      board = history.get(historyOffSet);\r\n      this.setState({ board, historyOffSet, history });\r\n    }\r\n  };\r\n\r\n  toggleNoteMode = () => {\r\n    let { board } = this.state;\r\n    let currNoteMode = board.get('inNoteMode');\r\n    board = board.set('inNoteMode', !currNoteMode);\r\n    this.setState({ board });\r\n  }\r\n\r\n  eraseSelected = () => {\r\n    const selectedCell = this.getSelectedCell();\r\n    if (!selectedCell) return;\r\n    this.fillNumber(false);\r\n  }\r\n\r\n  fillSelectedWithSolution = () => {\r\n    const { board, solution } = this.state;\r\n    const selectedCell = this.getSelectedCell();\r\n    if (!selectedCell) return;\r\n    const { x, y } = board.get('selected');\r\n    this.fillNumber(solution[x][y]);\r\n  }\r\n\r\n\r\n  // fill currently selected cell with number\r\n  fillNumber = (number) => {\r\n    let { board } = this.state;\r\n    const selectedCell = this.getSelectedCell();\r\n    // no-op if nothing is selected\r\n    if (!selectedCell) return;\r\n    const prefilled = selectedCell.get('prefilled');\r\n    // no-op if it is refilled\r\n    if (prefilled) return;\r\n    const { x, y } = board.get('selected');\r\n    const currentValue = selectedCell.get('value');\r\n    // remove the current value and update the game state\r\n    if (currentValue) {\r\n      board = updateBoardWithNumber({\r\n        x, y, number: currentValue, fill: false, board: this.state.board,\r\n      });\r\n    }\r\n    // update to new number if any\r\n    const setNumber = currentValue !== number && number;\r\n    if (setNumber) {\r\n      board = updateBoardWithNumber({\r\n        x, y, number, fill: true, board,\r\n      });\r\n    }\r\n    this.updateBoard(board);\r\n  };\r\n\r\n  selectCell = (x, y) => {\r\n\r\n    console.log(\"Cell Selected\");\r\n\r\n    let { board } = this.state;\r\n    board = board.set('selected', { x, y });\r\n    this.setState({ board });\r\n  };\r\n\r\n  isConflict(i, j) {\r\n    const { value } = this.state.board.getIn(['puzzle', i, j]).toJSON();\r\n    if (!value) return false;\r\n    const rowConflict =\r\n      this.state.board.getIn(['choices', 'rows', i, value]) > 1;\r\n    const columnConflict =\r\n      this.state.board.getIn(['choices', 'columns', j, value]) > 1;\r\n    const squareConflict =\r\n      this.state.board.getIn(['choices', 'squares',\r\n        ((Math.floor(i / 3)) * 3) + Math.floor(j / 3), value]) > 1;\r\n    return rowConflict || columnConflict || squareConflict;\r\n  }\r\n\r\n  handleKeyDown = (event) => {\r\n    let { board } = this.state;\r\n    let inNoteMode = board.get('inNoteMode');\r\n    let numberInput = Number(event.key);\r\n    \r\n    if (inNoteMode) this.addNumberAsNote(numberInput);\r\n    else this.fillNumber(numberInput);\r\n    \r\n  };\r\n\r\n  renderCell(cell, x, y) {\r\n    const { board } = this.state;\r\n    const selected = this.getSelectedCell();\r\n    const { value, prefilled, notes } = cell.toJSON();\r\n    const conflict = this.isConflict(x, y);\r\n    const peer = areCoordinatePeers({ x, y }, board.get('selected'));\r\n    const sameValue = !!(selected && selected.get('value')\r\n      && value === selected.get('value'));\r\n\r\n    const isSelected = cell === selected;\r\n    return (<Cell\r\n      prefilled={prefilled}\r\n      notes={notes}\r\n      sameValue={sameValue}\r\n      isSelected={isSelected}\r\n      isPeer={peer}\r\n      value={value}\r\n      onClick={() => { this.selectCell(x, y); }}\r\n      // A good spot to handle keypresses?\r\n      onKeyPress={(event) => this.handleKeyDown(event)}\r\n      key={y}\r\n      x={x}\r\n      y={y}\r\n      conflict={conflict}\r\n    />);\r\n  }\r\n  \r\n\r\n  renderNumberControl() {\r\n    const selectedCell = this.getSelectedCell();\r\n    const prefilled = selectedCell && selectedCell.get('prefilled');\r\n    return (\r\n      <div className=\"control\">\r\n        {range(9).map((i) => {\r\n          const number = i + 1;\r\n          // handles binding single click and double click callbacks\r\n          const clickHandle = getClickHandler(\r\n            () => { this.fillNumber(number); },\r\n            () => { this.addNumberAsNote(number); },\r\n          );\r\n          return (\r\n            <NumberControl\r\n              key={number}\r\n              number={number}\r\n              onClick={!prefilled ? clickHandle : undefined}\r\n              completionPercentage={this.getNumberValueCount(number) / 9}\r\n            />);\r\n        })}\r\n        <style jsx>{ControlStyle}</style>\r\n      </div>\r\n    );\r\n  }\r\n  /*<div className=\"action redo\" onClick={history.size ? this.redo : null}>\r\n          <ReloadIcon />Redo\r\n        </div> */\r\n  renderActions() {\r\n    const { board, history } = this.state;\r\n    const selectedCell = this.getSelectedCell();\r\n    const prefilled = selectedCell && selectedCell.get('prefilled');\r\n    const inNoteMode = board.get('inNoteMode');\r\n    return (\r\n      <div className=\"actions\">\r\n        <div className=\"action\" onClick={history.size ? this.undo : null}>\r\n          <ReloadIcon />Undo\r\n        </div>\r\n        <div className=\"action note\" onClick={this.toggleNoteMode}>\r\n          <ReloadIcon /> {inNoteMode ? \"On\" : \"Off\"}\r\n        </div>\r\n        <div className=\"action\" onClick={!prefilled ? this.eraseSelected : null}>\r\n          <RemoveIcon />Erase\r\n        </div>\r\n        <div\r\n          className=\"action\"\r\n          onClick={!prefilled ?\r\n          this.fillSelectedWithSolution : null}\r\n        >\r\n          <LoupeIcon />Hint\r\n        </div>\r\n        <style jsx>{ActionsStyle}</style>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderPuzzle() {\r\n    const { board } = this.state;\r\n    return (\r\n      <div className=\"puzzle\">\r\n        {board.get('puzzle').map((row, i) => (\r\n          // eslint-disable-next-line react/no-array-index-key\r\n          <div key={i} className=\"row\">\r\n            {\r\n              row.map((cell, j) => this.renderCell(cell, i, j)).toArray()\r\n            }\r\n          </div>\r\n        )).toArray()}\r\n        <style jsx>{PuzzleStyle}</style>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderControls() {\r\n    return (\r\n      <div className=\"controls\">\r\n        {this.renderNumberControl()}\r\n        {this.renderActions()}\r\n        { /* language=CSS */ }\r\n        <style jsx>{`\r\n            .controls {\r\n                margin-top: .3em;\r\n                display: flex;\r\n                flex-wrap: wrap;\r\n                justify-content: center;\r\n                width: 100%;\r\n                padding: .5em 0;\r\n            }\r\n        `}\r\n        </style>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderHeader() {\r\n    return (\r\n      <div className=\"header\">\r\n        <div className=\"new-game\" onClick={() => this.setState({ board: false })}>\r\n          <ReturnIcon />\r\n          <div>New Game</div>\r\n        </div>\r\n        <Tip />\r\n        { /* language=CSS */ }\r\n        <style jsx>{`\r\n            .header {\r\n                display: flex;\r\n                width: 100%;\r\n                justify-content: space-between;\r\n                max-width: 500px;\r\n                padding: 0 0.5em;\r\n                box-sizing: border-box;\r\n            }\r\n            .new-game {\r\n                cursor: pointer;\r\n                margin-top: .2em;\r\n                display: inline-flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n                padding: .2em 0;\r\n            }\r\n            .new-game :global(svg) {\r\n                height: 1em;\r\n                margin-bottom: .3em;\r\n            }\r\n        `}\r\n        </style>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { board } = this.state;\r\n    if (!board) \r\n      this.generateGame();\r\n    return (\r\n      <div className=\"body\">\r\n        <NextHead>\r\n          <title>Sudoku Evolved</title>\r\n          <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\r\n          <meta name=\"description\" content={Description} />\r\n          <link href=\"https://fonts.googleapis.com/css?family=Special+Elite\" rel=\"stylesheet\" />\r\n          <meta property=\"og:url\" content=\"https://sudoku.sitianliu.com/\" />\r\n          <meta property=\"og:title\" content=\"Sudoku Evolved\" />\r\n          <meta property=\"og:type\" content=\"website\" />\r\n          <meta property=\"og:description\" content={Description} />\r\n          <meta property=\"og:image\" content=\"https://sudoku.sitianliu.com/static/og-image.png\" />\r\n        </NextHead>\r\n        {board && this.renderHeader()}\r\n        {board && this.renderPuzzle()}\r\n        {board && this.renderControls()}\r\n        { /* language=CSS */ }\r\n        <style jsx>{`\r\n            :global(body), .body {\r\n                font-family: 'Special Elite', cursive;\r\n            }\r\n            .body {\r\n                display: flex;\r\n                flex-direction: column;\r\n                align-items: center;\r\n                justify-content: center;\r\n                height: 100vh;\r\n                width: 100vw;\r\n                position: relative;\r\n            }\r\n            @media (min-width: 800px) and (min-height: 930px){\r\n                :global(.header, .puzzle, .controls) {\r\n                    font-size: 1.5em;\r\n                }\r\n            }\r\n            @media (max-width: 800px) and (min-width: 600px){\r\n                :global(.header, .puzzle, .controls) {\r\n                    font-size: 1.2em;\r\n                }\r\n            }\r\n            @media (max-height: 930px) and (min-height: 800px) and (min-width: 600px){\r\n                :global(.header, .puzzle, .controls) {\r\n                    font-size: 1.2em;\r\n                }\r\n            }\r\n            @media (max-height: 800px) and (min-height: 600px) and (min-width: 370px){\r\n                :global(.header, .puzzle, .controls) {\r\n                    font-size: 1em;\r\n                }\r\n            }\r\n            @media (max-width: 370px){\r\n                :global(.header, .puzzle, .controls) {\r\n                    font-size: .8em;\r\n                }\r\n            }\r\n            @media (max-height: 600px){\r\n                :global(.header, .puzzle, .controls) {\r\n                    font-size: .8em;\r\n                }\r\n            }\r\n            :global(body) {\r\n                margin: 0;\r\n            }\r\n            .rooter {\r\n                position: fixed;\r\n                bottom: 0;\r\n                font-size: .8em;\r\n                width: 100%;\r\n                text-align: center;\r\n            }\r\n        `}\r\n        </style>\r\n        <style jsx global>{RangeStyle}</style>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./pages/index.js"],"sourceRoot":""}