module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./colors.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export backGroundOrange */
/* unused harmony export backGroundGrey */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return backGroundBlue; });
/* unused harmony export backGroundGreen */
var backGroundOrange = '#F4511E';
var backGroundGrey = '#546E7A';
var backGroundBlue = '#1B6B9B';
var backGroundGreen = '#7CDC1B';

/***/ }),

/***/ "./components/tool-tip.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style__ = __webpack_require__("styled-jsx/style");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__("react");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react_popover__ = __webpack_require__("react-popover");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react_popover___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react_popover__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jsxFileName = 'C:\\Users\\Daniel\\Desktop\\Current Classes\\Senior Design\\Project\\Medium Post src\\react-sudoku-game\\components\\tool-tip.js';


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var HelpIcon = function HelpIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M231.2 336.033c-9.35 0-17 7.65-17 17v11.333c0 9.35 7.65 17 17 17s17-7.65 17-17v-11.333c0-9.35-7.65-17-17-17z'
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M236.867 473.733c130.617 0 236.867-106.25 236.867-236.867S367.483 0 236.867 0 0 106.25 0 236.867s106.25 236.866 236.867 236.866zm0-439.733c111.917 0 202.867 90.95 202.867 202.867s-90.95 202.867-202.867 202.867S34 348.783 34 236.867 124.95 34 236.867 34z'
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M163.2 194.367c.283 0 .283 0 0 0 9.35 0 17-7.083 17-16.433 0 0 .283-13.6 7.083-26.917 8.5-17 23.517-25.5 45.617-25.5 20.683 0 35.983 5.667 44.483 16.717 7.083 9.067 9.067 21.533 5.667 35.133-4.25 16.717-18.7 31.167-32.583 45.333-17 17.567-34.85 35.417-34.85 59.5 0 9.35 7.65 17 17 17s17-7.65 17-17c0-10.2 12.183-22.667 25.217-35.7 16.15-16.433 34.567-35.133 41.083-60.633 6.233-23.517 1.983-47.033-11.617-64.317-10.483-13.6-31.45-30.033-71.117-30.033-44.483 0-65.733 23.8-75.933 44.2-10.2 20.4-10.767 39.95-10.767 42.217 0 9.066 7.367 16.433 16.717 16.433z'
    })
  );
};

HelpIcon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  viewBox: '0 0 473.733 473.733'
};


var TipCopy = __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
  'div',
  {
    className: 'jsx-289995913' + ' ' + 'tip-copy',
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6
    }
  },
  __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'div',
    {
      className: 'jsx-289995913' + ' ' + 'tip-line',
      __source: {
        fileName: _jsxFileName,
        lineNumber: 7
      }
    },
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
      'b',
      {
        className: 'jsx-289995913',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 7
        }
      },
      'Select:'
    ),
    ' Click a cell'
  ),
  __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'div',
    {
      className: 'jsx-289995913' + ' ' + 'tip-line',
      __source: {
        fileName: _jsxFileName,
        lineNumber: 8
      }
    },
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
      'b',
      {
        className: 'jsx-289995913',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 8
        }
      },
      'Assign Number:'
    ),
    ' Single click on desired number control'
  ),
  __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'div',
    {
      className: 'jsx-289995913',
      __source: {
        fileName: _jsxFileName,
        lineNumber: 9
      }
    },
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
      'b',
      {
        className: 'jsx-289995913',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 9
        }
      },
      'Tag Number as Note:'
    ),
    ' Double click on the desired number control'
  ),
  __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
    styleId: '289995913',
    css: '.tip-copy.jsx-289995913{font-size:1.2em;}.tip-line.jsx-289995913{margin-bottom:.4em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHNcXHRvb2wtdGlwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVnQixBQUc2QixBQUdHLGdCQUZ2QixHQUdBIiwiZmlsZSI6ImNvbXBvbmVudHNcXHRvb2wtdGlwLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL0RhbmllbC9EZXNrdG9wL0N1cnJlbnQgQ2xhc3Nlcy9TZW5pb3IgRGVzaWduL1Byb2plY3QvTWVkaXVtIFBvc3Qgc3JjL3JlYWN0LXN1ZG9rdS1nYW1lIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFBvcG92ZXIgZnJvbSAncmVhY3QtcG9wb3Zlcic7XHJcbmltcG9ydCBIZWxwSWNvbiBmcm9tICcuLi9zdmcvaGVscC5zdmcnO1xyXG5cclxuY29uc3QgVGlwQ29weSA9IChcclxuICA8ZGl2IGNsYXNzTmFtZT1cInRpcC1jb3B5XCI+XHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInRpcC1saW5lXCI+PGI+U2VsZWN0OjwvYj4gQ2xpY2sgYSBjZWxsPC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInRpcC1saW5lXCI+PGI+QXNzaWduIE51bWJlcjo8L2I+IFNpbmdsZSBjbGljayBvbiBkZXNpcmVkIG51bWJlciBjb250cm9sPC9kaXY+XHJcbiAgICA8ZGl2PjxiPlRhZyBOdW1iZXIgYXMgTm90ZTo8L2I+IERvdWJsZSBjbGljayBvbiB0aGUgZGVzaXJlZCBudW1iZXIgY29udHJvbDwvZGl2PlxyXG4gICAgeyAvKiBsYW5ndWFnZT1DU1MgKi8gfVxyXG4gICAgPHN0eWxlIGpzeD57YFxyXG4gICAgICAgIC50aXAtY29weSB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4yZW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC50aXAtbGluZSB7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC40ZW07XHJcbiAgICAgICAgfVxyXG4gICAgYH1cclxuICAgIDwvc3R5bGU+XHJcbiAgPC9kaXY+XHJcbilcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaXAgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgc3RhdGUgPSB7fVxyXG4gICAgdG9nZ2xlT3BlbiA9IChldmVudCkgPT4ge1xyXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIGdob3N0IGNsaWNrLlxyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgb3BlbjogIXRoaXMuc3RhdGUub3BlbiB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSA9ICgpID0+IHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IGZhbHNlIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW4gPSAoKSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiB0cnVlIH0pO1xyXG4gICAgfVxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxQb3BvdmVyXHJcbiAgICAgICAgICBpc09wZW49e3RoaXMuc3RhdGUub3Blbn1cclxuICAgICAgICAgIHByZWZlclBsYWNlPVwiYmVsb3dcIlxyXG4gICAgICAgICAgYm9keT17VGlwQ29weX1cclxuICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnOTB2dycsIG1heFdpZHRoOiAnNDBlbScgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMudG9nZ2xlT3Blbn1cclxuICAgICAgICAgICAgb25Nb3VzZUVudGVyPXt0aGlzLm9wZW59XHJcbiAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17dGhpcy5jbG9zZX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPEhlbHBJY29uIGNsYXNzTmFtZT1cImljb25cIiAvPlxyXG4gICAgICAgICAgICB7IC8qIGxhbmd1YWdlPUNTUyAqLyB9XHJcbiAgICAgICAgICAgIDxzdHlsZSBqc3g+e2BcclxuICAgICAgICAgICAgICAgIDpnbG9iYWwoLmljb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEuMjVlbTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgIDwvc3R5bGU+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L1BvcG92ZXI+XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIl19 */\n/*@ sourceURL=components\\tool-tip.js */'
  })
);

var Tip = function (_Component) {
  _inherits(Tip, _Component);

  function Tip() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Tip);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Tip.__proto__ || Object.getPrototypeOf(Tip)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.toggleOpen = function (event) {
      // This prevents ghost click.
      event.preventDefault();
      _this.setState({ open: !_this.state.open });
    }, _this.close = function () {
      _this.setState({ open: false });
    }, _this.open = function () {
      _this.setState({ open: true });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Tip, [{
    key: 'render',
    value: function render() {
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        __WEBPACK_IMPORTED_MODULE_2_react_popover___default.a,
        {
          isOpen: this.state.open,
          preferPlace: 'below',
          body: TipCopy,
          style: { width: '90vw', maxWidth: '40em' },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 41
          }
        },
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          {
            onClick: this.toggleOpen,
            onMouseEnter: this.open,
            onMouseLeave: this.close,
            className: 'jsx-2314980512',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 47
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(HelpIcon, { className: 'icon', __source: {
              fileName: _jsxFileName,
              lineNumber: 52
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
            styleId: '2314980512',
            css: '.icon{height:1.25em;cursor:pointer;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHNcXHRvb2wtdGlwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFEd0IsQUFHbUMsY0FDQyxlQUNuQiIsImZpbGUiOiJjb21wb25lbnRzXFx0b29sLXRpcC5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9EYW5pZWwvRGVza3RvcC9DdXJyZW50IENsYXNzZXMvU2VuaW9yIERlc2lnbi9Qcm9qZWN0L01lZGl1bSBQb3N0IHNyYy9yZWFjdC1zdWRva3UtZ2FtZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQb3BvdmVyIGZyb20gJ3JlYWN0LXBvcG92ZXInO1xyXG5pbXBvcnQgSGVscEljb24gZnJvbSAnLi4vc3ZnL2hlbHAuc3ZnJztcclxuXHJcbmNvbnN0IFRpcENvcHkgPSAoXHJcbiAgPGRpdiBjbGFzc05hbWU9XCJ0aXAtY29weVwiPlxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ0aXAtbGluZVwiPjxiPlNlbGVjdDo8L2I+IENsaWNrIGEgY2VsbDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ0aXAtbGluZVwiPjxiPkFzc2lnbiBOdW1iZXI6PC9iPiBTaW5nbGUgY2xpY2sgb24gZGVzaXJlZCBudW1iZXIgY29udHJvbDwvZGl2PlxyXG4gICAgPGRpdj48Yj5UYWcgTnVtYmVyIGFzIE5vdGU6PC9iPiBEb3VibGUgY2xpY2sgb24gdGhlIGRlc2lyZWQgbnVtYmVyIGNvbnRyb2w8L2Rpdj5cclxuICAgIHsgLyogbGFuZ3VhZ2U9Q1NTICovIH1cclxuICAgIDxzdHlsZSBqc3g+e2BcclxuICAgICAgICAudGlwLWNvcHkge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuMmVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICAudGlwLWxpbmUge1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAuNGVtO1xyXG4gICAgICAgIH1cclxuICAgIGB9XHJcbiAgICA8L3N0eWxlPlxyXG4gIDwvZGl2PlxyXG4pXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGlwIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHN0YXRlID0ge31cclxuICAgIHRvZ2dsZU9wZW4gPSAoZXZlbnQpID0+IHtcclxuICAgICAgLy8gVGhpcyBwcmV2ZW50cyBnaG9zdCBjbGljay5cclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46ICF0aGlzLnN0YXRlLm9wZW4gfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UgPSAoKSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiBmYWxzZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuID0gKCkgPT4ge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgb3BlbjogdHJ1ZSB9KTtcclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8UG9wb3ZlclxyXG4gICAgICAgICAgaXNPcGVuPXt0aGlzLnN0YXRlLm9wZW59XHJcbiAgICAgICAgICBwcmVmZXJQbGFjZT1cImJlbG93XCJcclxuICAgICAgICAgIGJvZHk9e1RpcENvcHl9XHJcbiAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzkwdncnLCBtYXhXaWR0aDogJzQwZW0nIH19XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZU9wZW59XHJcbiAgICAgICAgICAgIG9uTW91c2VFbnRlcj17dGhpcy5vcGVufVxyXG4gICAgICAgICAgICBvbk1vdXNlTGVhdmU9e3RoaXMuY2xvc2V9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxIZWxwSWNvbiBjbGFzc05hbWU9XCJpY29uXCIgLz5cclxuICAgICAgICAgICAgeyAvKiBsYW5ndWFnZT1DU1MgKi8gfVxyXG4gICAgICAgICAgICA8c3R5bGUganN4PntgXHJcbiAgICAgICAgICAgICAgICA6Z2xvYmFsKC5pY29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxLjI1ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA8L3N0eWxlPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9Qb3BvdmVyPlxyXG4gICAgICApO1xyXG4gICAgfVxyXG59XHJcbiJdfQ== */\n/*@ sourceURL=components\\tool-tip.js */'
          })
        )
      );
    }
  }]);

  return Tip;
}(__WEBPACK_IMPORTED_MODULE_1_react__["Component"]);

/* harmony default export */ __webpack_exports__["a"] = (Tip);

/***/ }),

/***/ "./input-range-style.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__colors__ = __webpack_require__("./colors.js");



// eslint-disable-next-line no-lone-blocks
// eslint-disable-next-line import/no-extraneous-dependencies
{/* language=CSS */}
var Style = new String(".input-range__slider{-webkit-appearance:none;-moz-appearance:none;appearance:none;background:#3f51b5;border:1px solid #3f51b5;border-radius:100%;cursor:pointer;display:block;height:1rem;margin-left:-0.5rem;margin-top:-0.65rem;outline:none;position:absolute;top:50%;-webkit-transition:-webkit-transform 0.3s ease-out,box-shadow 0.3s ease-out;-webkit-transition:transform 0.3s ease-out,box-shadow 0.3s ease-out;transition:transform 0.3s ease-out,box-shadow 0.3s ease-out;width:1rem;}.input-range__slider:active{-webkit-transform:scale(1.3);-ms-transform:scale(1.3);transform:scale(1.3);}.input-range__slider:focus{box-shadow:0 0 0 5px rgba(63,81,181,0.2);}.input-range--disabled .input-range__slider{background:#cccccc;border:1px solid #cccccc;box-shadow:none;-webkit-transform:none;-ms-transform:none;transform:none;}.input-range__slider-container{-webkit-transition:left 0.3s ease-out;transition:left 0.3s ease-out;}.input-range__label{color:#aaaaaa;font-size:0.8rem;-webkit-transform:translateZ(0);-ms-transform:translateZ(0);transform:translateZ(0);white-space:nowrap;}.input-range__label--min,.input-range__label--max{bottom:-1.4rem;position:absolute;}.input-range__label--min{left:0;}.input-range__label--max{right:0;}.input-range__label--value{position:absolute;top:-1.8rem;}.input-range__label-container{left:-50%;position:relative;}.input-range__label--max .input-range__label-container{left:50%;}.input-range__track{background:#eeeeee;border-radius:0.3rem;cursor:pointer;display:block;height:0.3rem;position:relative;-webkit-transition:left 0.3s ease-out,width 0.3s ease-out;transition:left 0.3s ease-out,width 0.3s ease-out;}.input-range--disabled .input-range__track{background:#eeeeee;}.input-range__track--background{left:0;margin-top:-0.15rem;position:absolute;right:0;top:50%;}.input-range__track--active{background:#3f51b5;}.input-range{height:1rem;position:relative;margin-top:1.2em;margin-bottom:1.4em;}.Popover{z-index:2000;}.Popover-body{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;padding:.5rem 1rem;background:white;border-radius:0.3rem;opacity:.95;box-shadow:rgba(0,0,0,0.12) 0 1px 6px,rgba(0,0,0,0.12) 0 1px 4px;font-size:14px;}.Popover-tipShape{fill:" + __WEBPACK_IMPORTED_MODULE_0__colors__["a" /* backGroundBlue */] + ";}.Popover-white .Popover-tipShape{fill:#00bcd4;}.Popover-white .Popover-body{background:white;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0LXJhbmdlLXN0eWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1pQixBQUdtQixBQWVPLEFBRXVCLEFBRXpCLEFBTVMsQUFHaEIsQUFPQyxBQUlSLEFBR0MsQUFHVSxBQUlSLEFBR0MsQUFHUSxBQVFFLEFBR2QsQUFPWSxBQUdQLEFBT0csQUFHTyxBQVdjLEFBSXJCLEFBSUksT0FsRVgsQUE0QlksQ0F6QlgsQ0FVRyxDQUZNLEVBMkJBLENBT3BCLEFBa0JBLENBekVtQixDQU9DLEVBc0VwQixDQTVEYyxDQTFCZSxBQW9DTixBQU9DLEFBVUYsUUFMRixDQWxCQyxFQUpOLEFBZ0NJLENBaERPLEVBTUwsQ0E4RHJCLE1BekNpQixDQXhDZ0MsR0FJN0IsQ0FnRFYsRUFVWSxNQVRaLEVBWk0sS0FwQ0csQ0FyQkUsQUFxRVYsTUFVWCxDQXZEaUMsQ0FrQ2pCLE1BNUNVLEtBYkMsR0EwRFAsa0JBQ2lDLENBMEIzQixHQXBGTCxVQTRCQSxFQVRELE9BbEJILFVBMkJLLEtBMUJOLGNBQ0YsWUFDUSxlQWlGQyxLQWhGRCxjQWlGRCxNQWhGTixJQW9EdUMsT0E2QjdCLEVBaEZMLGtCQUNWLENBZ0ZNLE9BL0UrQyxLQWdGYSxpRUFDekQsZUFDbkIsdUhBakZhLFdBQUMiLCJmaWxlIjoiaW5wdXQtcmFuZ2Utc3R5bGUuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvRGFuaWVsL0Rlc2t0b3AvQ3VycmVudCBDbGFzc2VzL1NlbmlvciBEZXNpZ24vUHJvamVjdC9NZWRpdW0gUG9zdCBzcmMvcmVhY3Qtc3Vkb2t1LWdhbWUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzXHJcbmltcG9ydCBjc3MgZnJvbSAnc3R5bGVkLWpzeC9jc3MnO1xyXG5pbXBvcnQge2JhY2tHcm91bmRCbHVlfSBmcm9tIFwiLi9jb2xvcnNcIjtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xyXG57IC8qIGxhbmd1YWdlPUNTUyAqLyB9XHJcbmNvbnN0IFN0eWxlID0gY3NzYFxyXG4uaW5wdXQtcmFuZ2VfX3NsaWRlciB7XHJcbiAgYXBwZWFyYW5jZTogbm9uZTtcclxuICBiYWNrZ3JvdW5kOiAjM2Y1MWI1O1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkICMzZjUxYjU7XHJcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgaGVpZ2h0OiAxcmVtO1xyXG4gIG1hcmdpbi1sZWZ0OiAtMC41cmVtO1xyXG4gIG1hcmdpbi10b3A6IC0wLjY1cmVtO1xyXG4gIG91dGxpbmU6IG5vbmU7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogNTAlO1xyXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGVhc2Utb3V0LCBib3gtc2hhZG93IDAuM3MgZWFzZS1vdXQ7XHJcbiAgd2lkdGg6IDFyZW07IH1cclxuICAuaW5wdXQtcmFuZ2VfX3NsaWRlcjphY3RpdmUge1xyXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjMpOyB9XHJcbiAgLmlucHV0LXJhbmdlX19zbGlkZXI6Zm9jdXMge1xyXG4gICAgYm94LXNoYWRvdzogMCAwIDAgNXB4IHJnYmEoNjMsIDgxLCAxODEsIDAuMik7IH1cclxuICAuaW5wdXQtcmFuZ2UtLWRpc2FibGVkIC5pbnB1dC1yYW5nZV9fc2xpZGVyIHtcclxuICAgIGJhY2tncm91bmQ6ICNjY2NjY2M7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjY2NjO1xyXG4gICAgYm94LXNoYWRvdzogbm9uZTtcclxuICAgIHRyYW5zZm9ybTogbm9uZTsgfVxyXG5cclxuLmlucHV0LXJhbmdlX19zbGlkZXItY29udGFpbmVyIHtcclxuICB0cmFuc2l0aW9uOiBsZWZ0IDAuM3MgZWFzZS1vdXQ7IH1cclxuXHJcbi5pbnB1dC1yYW5nZV9fbGFiZWwge1xyXG4gIGNvbG9yOiAjYWFhYWFhO1xyXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xyXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcclxuICB3aGl0ZS1zcGFjZTogbm93cmFwOyB9XHJcblxyXG4uaW5wdXQtcmFuZ2VfX2xhYmVsLS1taW4sXHJcbi5pbnB1dC1yYW5nZV9fbGFiZWwtLW1heCB7XHJcbiAgYm90dG9tOiAtMS40cmVtO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTsgfVxyXG5cclxuLmlucHV0LXJhbmdlX19sYWJlbC0tbWluIHtcclxuICBsZWZ0OiAwOyB9XHJcblxyXG4uaW5wdXQtcmFuZ2VfX2xhYmVsLS1tYXgge1xyXG4gIHJpZ2h0OiAwOyB9XHJcblxyXG4uaW5wdXQtcmFuZ2VfX2xhYmVsLS12YWx1ZSB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogLTEuOHJlbTsgfVxyXG5cclxuLmlucHV0LXJhbmdlX19sYWJlbC1jb250YWluZXIge1xyXG4gIGxlZnQ6IC01MCU7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XHJcbiAgLmlucHV0LXJhbmdlX19sYWJlbC0tbWF4IC5pbnB1dC1yYW5nZV9fbGFiZWwtY29udGFpbmVyIHtcclxuICAgIGxlZnQ6IDUwJTsgfVxyXG5cclxuLmlucHV0LXJhbmdlX190cmFjayB7XHJcbiAgYmFja2dyb3VuZDogI2VlZWVlZTtcclxuICBib3JkZXItcmFkaXVzOiAwLjNyZW07XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIGhlaWdodDogMC4zcmVtO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICB0cmFuc2l0aW9uOiBsZWZ0IDAuM3MgZWFzZS1vdXQsIHdpZHRoIDAuM3MgZWFzZS1vdXQ7IH1cclxuICAuaW5wdXQtcmFuZ2UtLWRpc2FibGVkIC5pbnB1dC1yYW5nZV9fdHJhY2sge1xyXG4gICAgYmFja2dyb3VuZDogI2VlZWVlZTsgfVxyXG5cclxuLmlucHV0LXJhbmdlX190cmFjay0tYmFja2dyb3VuZCB7XHJcbiAgbGVmdDogMDtcclxuICBtYXJnaW4tdG9wOiAtMC4xNXJlbTtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgdG9wOiA1MCU7IH1cclxuXHJcbi5pbnB1dC1yYW5nZV9fdHJhY2stLWFjdGl2ZSB7XHJcbiAgYmFja2dyb3VuZDogIzNmNTFiNTsgfVxyXG5cclxuLmlucHV0LXJhbmdlIHtcclxuICBoZWlnaHQ6IDFyZW07XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIG1hcmdpbi10b3A6IDEuMmVtO1xyXG4gIG1hcmdpbi1ib3R0b206IDEuNGVtO1xyXG59XHJcbiAgXHJcbi5Qb3BvdmVyIHtcclxuICAgIHotaW5kZXg6IDIwMDA7XHJcbn1cclxuLlBvcG92ZXItYm9keSB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBwYWRkaW5nOiAuNXJlbSAxcmVtO1xyXG4gICAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgICBib3JkZXItcmFkaXVzOiAwLjNyZW07XHJcbiAgICBvcGFjaXR5OiAuOTU7XHJcbiAgICBib3gtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuMTIpIDAgMXB4IDZweCwgcmdiYSgwLCAwLCAwLCAwLjEyKSAwIDFweCA0cHg7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbn1cclxuXHJcbi5Qb3BvdmVyLXRpcFNoYXBlIHtcclxuICAgIGZpbGw6ICR7YmFja0dyb3VuZEJsdWV9O1xyXG59XHJcblxyXG4uUG9wb3Zlci13aGl0ZSAuUG9wb3Zlci10aXBTaGFwZSB7XHJcbiAgICBmaWxsOiAjMDBiY2Q0O1xyXG59XHJcblxyXG4uUG9wb3Zlci13aGl0ZSAuUG9wb3Zlci1ib2R5IHtcclxuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xyXG59XHJcbiAgYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFN0eWxlO1xyXG4iXX0= */\n/*@ sourceURL=input-range-style.js */");

Style.__hash = "981618613";
Style.__scoped = ".input-range__slider.jsx-1649775604{-webkit-appearance:none;-moz-appearance:none;appearance:none;background:#3f51b5;border:1px solid #3f51b5;border-radius:100%;cursor:pointer;display:block;height:1rem;margin-left:-0.5rem;margin-top:-0.65rem;outline:none;position:absolute;top:50%;-webkit-transition:-webkit-transform 0.3s ease-out,box-shadow 0.3s ease-out;-webkit-transition:transform 0.3s ease-out,box-shadow 0.3s ease-out;transition:transform 0.3s ease-out,box-shadow 0.3s ease-out;width:1rem;}.input-range__slider.jsx-1649775604:active{-webkit-transform:scale(1.3);-ms-transform:scale(1.3);transform:scale(1.3);}.input-range__slider.jsx-1649775604:focus{box-shadow:0 0 0 5px rgba(63,81,181,0.2);}.input-range--disabled.jsx-1649775604 .input-range__slider.jsx-1649775604{background:#cccccc;border:1px solid #cccccc;box-shadow:none;-webkit-transform:none;-ms-transform:none;transform:none;}.input-range__slider-container.jsx-1649775604{-webkit-transition:left 0.3s ease-out;transition:left 0.3s ease-out;}.input-range__label.jsx-1649775604{color:#aaaaaa;font-size:0.8rem;-webkit-transform:translateZ(0);-ms-transform:translateZ(0);transform:translateZ(0);white-space:nowrap;}.input-range__label--min.jsx-1649775604,.input-range__label--max.jsx-1649775604{bottom:-1.4rem;position:absolute;}.input-range__label--min.jsx-1649775604{left:0;}.input-range__label--max.jsx-1649775604{right:0;}.input-range__label--value.jsx-1649775604{position:absolute;top:-1.8rem;}.input-range__label-container.jsx-1649775604{left:-50%;position:relative;}.input-range__label--max.jsx-1649775604 .input-range__label-container.jsx-1649775604{left:50%;}.input-range__track.jsx-1649775604{background:#eeeeee;border-radius:0.3rem;cursor:pointer;display:block;height:0.3rem;position:relative;-webkit-transition:left 0.3s ease-out,width 0.3s ease-out;transition:left 0.3s ease-out,width 0.3s ease-out;}.input-range--disabled.jsx-1649775604 .input-range__track.jsx-1649775604{background:#eeeeee;}.input-range__track--background.jsx-1649775604{left:0;margin-top:-0.15rem;position:absolute;right:0;top:50%;}.input-range__track--active.jsx-1649775604{background:#3f51b5;}.input-range.jsx-1649775604{height:1rem;position:relative;margin-top:1.2em;margin-bottom:1.4em;}.Popover.jsx-1649775604{z-index:2000;}.Popover-body.jsx-1649775604{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;padding:.5rem 1rem;background:white;border-radius:0.3rem;opacity:.95;box-shadow:rgba(0,0,0,0.12) 0 1px 6px,rgba(0,0,0,0.12) 0 1px 4px;font-size:14px;}.Popover-tipShape.jsx-1649775604{fill:" + __WEBPACK_IMPORTED_MODULE_0__colors__["a" /* backGroundBlue */] + ";}.Popover-white.jsx-1649775604 .Popover-tipShape.jsx-1649775604{fill:#00bcd4;}.Popover-white.jsx-1649775604 .Popover-body.jsx-1649775604{background:white;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0LXJhbmdlLXN0eWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1pQixBQUdtQixBQWVPLEFBRXVCLEFBRXpCLEFBTVMsQUFHaEIsQUFPQyxBQUlSLEFBR0MsQUFHVSxBQUlSLEFBR0MsQUFHUSxBQVFFLEFBR2QsQUFPWSxBQUdQLEFBT0csQUFHTyxBQVdjLEFBSXJCLEFBSUksT0FsRVgsQUE0QlksQ0F6QlgsQ0FVRyxDQUZNLEVBMkJBLENBT3BCLEFBa0JBLENBekVtQixDQU9DLEVBc0VwQixDQTVEYyxDQTFCZSxBQW9DTixBQU9DLEFBVUYsUUFMRixDQWxCQyxFQUpOLEFBZ0NJLENBaERPLEVBTUwsQ0E4RHJCLE1BekNpQixDQXhDZ0MsR0FJN0IsQ0FnRFYsRUFVWSxNQVRaLEVBWk0sS0FwQ0csQ0FyQkUsQUFxRVYsTUFVWCxDQXZEaUMsQ0FrQ2pCLE1BNUNVLEtBYkMsR0EwRFAsa0JBQ2lDLENBMEIzQixHQXBGTCxVQTRCQSxFQVRELE9BbEJILFVBMkJLLEtBMUJOLGNBQ0YsWUFDUSxlQWlGQyxLQWhGRCxjQWlGRCxNQWhGTixJQW9EdUMsT0E2QjdCLEVBaEZMLGtCQUNWLENBZ0ZNLE9BL0UrQyxLQWdGYSxpRUFDekQsZUFDbkIsdUhBakZhLFdBQUMiLCJmaWxlIjoiaW5wdXQtcmFuZ2Utc3R5bGUuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvRGFuaWVsL0Rlc2t0b3AvQ3VycmVudCBDbGFzc2VzL1NlbmlvciBEZXNpZ24vUHJvamVjdC9NZWRpdW0gUG9zdCBzcmMvcmVhY3Qtc3Vkb2t1LWdhbWUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzXHJcbmltcG9ydCBjc3MgZnJvbSAnc3R5bGVkLWpzeC9jc3MnO1xyXG5pbXBvcnQge2JhY2tHcm91bmRCbHVlfSBmcm9tIFwiLi9jb2xvcnNcIjtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xyXG57IC8qIGxhbmd1YWdlPUNTUyAqLyB9XHJcbmNvbnN0IFN0eWxlID0gY3NzYFxyXG4uaW5wdXQtcmFuZ2VfX3NsaWRlciB7XHJcbiAgYXBwZWFyYW5jZTogbm9uZTtcclxuICBiYWNrZ3JvdW5kOiAjM2Y1MWI1O1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkICMzZjUxYjU7XHJcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgaGVpZ2h0OiAxcmVtO1xyXG4gIG1hcmdpbi1sZWZ0OiAtMC41cmVtO1xyXG4gIG1hcmdpbi10b3A6IC0wLjY1cmVtO1xyXG4gIG91dGxpbmU6IG5vbmU7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogNTAlO1xyXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGVhc2Utb3V0LCBib3gtc2hhZG93IDAuM3MgZWFzZS1vdXQ7XHJcbiAgd2lkdGg6IDFyZW07IH1cclxuICAuaW5wdXQtcmFuZ2VfX3NsaWRlcjphY3RpdmUge1xyXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjMpOyB9XHJcbiAgLmlucHV0LXJhbmdlX19zbGlkZXI6Zm9jdXMge1xyXG4gICAgYm94LXNoYWRvdzogMCAwIDAgNXB4IHJnYmEoNjMsIDgxLCAxODEsIDAuMik7IH1cclxuICAuaW5wdXQtcmFuZ2UtLWRpc2FibGVkIC5pbnB1dC1yYW5nZV9fc2xpZGVyIHtcclxuICAgIGJhY2tncm91bmQ6ICNjY2NjY2M7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjY2NjO1xyXG4gICAgYm94LXNoYWRvdzogbm9uZTtcclxuICAgIHRyYW5zZm9ybTogbm9uZTsgfVxyXG5cclxuLmlucHV0LXJhbmdlX19zbGlkZXItY29udGFpbmVyIHtcclxuICB0cmFuc2l0aW9uOiBsZWZ0IDAuM3MgZWFzZS1vdXQ7IH1cclxuXHJcbi5pbnB1dC1yYW5nZV9fbGFiZWwge1xyXG4gIGNvbG9yOiAjYWFhYWFhO1xyXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xyXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcclxuICB3aGl0ZS1zcGFjZTogbm93cmFwOyB9XHJcblxyXG4uaW5wdXQtcmFuZ2VfX2xhYmVsLS1taW4sXHJcbi5pbnB1dC1yYW5nZV9fbGFiZWwtLW1heCB7XHJcbiAgYm90dG9tOiAtMS40cmVtO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTsgfVxyXG5cclxuLmlucHV0LXJhbmdlX19sYWJlbC0tbWluIHtcclxuICBsZWZ0OiAwOyB9XHJcblxyXG4uaW5wdXQtcmFuZ2VfX2xhYmVsLS1tYXgge1xyXG4gIHJpZ2h0OiAwOyB9XHJcblxyXG4uaW5wdXQtcmFuZ2VfX2xhYmVsLS12YWx1ZSB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogLTEuOHJlbTsgfVxyXG5cclxuLmlucHV0LXJhbmdlX19sYWJlbC1jb250YWluZXIge1xyXG4gIGxlZnQ6IC01MCU7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XHJcbiAgLmlucHV0LXJhbmdlX19sYWJlbC0tbWF4IC5pbnB1dC1yYW5nZV9fbGFiZWwtY29udGFpbmVyIHtcclxuICAgIGxlZnQ6IDUwJTsgfVxyXG5cclxuLmlucHV0LXJhbmdlX190cmFjayB7XHJcbiAgYmFja2dyb3VuZDogI2VlZWVlZTtcclxuICBib3JkZXItcmFkaXVzOiAwLjNyZW07XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIGhlaWdodDogMC4zcmVtO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICB0cmFuc2l0aW9uOiBsZWZ0IDAuM3MgZWFzZS1vdXQsIHdpZHRoIDAuM3MgZWFzZS1vdXQ7IH1cclxuICAuaW5wdXQtcmFuZ2UtLWRpc2FibGVkIC5pbnB1dC1yYW5nZV9fdHJhY2sge1xyXG4gICAgYmFja2dyb3VuZDogI2VlZWVlZTsgfVxyXG5cclxuLmlucHV0LXJhbmdlX190cmFjay0tYmFja2dyb3VuZCB7XHJcbiAgbGVmdDogMDtcclxuICBtYXJnaW4tdG9wOiAtMC4xNXJlbTtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgdG9wOiA1MCU7IH1cclxuXHJcbi5pbnB1dC1yYW5nZV9fdHJhY2stLWFjdGl2ZSB7XHJcbiAgYmFja2dyb3VuZDogIzNmNTFiNTsgfVxyXG5cclxuLmlucHV0LXJhbmdlIHtcclxuICBoZWlnaHQ6IDFyZW07XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIG1hcmdpbi10b3A6IDEuMmVtO1xyXG4gIG1hcmdpbi1ib3R0b206IDEuNGVtO1xyXG59XHJcbiAgXHJcbi5Qb3BvdmVyIHtcclxuICAgIHotaW5kZXg6IDIwMDA7XHJcbn1cclxuLlBvcG92ZXItYm9keSB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBwYWRkaW5nOiAuNXJlbSAxcmVtO1xyXG4gICAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgICBib3JkZXItcmFkaXVzOiAwLjNyZW07XHJcbiAgICBvcGFjaXR5OiAuOTU7XHJcbiAgICBib3gtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuMTIpIDAgMXB4IDZweCwgcmdiYSgwLCAwLCAwLCAwLjEyKSAwIDFweCA0cHg7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbn1cclxuXHJcbi5Qb3BvdmVyLXRpcFNoYXBlIHtcclxuICAgIGZpbGw6ICR7YmFja0dyb3VuZEJsdWV9O1xyXG59XHJcblxyXG4uUG9wb3Zlci13aGl0ZSAuUG9wb3Zlci10aXBTaGFwZSB7XHJcbiAgICBmaWxsOiAjMDBiY2Q0O1xyXG59XHJcblxyXG4uUG9wb3Zlci13aGl0ZSAuUG9wb3Zlci1ib2R5IHtcclxuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xyXG59XHJcbiAgYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFN0eWxlO1xyXG4iXX0= */\n/*@ sourceURL=input-range-style.js */";
Style.__scopedHash = "1649775604";
/* harmony default export */ __webpack_exports__["a"] = (Style);

/***/ }),

/***/ "./pages/index.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style__ = __webpack_require__("styled-jsx/style");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__("react");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_immutable__ = __webpack_require__("immutable");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_immutable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_immutable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__("prop-types");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_next_head__ = __webpack_require__("next/head");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_next_head___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_next_head__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_color__ = __webpack_require__("color");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_color___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_color__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_react_input_range__ = __webpack_require__("react-input-range");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_react_input_range___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_react_input_range__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__input_range_style__ = __webpack_require__("./input-range-style.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__sudoku__ = __webpack_require__("./sudoku.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__colors__ = __webpack_require__("./colors.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__components_tool_tip__ = __webpack_require__("./components/tool-tip.js");
var _jsxFileName = 'C:\\Users\\Daniel\\Desktop\\Current Classes\\Senior Design\\Project\\Medium Post src\\react-sudoku-game\\pages\\index.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/accessible-emoji */







// eslint-disable-next-line import/no-extraneous-dependencies




var LoupeIcon = function LoupeIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M457.602 54.355c-72.417-72.416-190.245-72.416-262.661 0-35.081 35.079-54.399 81.721-54.399 131.331 0 45.193 16.039 87.917 45.413 121.688l-22.119 22.119-22.542-22.542a13.173 13.173 0 0 0-18.628 0L17.055 412.563C6.057 423.559 0 438.18 0 453.733c0 15.552 6.057 30.174 17.053 41.17 10.998 10.998 25.619 17.054 41.17 17.054 15.551 0 30.174-6.057 41.17-17.053l105.612-105.61a13.173 13.173 0 0 0 0-18.628l-22.542-22.542 22.126-22.126c34.793 30.215 78.234 45.331 121.682 45.331 47.561 0 95.123-18.104 131.331-54.311C492.68 281.938 512 235.298 512 185.688c0-49.613-19.318-96.254-54.398-131.333zM80.765 476.275c-6.021 6.021-14.026 9.337-22.542 9.337-8.515 0-16.521-3.317-22.542-9.338-6.02-6.02-9.337-14.026-9.337-22.54s3.317-16.521 9.338-22.542l58.934-58.934L139.7 417.34l-58.935 58.935zm77.565-77.564l-45.084-45.084 18.734-18.734 45.084 45.085-18.734 18.733zm280.643-100.323c-62.144 62.146-163.259 62.146-225.403 0-30.104-30.104-46.683-70.128-46.683-112.702s16.579-82.598 46.683-112.701c31.072-31.072 71.887-46.609 112.702-46.609 40.814 0 81.63 15.535 112.702 46.609 30.104 30.103 46.683 70.128 46.683 112.701s-16.58 82.598-46.684 112.702z'
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M417.234 94.721c-50.158-50.156-131.769-50.158-181.927 0-50.156 50.158-50.156 131.769.001 181.927 25.079 25.077 58.02 37.617 90.963 37.617s65.885-12.54 90.964-37.617v-.001c50.156-50.156 50.156-131.768-.001-181.926zM398.605 258.02c-39.886 39.886-104.783 39.886-144.669.001-39.886-39.886-39.886-104.784-.001-144.67 19.945-19.946 46.136-29.914 72.336-29.914 26.193 0 52.394 9.974 72.334 29.914 39.886 39.885 39.886 104.783 0 144.669z'
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M375.321 136.636c-27.048-27.045-71.053-27.045-98.1 0-5.144 5.144-5.144 13.484 0 18.63 5.144 5.144 13.484 5.144 18.63 0 16.772-16.774 44.068-16.774 60.842 0a13.128 13.128 0 0 0 9.314 3.858 13.13 13.13 0 0 0 9.314-3.858c5.144-5.144 5.144-13.485 0-18.63z'
    })
  );
};

LoupeIcon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  viewBox: '0 0 512 512'
};

var RemoveIcon = function RemoveIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M60.197 418.646H27.571c-6.978 0-12.634 5.657-12.634 12.634s5.656 12.634 12.634 12.634h32.627c6.978 0 12.634-5.657 12.634-12.634-.001-6.976-5.658-12.634-12.635-12.634zM114.205 467.363c-4.934-4.932-12.933-4.934-17.867 0l-23.07 23.07c-4.934 4.934-4.935 12.933 0 17.868a12.598 12.598 0 0 0 8.933 3.701c3.233 0 6.467-1.234 8.933-3.701l23.07-23.07c4.935-4.934 4.936-12.933.001-17.868zM484.431 424.963H262.965l226.699-226.688c9.851-9.852 9.852-25.881.001-35.733L334.522 7.388c-9.853-9.851-25.882-9.851-35.735 0l-247.99 247.99c-14.318 14.318-22.203 33.354-22.203 53.602 0 20.247 7.885 39.284 22.203 53.602l74.701 74.699c8.351 8.351 19.455 12.951 31.266 12.951H484.43c6.978 0 12.634-5.657 12.634-12.634.001-6.977-5.655-12.635-12.633-12.635zm-327.666 0c-5.062 0-9.82-1.972-13.401-5.551l-74.699-74.699c-19.704-19.704-19.704-51.765 0-71.468l40.557-40.557 133.335 133.336c2.467 2.466 5.7 3.7 8.933 3.7s6.467-1.234 8.933-3.7c4.934-4.934 4.935-12.933.001-17.868L127.09 214.821 316.655 25.254l155.142 155.155L227.23 424.963h-70.465z'
    })
  );
};

RemoveIcon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  viewBox: '0 0 512.001 512.001'
};

var ReloadIcon = function ReloadIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M482.195 226.196C482.195 101.471 380.725 0 256.001 0S29.805 101.471 29.805 226.196c0 7.409 6.007 13.416 13.416 13.416s13.416-6.008 13.416-13.416c0-109.93 89.434-199.363 199.363-199.363s199.363 89.434 199.363 199.363c0 109.928-89.434 199.362-199.363 199.362h-23.276l33.282-37.255c4.937-5.525 4.458-14.007-1.067-18.944-5.525-4.937-14.008-4.457-18.944 1.068l-47.576 53.255c-7.788 8.718-7.788 21.866 0 30.584l47.576 53.255a13.379 13.379 0 0 0 10.01 4.478c3.181 0 6.375-1.126 8.934-3.41 5.526-4.937 6.004-13.419 1.067-18.944l-33.282-37.255H256c124.725 0 226.195-101.471 226.195-226.194z'
    })
  );
};

ReloadIcon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  viewBox: '0 0 512 512'
};

var ReturnIcon = function ReturnIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: 'M384.834 180.699H36.101l73.326-82.187c4.755-5.33 4.289-13.505-1.041-18.26-5.328-4.754-13.505-4.29-18.26 1.041l-82.582 92.56c-10.059 11.278-10.058 28.282.001 39.557l82.582 92.561a12.897 12.897 0 0 0 9.654 4.323c3.064 0 6.139-1.083 8.606-3.282 5.33-4.755 5.795-12.93 1.041-18.26l-73.326-82.188h348.733c55.858 0 101.3 45.444 101.3 101.3s-45.443 101.3-101.3 101.3h-61.58c-7.143 0-12.933 5.791-12.933 12.933 0 7.142 5.79 12.933 12.933 12.933h61.58c70.12 0 127.166-57.046 127.166-127.166-.001-70.119-57.047-127.165-127.167-127.165z'
    })
  );
};

ReturnIcon.defaultProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  viewBox: '0 0 512.001 512.001'
};






var Description = 'Discover the next evolution of Sudoku with amazing graphics, animations, and user-friendly features. Enjoy a Sudoku experience like you never have before with customizable game generation, cell highlighting, intuitive controls and more!';
var cellWidth = 2.5;

var LightBlue100 = '#B3E5FC';
var LightBlue200 = '#81D4FA';
var LightBlue300 = '#4FC3F7';
var Indigo700 = '#303F9F';
var DeepOrange200 = '#FFAB91';
var DeepOrange600 = '#F4511E';
var ControlNumberColor = Indigo700;

// eslint-disable-next-line no-lone-blocks
{/* language=CSS */}
var CellStyle = new String('.cell{height:' + cellWidth + 'em;width:' + cellWidth + 'em;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-size:1.1em;font-weight:bold;-webkit-transition:background-color .3s ease-in-out;transition:background-color .3s ease-in-out;}.cell:nth-child(3n+3):not(:last-child){border-right:2px solid black;}.cell:not(:last-child){border-right:1px solid black;}.note-number{font-size:.6em;width:33%;height:33%;box-sizing:border-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */');

// eslint-disable-next-line no-lone-blocks
CellStyle.__hash = '2649640050';
CellStyle.__scoped = '.cell.jsx-80204083{height:' + cellWidth + 'em;width:' + cellWidth + 'em;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-size:1.1em;font-weight:bold;-webkit-transition:background-color .3s ease-in-out;transition:background-color .3s ease-in-out;}.cell.jsx-80204083:nth-child(3n+3):not(:last-child){border-right:2px solid black;}.cell.jsx-80204083:not(:last-child){border-right:1px solid black;}.note-number.jsx-80204083{font-size:.6em;width:33%;height:33%;box-sizing:border-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */';
CellStyle.__scopedHash = '80204083';
{/* language=CSS */}
var ActionsStyle = new String('.actions{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;width:100%;max-width:400px;margin-top:.5em;padding:0 .6em;}.action{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.action svg{width:2.5em;margin-bottom:.2em;}.redo svg{-webkit-transform:scaleX(-1);-ms-transform:scaleX(-1);transform:scaleX(-1);}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */');

// eslint-disable-next-line no-lone-blocks
ActionsStyle.__hash = '3577854778';
ActionsStyle.__scoped = '.actions.jsx-183028603{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;width:100%;max-width:400px;margin-top:.5em;padding:0 .6em;}.action.jsx-183028603{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.action.jsx-183028603 svg{width:2.5em;margin-bottom:.2em;}.redo.jsx-183028603 svg{-webkit-transform:scaleX(-1);-ms-transform:scaleX(-1);transform:scaleX(-1);}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */';
ActionsStyle.__scopedHash = '183028603';
{/* language=CSS */}
var ControlStyle = new String('.control{padding:0 2em;cursor:pointer;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-family:\'Special Elite\',cursive;-webkit-transition:filter .5s ease-in-out;transition:filter .5s ease-in-out;width:100%;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */');

// eslint-disable-next-line no-lone-blocks
ControlStyle.__hash = '3736506914';
ControlStyle.__scoped = '.control.jsx-404884099{padding:0 2em;cursor:pointer;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-family:\'Special Elite\',cursive;-webkit-transition:filter .5s ease-in-out;transition:filter .5s ease-in-out;width:100%;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */';
ControlStyle.__scopedHash = '404884099';
{/* language=CSS */}
var NumberControlStyle = new String('.number{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;position:relative;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:2em;margin:.1em;width:1.5em;height:1.5em;color:' + ControlNumberColor + ';box-shadow:0 1px 2px rgba(0,0,0,0.16),0 1px 2px rgba(0,0,0,0.23);border-radius:50%;}.number>div{margin-top:.3em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */');

// eslint-disable-next-line no-lone-blocks
NumberControlStyle.__hash = '547487472';
NumberControlStyle.__scoped = '.number.jsx-1989098289{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;position:relative;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:2em;margin:.1em;width:1.5em;height:1.5em;color:' + ControlNumberColor + ';box-shadow:0 1px 2px rgba(0,0,0,0.16),0 1px 2px rgba(0,0,0,0.23);border-radius:50%;}.number.jsx-1989098289>div.jsx-1989098289{margin-top:.3em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */';
NumberControlStyle.__scopedHash = '1989098289';
{/* language=CSS */}
var PuzzleStyle = new String('.puzzle{margin-top:.5em;width:' + cellWidth * 9 + 'em;cursor:pointer;box-shadow:0 3px 6px rgba(0,0,0,0.16),0 3px 6px rgba(0,0,0,0.23);}.row{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex:0;-ms-flex:0;flex:0;width:' + cellWidth * 9 + 'em;}.row:not(:last-child){border-bottom:1px solid black;}.row:nth-child(3n+3):not(:last-child){border-bottom:2px solid black !important;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2VzXFxpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpSXVCLEFBR3FCLEFBTUgsQUFNaUIsQUFHVyxnQkFkSixjQVl6QyxXQUdBLFlBZG1CLGVBQ21ELE1BSS9DLDJEQUh2QixrQ0FJVyxpQ0FDOEIscUNBQ3pDIiwiZmlsZSI6InBhZ2VzXFxpbmRleC5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9EYW5pZWwvRGVza3RvcC9DdXJyZW50IENsYXNzZXMvU2VuaW9yIERlc2lnbi9Qcm9qZWN0L01lZGl1bSBQb3N0IHNyYy9yZWFjdC1zdWRva3UtZ2FtZSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L2FjY2Vzc2libGUtZW1vamkgKi9cclxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgU2V0LCBMaXN0LCBmcm9tSlMgfSBmcm9tICdpbW11dGFibGUnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5pbXBvcnQgTmV4dEhlYWQgZnJvbSAnbmV4dC9oZWFkJztcclxuaW1wb3J0IENvbG9yIGZyb20gJ2NvbG9yJztcclxuaW1wb3J0IElucHV0UmFuZ2UgZnJvbSAncmVhY3QtaW5wdXQtcmFuZ2UnO1xyXG5cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xyXG5pbXBvcnQgY3NzIGZyb20gJ3N0eWxlZC1qc3gvY3NzJztcclxuXHJcbmltcG9ydCBSYW5nZVN0eWxlIGZyb20gJy4uL2lucHV0LXJhbmdlLXN0eWxlJztcclxuaW1wb3J0IExvdXBlSWNvbiBmcm9tICcuLi9zdmcvbG91cGUuc3ZnJztcclxuaW1wb3J0IFJlbW92ZUljb24gZnJvbSAnLi4vc3ZnL3JlbW92ZS5zdmcnO1xyXG5pbXBvcnQgUmVsb2FkSWNvbiBmcm9tICcuLi9zdmcvcmVsb2FkLnN2Zyc7XHJcbmltcG9ydCBSZXR1cm5JY29uIGZyb20gJy4uL3N2Zy9yZXR1cm4uc3ZnJztcclxuXHJcbmltcG9ydCB7IG1ha2VQdXp6bGUsIHBsdWNrLCBpc1BlZXIgYXMgYXJlQ29vcmRpbmF0ZVBlZXJzLCByYW5nZSB9IGZyb20gJy4uL3N1ZG9rdSc7XHJcbmltcG9ydCB7IGJhY2tHcm91bmRCbHVlIH0gZnJvbSAnLi4vY29sb3JzJztcclxuaW1wb3J0IFRpcCBmcm9tICcuLi9jb21wb25lbnRzL3Rvb2wtdGlwJztcclxuXHJcblxyXG5jb25zdCBEZXNjcmlwdGlvbiA9ICdEaXNjb3ZlciB0aGUgbmV4dCBldm9sdXRpb24gb2YgU3Vkb2t1IHdpdGggYW1hemluZyBncmFwaGljcywgYW5pbWF0aW9ucywgYW5kIHVzZXItZnJpZW5kbHkgZmVhdHVyZXMuIEVuam95IGEgU3Vkb2t1IGV4cGVyaWVuY2UgbGlrZSB5b3UgbmV2ZXIgaGF2ZSBiZWZvcmUgd2l0aCBjdXN0b21pemFibGUgZ2FtZSBnZW5lcmF0aW9uLCBjZWxsIGhpZ2hsaWdodGluZywgaW50dWl0aXZlIGNvbnRyb2xzIGFuZCBtb3JlISc7XHJcbmNvbnN0IGNlbGxXaWR0aCA9IDIuNTtcclxuXHJcbmNvbnN0IExpZ2h0Qmx1ZTEwMCA9ICcjQjNFNUZDJztcclxuY29uc3QgTGlnaHRCbHVlMjAwID0gJyM4MUQ0RkEnO1xyXG5jb25zdCBMaWdodEJsdWUzMDAgPSAnIzRGQzNGNyc7XHJcbmNvbnN0IEluZGlnbzcwMCA9ICcjMzAzRjlGJztcclxuY29uc3QgRGVlcE9yYW5nZTIwMCA9ICcjRkZBQjkxJztcclxuY29uc3QgRGVlcE9yYW5nZTYwMCA9ICcjRjQ1MTFFJztcclxuY29uc3QgQ29udHJvbE51bWJlckNvbG9yID0gSW5kaWdvNzAwO1xyXG5cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXHJcbnsgLyogbGFuZ3VhZ2U9Q1NTICovIH1cclxuY29uc3QgQ2VsbFN0eWxlID0gY3NzYFxyXG4uY2VsbCB7XHJcbiAgICBoZWlnaHQ6ICR7Y2VsbFdpZHRofWVtO1xyXG4gICAgd2lkdGg6ICR7Y2VsbFdpZHRofWVtO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGZvbnQtc2l6ZTogMS4xZW07XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgLjNzIGVhc2UtaW4tb3V0O1xyXG59XHJcbi5jZWxsOm50aC1jaGlsZCgzbiszKTpub3QoOmxhc3QtY2hpbGQpIHtcclxuICAgIGJvcmRlci1yaWdodDogMnB4IHNvbGlkIGJsYWNrO1xyXG59XHJcbi5jZWxsOm5vdCg6bGFzdC1jaGlsZCkge1xyXG4gICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgYmxhY2s7XHJcbn1cclxuLm5vdGUtbnVtYmVyIHtcclxuICAgIGZvbnQtc2l6ZTogLjZlbTtcclxuICAgIHdpZHRoOiAzMyU7XHJcbiAgICBoZWlnaHQ6IDMzJTtcclxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59XHJcbmA7XHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcclxueyAvKiBsYW5ndWFnZT1DU1MgKi8gfVxyXG5jb25zdCBBY3Rpb25zU3R5bGUgPSBjc3NgXHJcbi5hY3Rpb25zIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgbWFyZ2luLXRvcDogLjVlbTtcclxuICAgIHBhZGRpbmc6IDAgLjZlbTtcclxufVxyXG4uYWN0aW9uIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxufVxyXG4uYWN0aW9uIDpnbG9iYWwoc3ZnKSB7XHJcbiAgICB3aWR0aDogMi41ZW07XHJcbiAgICBtYXJnaW4tYm90dG9tOiAuMmVtO1xyXG59XHJcbi5yZWRvIDpnbG9iYWwoc3ZnKSB7XHJcbiAgICB0cmFuc2Zvcm06IHNjYWxlWCgtMSk7XHJcbn1cclxuYDtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xyXG57IC8qIGxhbmd1YWdlPUNTUyAqLyB9XHJcbmNvbnN0IENvbnRyb2xTdHlsZSA9IGNzc2BcclxuLmNvbnRyb2wge1xyXG4gICAgcGFkZGluZzogMCAyZW07XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGZvbnQtZmFtaWx5OiAnU3BlY2lhbCBFbGl0ZScsIGN1cnNpdmU7XHJcbiAgICB0cmFuc2l0aW9uOiBmaWx0ZXIgLjVzIGVhc2UtaW4tb3V0O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxuYDtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xyXG57IC8qIGxhbmd1YWdlPUNTUyAqLyB9XHJcbmNvbnN0IE51bWJlckNvbnRyb2xTdHlsZSA9IGNzc2BcclxuLm51bWJlciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZm9udC1zaXplOiAyZW07XHJcbiAgICBtYXJnaW46IC4xZW07XHJcbiAgICB3aWR0aDogMS41ZW07XHJcbiAgICBoZWlnaHQ6IDEuNWVtO1xyXG4gICAgY29sb3I6ICR7Q29udHJvbE51bWJlckNvbG9yfTtcclxuICAgIGJveC1zaGFkb3c6IDAgMXB4IDJweCByZ2JhKDAsMCwwLDAuMTYpLCAwIDFweCAycHggcmdiYSgwLDAsMCwwLjIzKTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxufVxyXG4ubnVtYmVyID4gZGl2IHtcclxuICAgIG1hcmdpbi10b3A6IC4zZW07XHJcbn1cclxuYDtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xyXG57IC8qIGxhbmd1YWdlPUNTUyAqLyB9XHJcbmNvbnN0IFB1enpsZVN0eWxlID0gY3NzYFxyXG4ucHV6emxlIHtcclxuICAgIG1hcmdpbi10b3A6IC41ZW07XHJcbiAgICB3aWR0aDogJHtjZWxsV2lkdGggKiA5fWVtO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgYm94LXNoYWRvdzogMCAzcHggNnB4IHJnYmEoMCwwLDAsMC4xNiksIDAgM3B4IDZweCByZ2JhKDAsMCwwLDAuMjMpO1xyXG59XHJcbi5yb3cge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBmbGV4OiAwO1xyXG4gICAgd2lkdGg6ICR7Y2VsbFdpZHRoICogOX1lbTtcclxufVxyXG4ucm93Om5vdCg6bGFzdC1jaGlsZCkge1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGJsYWNrO1xyXG59XHJcbi5yb3c6bnRoLWNoaWxkKDNuKzMpOm5vdCg6bGFzdC1jaGlsZCkge1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIGJsYWNrICFpbXBvcnRhbnQ7XHJcbn1cclxuYDtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xyXG57IC8qIGxhbmd1YWdlPUNTUyAqLyB9XHJcbmNvbnN0IENpcmN1bHVhclByb2dyZXNzU3R5bGUgPSBjc3NgXHJcbi5jaXJjdWxhci1wcm9ncmVzcyB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHRyYW5zaXRpb246IGZpbHRlciAuNHMgZWFzZS1pbi1vdXQ7XHJcbn1cclxuXHJcbi5jaXJjbGUtYmcge1xyXG4gICAgZmlsbDogbm9uZTtcclxuICAgIHN0cm9rZTogI2VlZTtcclxuICAgIHN0cm9rZS13aWR0aDogMy44O1xyXG59XHJcblxyXG4uY2lyY2xlIHtcclxuICAgIHN0cm9rZTogJHtDb250cm9sTnVtYmVyQ29sb3J9O1xyXG4gICAgdHJhbnNpdGlvbjogc3Ryb2tlLWRhc2hhcnJheSAuNHMgZWFzZS1pbi1vdXQ7XHJcbiAgICBmaWxsOiBub25lO1xyXG4gICAgc3Ryb2tlLXdpZHRoOiAyLjg7XHJcbiAgICBzdHJva2UtbGluZWNhcDogcm91bmQ7XHJcbn1cclxuYDtcclxuXHJcbmNvbnN0IENpcmN1bGFyUGF0aEQgPSAnTTE4IDIuMDg0NSBhIDE1LjkxNTUgMTUuOTE1NSAwIDAgMSAwIDMxLjgzMSBhIDE1LjkxNTUgMTUuOTE1NSAwIDAgMSAwIC0zMS44MzEnO1xyXG5cclxuZnVuY3Rpb24gZ2V0QmFja0dyb3VuZENvbG9yKHtcclxuICBjb25mbGljdCwgaXNQZWVyLCBzYW1lVmFsdWUsIGlzU2VsZWN0ZWQsXHJcbn0pIHtcclxuICBpZiAoY29uZmxpY3QgJiYgaXNQZWVyICYmIHNhbWVWYWx1ZSkge1xyXG4gICAgcmV0dXJuIERlZXBPcmFuZ2UyMDA7XHJcbiAgfSBlbHNlIGlmIChzYW1lVmFsdWUpIHtcclxuICAgIHJldHVybiBMaWdodEJsdWUzMDA7XHJcbiAgfSBlbHNlIGlmIChpc1NlbGVjdGVkKSB7XHJcbiAgICByZXR1cm4gTGlnaHRCbHVlMjAwO1xyXG4gIH0gZWxzZSBpZiAoaXNQZWVyKSB7XHJcbiAgICByZXR1cm4gTGlnaHRCbHVlMTAwO1xyXG4gIH1cclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEZvbnRDb2xvcih7IHZhbHVlLCBjb25mbGljdCwgcHJlZmlsbGVkIH0pIHtcclxuICBpZiAoY29uZmxpY3QgJiYgIXByZWZpbGxlZCkge1xyXG4gICAgcmV0dXJuIERlZXBPcmFuZ2U2MDA7XHJcbiAgfSBlbHNlIGlmICghcHJlZmlsbGVkICYmIHZhbHVlKSB7XHJcbiAgICByZXR1cm4gQ29udHJvbE51bWJlckNvbG9yO1xyXG4gIH1cclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmNsYXNzIEdlbmVyYXRpb25VSSBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICB0aGlzLnN0YXRlID0geyB2YWx1ZTogMzAgfTtcclxuICB9XHJcblxyXG4gIGdlbmVyYXRlR2FtZSA9ICgpID0+IHtcclxuICAgIHRoaXMucHJvcHMuZ2VuZXJhdGVHYW1lKHRoaXMuc3RhdGUudmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJnZW5lcmF0aW9uXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb3B5XCI+U3RhcnQgd2l0aCB7dGhpcy5zdGF0ZS52YWx1ZX0gY2VsbHMgcHJlZmlsbGVkPC9kaXY+XHJcbiAgICAgICAgPElucHV0UmFuZ2VcclxuICAgICAgICAgIG1heFZhbHVlPXs4MX1cclxuICAgICAgICAgIG1pblZhbHVlPXsxN31cclxuICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnZhbHVlfVxyXG4gICAgICAgICAgb25DaGFuZ2U9e3ZhbHVlID0+IHRoaXMuc2V0U3RhdGUoeyB2YWx1ZSB9KX1cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uXCIgb25DbGljaz17dGhpcy5nZW5lcmF0ZUdhbWV9PlBsYXkgU3Vkb2t1PC9kaXY+XHJcbiAgICAgICAgeyAvKiBsYW5ndWFnZT1DU1MgKi8gfVxyXG4gICAgICAgIDxzdHlsZSBqc3g+e2BcclxuICAgICAgICAgICAgLmNvcHkge1xyXG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjNlbTtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC41ZW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLmdlbmVyYXRpb24ge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6Z2xvYmFsKC5pbnB1dC1yYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDgwJTtcclxuICAgICAgICAgICAgICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLmJ1dHRvbiB7XHJcbiAgICAgICAgICAgICAgbWFyZ2luLXRvcDogLjVlbTtcclxuICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAuMjVlbTtcclxuICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIC4yNXM7XHJcbiAgICAgICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XHJcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjRlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAuYnV0dG9uOmFjdGl2ZSB7XHJcbiAgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCA1cHgpO1xyXG4gICAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMXB4IDAgMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLmJ1dHRvbiB7XHJcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtiYWNrR3JvdW5kQmx1ZX07XHJcbiAgICAgICAgICAgICAgYm94LXNoYWRvdzogMCAycHggNHB4IDAgJHtDb2xvcihiYWNrR3JvdW5kQmx1ZSkuZGFya2VuKDAuNSkuaHNsKCkuc3RyaW5nKCl9O1xyXG4gICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLmJ1dHRvbjpob3ZlciB7XHJcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtDb2xvcihiYWNrR3JvdW5kQmx1ZSkubGlnaHRlbigwLjIpLmhzbCgpLnN0cmluZygpfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIGB9XHJcbiAgICAgICAgPC9zdHlsZT5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuR2VuZXJhdGlvblVJLnByb3BUeXBlcyA9IHtcclxuICBnZW5lcmF0ZUdhbWU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbn07XHJcblxyXG5jb25zdCBOdW1iZXJDb250cm9sID0gKHsgbnVtYmVyLCBvbkNsaWNrLCBjb21wbGV0aW9uUGVyY2VudGFnZSB9KSA9PiAoXHJcbiAgPGRpdlxyXG4gICAga2V5PXtudW1iZXJ9XHJcbiAgICBjbGFzc05hbWU9XCJudW1iZXJcIlxyXG4gICAgb25DbGljaz17b25DbGlja31cclxuICA+XHJcbiAgICA8ZGl2PntudW1iZXJ9PC9kaXY+XHJcbiAgICA8Q2lyY2x1bGFyUHJvZ3Jlc3MgcGVyY2VudD17Y29tcGxldGlvblBlcmNlbnRhZ2V9IC8+XHJcbiAgICA8c3R5bGUganN4PntOdW1iZXJDb250cm9sU3R5bGV9PC9zdHlsZT5cclxuICA8L2Rpdj5cclxuKTtcclxuXHJcbk51bWJlckNvbnRyb2wucHJvcFR5cGVzID0ge1xyXG4gIG51bWJlcjogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxyXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxyXG4gIGNvbXBsZXRpb25QZXJjZW50YWdlOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXHJcbn07XHJcblxyXG5OdW1iZXJDb250cm9sLmRlZmF1bHRQcm9wcyA9IHtcclxuICBvbkNsaWNrOiBudWxsLFxyXG59O1xyXG5cclxuY29uc3QgQ2VsbCA9IChwcm9wcykgPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHZhbHVlLCBvbkNsaWNrLCBpc1BlZXIsIGlzU2VsZWN0ZWQsIHNhbWVWYWx1ZSwgcHJlZmlsbGVkLCBub3RlcywgY29uZmxpY3QsXHJcbiAgfSA9IHByb3BzO1xyXG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGdldEJhY2tHcm91bmRDb2xvcih7XHJcbiAgICBjb25mbGljdCwgaXNQZWVyLCBzYW1lVmFsdWUsIGlzU2VsZWN0ZWQsXHJcbiAgfSk7XHJcbiAgY29uc3QgZm9udENvbG9yID0gZ2V0Rm9udENvbG9yKHsgY29uZmxpY3QsIHByZWZpbGxlZCwgdmFsdWUgfSk7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY2VsbFwiIG9uQ2xpY2s9e29uQ2xpY2t9PlxyXG4gICAgICB7XHJcbiAgICAgICAgbm90ZXMgP1xyXG4gICAgICAgICAgcmFuZ2UoOSkubWFwKGkgPT5cclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgIDxkaXYga2V5PXtpfSBjbGFzc05hbWU9XCJub3RlLW51bWJlclwiPlxyXG4gICAgICAgICAgICAgICAge25vdGVzLmhhcyhpICsgMSkgJiYgKGkgKyAxKX1cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKSkgOlxyXG4gICAgICAgICAgdmFsdWUgJiYgdmFsdWVcclxuICAgICAgfVxyXG4gICAgICB7LyogbGFuZ3VhZ2U9Q1NTICovfVxyXG4gICAgICA8c3R5bGUganN4PntDZWxsU3R5bGV9PC9zdHlsZT5cclxuICAgICAgPHN0eWxlIGpzeD57YFxyXG4gICAgICAgICAgICAgICAgLmNlbGwge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7YmFja2dyb3VuZENvbG9yIHx8ICdpbml0aWFsJ307XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Zm9udENvbG9yIHx8ICdpbml0aWFsJ307XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgIDwvc3R5bGU+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuQ2VsbC5wcm9wVHlwZXMgPSB7XHJcbiAgLy8gY3VycmVudCBudW1iZXIgdmFsdWVcclxuICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlcixcclxuICAvLyBjZWxsIGNsaWNrIGhhbmRsZXJcclxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gIC8vIGlmIHRoZSBjZWxsIGlzIGEgcGVlciBvZiB0aGUgc2VsZWN0ZWQgY2VsbFxyXG4gIGlzUGVlcjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcclxuICAvLyBpZiB0aGUgY2VsbCBpcyBzZWxlY3RlZCBieSB0aGUgdXNlclxyXG4gIGlzU2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXHJcbiAgLy8gY3VycmVudCBjZWxsIGhhcyB0aGUgc2FtZSB2YWx1ZSBpZiB0aGUgdXNlciBzZWxlY3RlZCBjZWxsXHJcbiAgc2FtZVZhbHVlOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxyXG4gIC8vIGlmIHRoaXMgd2FzIHByZWZpbGxlZCBhcyBhIHBhcnQgb2YgdGhlIHB1enpsZVxyXG4gIHByZWZpbGxlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcclxuICAvLyBjdXJyZW50IG5vdGVzIHRha2VuIG9uIHRoZSBjZWxsXHJcbiAgbm90ZXM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKFNldCksXHJcbiAgLy8gaWYgdGhlIGN1cnJlbnQgY2VsbCBkb2VzIG5vdCBzYXRpc2Z5IHRoZSBnYW1lIGNvbnN0cmFpbnRcclxuICBjb25mbGljdDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbkNlbGwuZGVmYXVsdFByb3BzID0ge1xyXG4gIG5vdGVzOiBudWxsLFxyXG4gIHZhbHVlOiBudWxsLFxyXG59O1xyXG5cclxuY29uc3QgQ2lyY2x1bGFyUHJvZ3Jlc3MgPSAoeyBwZXJjZW50IH0pID0+IChcclxuICA8c3ZnIHZpZXdCb3g9XCIwIDAgMzYgMzZcIiBjbGFzc05hbWU9XCJjaXJjdWxhci1wcm9ncmVzc1wiPlxyXG4gICAgPHBhdGhcclxuICAgICAgY2xhc3NOYW1lPVwiY2lyY2xlLWJnXCJcclxuICAgICAgZD17Q2lyY3VsYXJQYXRoRH1cclxuICAgIC8+XHJcbiAgICA8cGF0aFxyXG4gICAgICBjbGFzc05hbWU9XCJjaXJjbGVcIlxyXG4gICAgICBzdHJva2VEYXNoYXJyYXk9e2Ake3BlcmNlbnQgKiAxMDB9LCAxMDBgfVxyXG4gICAgICBkPXtDaXJjdWxhclBhdGhEfVxyXG4gICAgLz5cclxuICAgIHsgLyogbGFuZ3VhZ2U9Q1NTICovIH1cclxuICAgIDxzdHlsZSBqc3g+e0NpcmN1bHVhclByb2dyZXNzU3R5bGV9PC9zdHlsZT5cclxuICA8L3N2Zz5cclxuKTtcclxuXHJcbkNpcmNsdWxhclByb2dyZXNzLnByb3BUeXBlcyA9IHtcclxuICBwZXJjZW50OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXHJcbn07XHJcblxyXG5mdW5jdGlvbiBnZXRDbGlja0hhbmRsZXIob25DbGljaywgb25Eb3VibGVDbGljaywgZGVsYXkgPSAyNTApIHtcclxuICBsZXQgdGltZW91dElEID0gbnVsbDtcclxuICByZXR1cm4gKGV2ZW50KSA9PiB7XHJcbiAgICBpZiAoIXRpbWVvdXRJRCkge1xyXG4gICAgICB0aW1lb3V0SUQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBvbkNsaWNrKGV2ZW50KTtcclxuICAgICAgICB0aW1lb3V0SUQgPSBudWxsO1xyXG4gICAgICB9LCBkZWxheSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aW1lb3V0SUQgPSBjbGVhclRpbWVvdXQodGltZW91dElEKTtcclxuICAgICAgb25Eb3VibGVDbGljayhldmVudCk7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIG1ha2Ugc2l6ZSA5IGFycmF5IG9mIDBzXHJcbiAqIEByZXR1cm5zIHtBcnJheX1cclxuICovXHJcbmZ1bmN0aW9uIG1ha2VDb3VudE9iamVjdCgpIHtcclxuICBjb25zdCBjb3VudE9iaiA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkgKz0gMSkgY291bnRPYmoucHVzaCgwKTtcclxuICByZXR1cm4gY291bnRPYmo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBnaXZlbiBhIDJEIGFycmF5IG9mIG51bWJlcnMgYXMgdGhlIGluaXRpYWwgcHV6emxlLCBnZW5lcmF0ZSB0aGUgaW5pdGlhbCBnYW1lIHN0YXRlXHJcbiAqIEBwYXJhbSBwdXp6bGVcclxuICogQHJldHVybnMge2FueX1cclxuICovXHJcbmZ1bmN0aW9uIG1ha2VCb2FyZCh7IHB1enpsZSB9KSB7XHJcbiAgLy8gY3JlYXRlIGluaXRpYWwgY291bnQgb2JqZWN0IHRvIGtlZXAgdHJhY2sgb2YgY29uZmxpY3RzIHBlciBudW1iZXIgdmFsdWVcclxuICBjb25zdCByb3dzID0gQXJyYXkuZnJvbShBcnJheSg5KS5rZXlzKCkpLm1hcCgoKSA9PiBtYWtlQ291bnRPYmplY3QoKSk7XHJcbiAgY29uc3QgY29sdW1ucyA9IEFycmF5LmZyb20oQXJyYXkoOSkua2V5cygpKS5tYXAoKCkgPT4gbWFrZUNvdW50T2JqZWN0KCkpO1xyXG4gIGNvbnN0IHNxdWFyZXMgPSBBcnJheS5mcm9tKEFycmF5KDkpLmtleXMoKSkubWFwKCgpID0+IG1ha2VDb3VudE9iamVjdCgpKTtcclxuICBjb25zdCByZXN1bHQgPSBwdXp6bGUubWFwKChyb3csIGkpID0+IChcclxuICAgIHJvdy5tYXAoKGNlbGwsIGopID0+IHtcclxuICAgICAgaWYgKGNlbGwpIHtcclxuICAgICAgICByb3dzW2ldW2NlbGxdICs9IDE7XHJcbiAgICAgICAgY29sdW1uc1tqXVtjZWxsXSArPSAxO1xyXG4gICAgICAgIHNxdWFyZXNbKChNYXRoLmZsb29yKGkgLyAzKSkgKiAzKSArIE1hdGguZmxvb3IoaiAvIDMpXVtjZWxsXSArPSAxO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsdWU6IHB1enpsZVtpXVtqXSA+IDAgPyBwdXp6bGVbaV1bal0gOiBudWxsLFxyXG4gICAgICAgIHByZWZpbGxlZDogISFwdXp6bGVbaV1bal0sXHJcbiAgICAgIH07XHJcbiAgICB9KVxyXG4gICkpO1xyXG4gIHJldHVybiBmcm9tSlMoeyBwdXp6bGU6IHJlc3VsdCwgc2VsZWN0ZWQ6IGZhbHNlLCBjaG9pY2VzOiB7IHJvd3MsIGNvbHVtbnMsIHNxdWFyZXMgfSB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIGdpdmUgdGhlIGNvb3JkaW5hdGUgdXBkYXRlIHRoZSBjdXJyZW50IGJvYXJkIHdpdGggYSBudW1iZXIgY2hvaWNlXHJcbiAqIEBwYXJhbSB4XHJcbiAqIEBwYXJhbSB5XHJcbiAqIEBwYXJhbSBudW1iZXJcclxuICogQHBhcmFtIGZpbGwgd2hldGhlciB0byBzZXQgb3IgdW5zZXRcclxuICogQHBhcmFtIGJvYXJkIHRoZSBpbW11dGFibGUgYm9hcmQgZ2l2ZW4gdG8gY2hhbmdlXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVCb2FyZFdpdGhOdW1iZXIoe1xyXG4gIHgsIHksIG51bWJlciwgZmlsbCA9IHRydWUsIGJvYXJkLFxyXG59KSB7XHJcbiAgbGV0IGNlbGwgPSBib2FyZC5nZXQoJ3B1enpsZScpLmdldEluKFt4LCB5XSk7XHJcbiAgLy8gZGVsZXRlIGl0cyBub3Rlc1xyXG4gIGNlbGwgPSBjZWxsLmRlbGV0ZSgnbm90ZXMnKTtcclxuICAvLyBzZXQgb3IgdW5zZXQgaXRzIHZhbHVlIGRlcGVuZGluZyBvbiBgZmlsbGBcclxuICBjZWxsID0gZmlsbCA/IGNlbGwuc2V0KCd2YWx1ZScsIG51bWJlcikgOiBjZWxsLmRlbGV0ZSgndmFsdWUnKTtcclxuICBjb25zdCBpbmNyZW1lbnQgPSBmaWxsID8gMSA6IC0xO1xyXG4gIC8vIHVwZGF0ZSB0aGUgY3VycmVudCBncm91cCBjaG9pY2VzXHJcbiAgY29uc3Qgcm93UGF0aCA9IFsnY2hvaWNlcycsICdyb3dzJywgeCwgbnVtYmVyXTtcclxuICBjb25zdCBjb2x1bW5QYXRoID0gWydjaG9pY2VzJywgJ2NvbHVtbnMnLCB5LCBudW1iZXJdO1xyXG4gIGNvbnN0IHNxdWFyZVBhdGggPSBbJ2Nob2ljZXMnLCAnc3F1YXJlcycsXHJcbiAgICAoKE1hdGguZmxvb3IoeCAvIDMpKSAqIDMpICsgTWF0aC5mbG9vcih5IC8gMyksIG51bWJlcl07XHJcbiAgcmV0dXJuIGJvYXJkLnNldEluKHJvd1BhdGgsIGJvYXJkLmdldEluKHJvd1BhdGgpICsgaW5jcmVtZW50KVxyXG4gICAgLnNldEluKGNvbHVtblBhdGgsIGJvYXJkLmdldEluKGNvbHVtblBhdGgpICsgaW5jcmVtZW50KVxyXG4gICAgLnNldEluKHNxdWFyZVBhdGgsIGJvYXJkLmdldEluKHNxdWFyZVBhdGgpICsgaW5jcmVtZW50KVxyXG4gICAgLnNldEluKFsncHV6emxlJywgeCwgeV0sIGNlbGwpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXROdW1iZXJPZkdyb3Vwc0Fzc2lnbmVkRm9yTnVtYmVyKG51bWJlciwgZ3JvdXBzKSB7XHJcbiAgcmV0dXJuIGdyb3Vwcy5yZWR1Y2UoKGFjY3VtdWxhdG9yLCByb3cpID0+XHJcbiAgICBhY2N1bXVsYXRvciArIChyb3cuZ2V0KG51bWJlcikgPiAwID8gMSA6IDApLCAwKTtcclxufVxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tbXVsdGktY29tcFxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbmRleCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgc3RhdGUgPSB7fTtcclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgIGlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxyXG4gICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlclxyXG4gICAgICAgIC5yZWdpc3RlcignL3NlcnZpY2Utd29ya2VyLmpzJylcclxuICAgICAgICAudGhlbigocmVnKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnU2VydmljZVdvcmtlciBzY29wZTogJywgcmVnLnNjb3BlKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdzZXJ2aWNlIHdvcmtlciByZWdpc3RyYXRpb24gc3VjY2Vzc2Z1bCcpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUud2Fybignc2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uIGZhaWxlZCcsIGVyci5tZXNzYWdlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgZ2V0U2VsZWN0ZWRDZWxsKCkge1xyXG4gICAgY29uc3QgeyBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHNlbGVjdGVkID0gYm9hcmQuZ2V0KCdzZWxlY3RlZCcpO1xyXG4gICAgcmV0dXJuIHNlbGVjdGVkICYmIGJvYXJkLmdldCgncHV6emxlJykuZ2V0SW4oW3NlbGVjdGVkLngsIHNlbGVjdGVkLnldKTtcclxuICB9XHJcblxyXG4gIC8vIGdldCB0aGUgbWluIGJldHdlZW4gaXRzIGNvbXBsZXRpb24gaW4gcm93cywgY29sdW1ucyBhbmQgc3F1YXJlcy5cclxuICBnZXROdW1iZXJWYWx1ZUNvdW50KG51bWJlcikge1xyXG4gICAgY29uc3Qgcm93cyA9IHRoaXMuc3RhdGUuYm9hcmQuZ2V0SW4oWydjaG9pY2VzJywgJ3Jvd3MnXSk7XHJcbiAgICBjb25zdCBjb2x1bW5zID0gdGhpcy5zdGF0ZS5ib2FyZC5nZXRJbihbJ2Nob2ljZXMnLCAnY29sdW1ucyddKTtcclxuICAgIGNvbnN0IHNxdWFyZXMgPSB0aGlzLnN0YXRlLmJvYXJkLmdldEluKFsnY2hvaWNlcycsICdzcXVhcmVzJ10pO1xyXG4gICAgcmV0dXJuIE1hdGgubWluKFxyXG4gICAgICBnZXROdW1iZXJPZkdyb3Vwc0Fzc2lnbmVkRm9yTnVtYmVyKG51bWJlciwgc3F1YXJlcyksXHJcbiAgICAgIE1hdGgubWluKFxyXG4gICAgICAgIGdldE51bWJlck9mR3JvdXBzQXNzaWduZWRGb3JOdW1iZXIobnVtYmVyLCByb3dzKSxcclxuICAgICAgICBnZXROdW1iZXJPZkdyb3Vwc0Fzc2lnbmVkRm9yTnVtYmVyKG51bWJlciwgY29sdW1ucyksXHJcbiAgICAgICksXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgZ2VuZXJhdGVHYW1lID0gKGZpbmFsQ291bnQgPSAyMCkgPT4ge1xyXG4gICAgLy8gZ2V0IGEgZmlsbGVkIHB1enpsZSBnZW5lcmF0ZWRcclxuICAgIGNvbnN0IHNvbHV0aW9uID0gbWFrZVB1enpsZSgpO1xyXG4gICAgLy8gcGx1Y2sgdmFsdWVzIGZyb20gY2VsbHMgdG8gY3JlYXRlIHRoZSBnYW1lXHJcbiAgICBjb25zdCB7IHB1enpsZSB9ID0gcGx1Y2soc29sdXRpb24sIGZpbmFsQ291bnQpO1xyXG4gICAgLy8gaW5pdGlhbGl6ZSB0aGUgYm9hcmQgd2l0aCBjaG9pY2UgY291bnRzXHJcbiAgICBjb25zdCBib2FyZCA9IG1ha2VCb2FyZCh7IHB1enpsZSB9KTtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBib2FyZCwgaGlzdG9yeTogTGlzdC5vZihib2FyZCksIGhpc3RvcnlPZmZTZXQ6IDAsIHNvbHV0aW9uLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhZGROdW1iZXJBc05vdGUgPSAobnVtYmVyKSA9PiB7XHJcbiAgICBsZXQgeyBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGxldCBzZWxlY3RlZENlbGwgPSB0aGlzLmdldFNlbGVjdGVkQ2VsbCgpO1xyXG4gICAgaWYgKCFzZWxlY3RlZENlbGwpIHJldHVybjtcclxuICAgIGNvbnN0IHByZWZpbGxlZCA9IHNlbGVjdGVkQ2VsbC5nZXQoJ3ByZWZpbGxlZCcpO1xyXG4gICAgaWYgKHByZWZpbGxlZCkgcmV0dXJuO1xyXG4gICAgY29uc3QgeyB4LCB5IH0gPSBib2FyZC5nZXQoJ3NlbGVjdGVkJyk7XHJcbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBzZWxlY3RlZENlbGwuZ2V0KCd2YWx1ZScpO1xyXG4gICAgaWYgKGN1cnJlbnRWYWx1ZSkge1xyXG4gICAgICBib2FyZCA9IHVwZGF0ZUJvYXJkV2l0aE51bWJlcih7XHJcbiAgICAgICAgeCwgeSwgbnVtYmVyOiBjdXJyZW50VmFsdWUsIGZpbGw6IGZhbHNlLCBib2FyZDogdGhpcy5zdGF0ZS5ib2FyZCxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBsZXQgbm90ZXMgPSBzZWxlY3RlZENlbGwuZ2V0KCdub3RlcycpIHx8IFNldCgpO1xyXG4gICAgaWYgKG5vdGVzLmhhcyhudW1iZXIpKSB7XHJcbiAgICAgIG5vdGVzID0gbm90ZXMuZGVsZXRlKG51bWJlcik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBub3RlcyA9IG5vdGVzLmFkZChudW1iZXIpO1xyXG4gICAgfVxyXG4gICAgc2VsZWN0ZWRDZWxsID0gc2VsZWN0ZWRDZWxsLnNldCgnbm90ZXMnLCBub3Rlcyk7XHJcbiAgICBzZWxlY3RlZENlbGwgPSBzZWxlY3RlZENlbGwuZGVsZXRlKCd2YWx1ZScpO1xyXG4gICAgYm9hcmQgPSBib2FyZC5zZXRJbihbJ3B1enpsZScsIHgsIHldLCBzZWxlY3RlZENlbGwpO1xyXG4gICAgdGhpcy51cGRhdGVCb2FyZChib2FyZCk7XHJcbiAgfTtcclxuXHJcbiAgdXBkYXRlQm9hcmQgPSAobmV3Qm9hcmQpID0+IHtcclxuICAgIGxldCB7IGhpc3RvcnkgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB7IGhpc3RvcnlPZmZTZXQgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAvLyBhbnl0aGluZyBiZWZvcmUgY3VycmVudCBzdGVwIGlzIHN0aWxsIGluIGhpc3RvcnlcclxuICAgIGhpc3RvcnkgPSBoaXN0b3J5LnNsaWNlKDAsIGhpc3RvcnlPZmZTZXQgKyAxKTtcclxuICAgIC8vIGFkZCBpdHNlbGYgb250byB0aGUgaGlzdG9yeVxyXG4gICAgaGlzdG9yeSA9IGhpc3RvcnkucHVzaChuZXdCb2FyZCk7XHJcbiAgICAvLyB1cGRhdGUgdGhlIGdhbWVcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBib2FyZDogbmV3Qm9hcmQsIGhpc3RvcnksIGhpc3RvcnlPZmZTZXQ6IGhpc3Rvcnkuc2l6ZSAtIDEgfSk7XHJcbiAgfTtcclxuXHJcbiAgY2FuVW5kbyA9ICgpID0+IHRoaXMuc3RhdGUuaGlzdG9yeU9mZlNldCA+IDBcclxuXHJcbiAgcmVkbyA9ICgpID0+IHtcclxuICAgIGNvbnN0IHsgaGlzdG9yeSB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGxldCB7IGhpc3RvcnlPZmZTZXQgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBpZiAoaGlzdG9yeS5zaXplKSB7XHJcbiAgICAgIGhpc3RvcnlPZmZTZXQgPSBNYXRoLm1pbihoaXN0b3J5LnNpemUgLSAxLCBoaXN0b3J5T2ZmU2V0ICsgMSk7XHJcbiAgICAgIGNvbnN0IGJvYXJkID0gaGlzdG9yeS5nZXQoaGlzdG9yeU9mZlNldCk7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBib2FyZCwgaGlzdG9yeU9mZlNldCB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB1bmRvID0gKCkgPT4ge1xyXG4gICAgY29uc3QgeyBoaXN0b3J5IH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgbGV0IHsgaGlzdG9yeU9mZlNldCwgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBpZiAoaGlzdG9yeS5zaXplKSB7XHJcbiAgICAgIGhpc3RvcnlPZmZTZXQgPSBNYXRoLm1heCgwLCBoaXN0b3J5T2ZmU2V0IC0gMSk7XHJcbiAgICAgIGJvYXJkID0gaGlzdG9yeS5nZXQoaGlzdG9yeU9mZlNldCk7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBib2FyZCwgaGlzdG9yeU9mZlNldCwgaGlzdG9yeSB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBlcmFzZVNlbGVjdGVkID0gKCkgPT4ge1xyXG4gICAgY29uc3Qgc2VsZWN0ZWRDZWxsID0gdGhpcy5nZXRTZWxlY3RlZENlbGwoKTtcclxuICAgIGlmICghc2VsZWN0ZWRDZWxsKSByZXR1cm47XHJcbiAgICB0aGlzLmZpbGxOdW1iZXIoZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgZmlsbFNlbGVjdGVkV2l0aFNvbHV0aW9uID0gKCkgPT4ge1xyXG4gICAgY29uc3QgeyBib2FyZCwgc29sdXRpb24gfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCBzZWxlY3RlZENlbGwgPSB0aGlzLmdldFNlbGVjdGVkQ2VsbCgpO1xyXG4gICAgaWYgKCFzZWxlY3RlZENlbGwpIHJldHVybjtcclxuICAgIGNvbnN0IHsgeCwgeSB9ID0gYm9hcmQuZ2V0KCdzZWxlY3RlZCcpO1xyXG4gICAgdGhpcy5maWxsTnVtYmVyKHNvbHV0aW9uW3hdW3ldKTtcclxuICB9XHJcblxyXG5cclxuICAvLyBmaWxsIGN1cnJlbnRseSBzZWxlY3RlZCBjZWxsIHdpdGggbnVtYmVyXHJcbiAgZmlsbE51bWJlciA9IChudW1iZXIpID0+IHtcclxuICAgIGxldCB7IGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3Qgc2VsZWN0ZWRDZWxsID0gdGhpcy5nZXRTZWxlY3RlZENlbGwoKTtcclxuICAgIC8vIG5vLW9wIGlmIG5vdGhpbmcgaXMgc2VsZWN0ZWRcclxuICAgIGlmICghc2VsZWN0ZWRDZWxsKSByZXR1cm47XHJcbiAgICBjb25zdCBwcmVmaWxsZWQgPSBzZWxlY3RlZENlbGwuZ2V0KCdwcmVmaWxsZWQnKTtcclxuICAgIC8vIG5vLW9wIGlmIGl0IGlzIHJlZmlsbGVkXHJcbiAgICBpZiAocHJlZmlsbGVkKSByZXR1cm47XHJcbiAgICBjb25zdCB7IHgsIHkgfSA9IGJvYXJkLmdldCgnc2VsZWN0ZWQnKTtcclxuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHNlbGVjdGVkQ2VsbC5nZXQoJ3ZhbHVlJyk7XHJcbiAgICAvLyByZW1vdmUgdGhlIGN1cnJlbnQgdmFsdWUgYW5kIHVwZGF0ZSB0aGUgZ2FtZSBzdGF0ZVxyXG4gICAgaWYgKGN1cnJlbnRWYWx1ZSkge1xyXG4gICAgICBib2FyZCA9IHVwZGF0ZUJvYXJkV2l0aE51bWJlcih7XHJcbiAgICAgICAgeCwgeSwgbnVtYmVyOiBjdXJyZW50VmFsdWUsIGZpbGw6IGZhbHNlLCBib2FyZDogdGhpcy5zdGF0ZS5ib2FyZCxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyB1cGRhdGUgdG8gbmV3IG51bWJlciBpZiBhbnlcclxuICAgIGNvbnN0IHNldE51bWJlciA9IGN1cnJlbnRWYWx1ZSAhPT0gbnVtYmVyICYmIG51bWJlcjtcclxuICAgIGlmIChzZXROdW1iZXIpIHtcclxuICAgICAgYm9hcmQgPSB1cGRhdGVCb2FyZFdpdGhOdW1iZXIoe1xyXG4gICAgICAgIHgsIHksIG51bWJlciwgZmlsbDogdHJ1ZSwgYm9hcmQsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdGhpcy51cGRhdGVCb2FyZChib2FyZCk7XHJcbiAgfTtcclxuXHJcbiAgc2VsZWN0Q2VsbCA9ICh4LCB5KSA9PiB7XHJcbiAgICBsZXQgeyBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGJvYXJkID0gYm9hcmQuc2V0KCdzZWxlY3RlZCcsIHsgeCwgeSB9KTtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBib2FyZCB9KTtcclxuICB9O1xyXG5cclxuICBpc0NvbmZsaWN0KGksIGopIHtcclxuICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXMuc3RhdGUuYm9hcmQuZ2V0SW4oWydwdXp6bGUnLCBpLCBqXSkudG9KU09OKCk7XHJcbiAgICBpZiAoIXZhbHVlKSByZXR1cm4gZmFsc2U7XHJcbiAgICBjb25zdCByb3dDb25mbGljdCA9XHJcbiAgICAgIHRoaXMuc3RhdGUuYm9hcmQuZ2V0SW4oWydjaG9pY2VzJywgJ3Jvd3MnLCBpLCB2YWx1ZV0pID4gMTtcclxuICAgIGNvbnN0IGNvbHVtbkNvbmZsaWN0ID1cclxuICAgICAgdGhpcy5zdGF0ZS5ib2FyZC5nZXRJbihbJ2Nob2ljZXMnLCAnY29sdW1ucycsIGosIHZhbHVlXSkgPiAxO1xyXG4gICAgY29uc3Qgc3F1YXJlQ29uZmxpY3QgPVxyXG4gICAgICB0aGlzLnN0YXRlLmJvYXJkLmdldEluKFsnY2hvaWNlcycsICdzcXVhcmVzJyxcclxuICAgICAgICAoKE1hdGguZmxvb3IoaSAvIDMpKSAqIDMpICsgTWF0aC5mbG9vcihqIC8gMyksIHZhbHVlXSkgPiAxO1xyXG4gICAgcmV0dXJuIHJvd0NvbmZsaWN0IHx8IGNvbHVtbkNvbmZsaWN0IHx8IHNxdWFyZUNvbmZsaWN0O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyQ2VsbChjZWxsLCB4LCB5KSB7XHJcbiAgICBjb25zdCB7IGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3Qgc2VsZWN0ZWQgPSB0aGlzLmdldFNlbGVjdGVkQ2VsbCgpO1xyXG4gICAgY29uc3QgeyB2YWx1ZSwgcHJlZmlsbGVkLCBub3RlcyB9ID0gY2VsbC50b0pTT04oKTtcclxuICAgIGNvbnN0IGNvbmZsaWN0ID0gdGhpcy5pc0NvbmZsaWN0KHgsIHkpO1xyXG4gICAgY29uc3QgcGVlciA9IGFyZUNvb3JkaW5hdGVQZWVycyh7IHgsIHkgfSwgYm9hcmQuZ2V0KCdzZWxlY3RlZCcpKTtcclxuICAgIGNvbnN0IHNhbWVWYWx1ZSA9ICEhKHNlbGVjdGVkICYmIHNlbGVjdGVkLmdldCgndmFsdWUnKVxyXG4gICAgICAmJiB2YWx1ZSA9PT0gc2VsZWN0ZWQuZ2V0KCd2YWx1ZScpKTtcclxuXHJcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gY2VsbCA9PT0gc2VsZWN0ZWQ7XHJcbiAgICByZXR1cm4gKDxDZWxsXHJcbiAgICAgIHByZWZpbGxlZD17cHJlZmlsbGVkfVxyXG4gICAgICBub3Rlcz17bm90ZXN9XHJcbiAgICAgIHNhbWVWYWx1ZT17c2FtZVZhbHVlfVxyXG4gICAgICBpc1NlbGVjdGVkPXtpc1NlbGVjdGVkfVxyXG4gICAgICBpc1BlZXI9e3BlZXJ9XHJcbiAgICAgIHZhbHVlPXt2YWx1ZX1cclxuICAgICAgb25DbGljaz17KCkgPT4geyB0aGlzLnNlbGVjdENlbGwoeCwgeSk7IH19XHJcbiAgICAgIGtleT17eX1cclxuICAgICAgeD17eH1cclxuICAgICAgeT17eX1cclxuICAgICAgY29uZmxpY3Q9e2NvbmZsaWN0fVxyXG4gICAgLz4pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyTnVtYmVyQ29udHJvbCgpIHtcclxuICAgIGNvbnN0IHNlbGVjdGVkQ2VsbCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XHJcbiAgICBjb25zdCBwcmVmaWxsZWQgPSBzZWxlY3RlZENlbGwgJiYgc2VsZWN0ZWRDZWxsLmdldCgncHJlZmlsbGVkJyk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2xcIj5cclxuICAgICAgICB7cmFuZ2UoOSkubWFwKChpKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBudW1iZXIgPSBpICsgMTtcclxuICAgICAgICAgIC8vIGhhbmRsZXMgYmluZGluZyBzaW5nbGUgY2xpY2sgYW5kIGRvdWJsZSBjbGljayBjYWxsYmFja3NcclxuICAgICAgICAgIGNvbnN0IGNsaWNrSGFuZGxlID0gZ2V0Q2xpY2tIYW5kbGVyKFxyXG4gICAgICAgICAgICAoKSA9PiB7IHRoaXMuZmlsbE51bWJlcihudW1iZXIpOyB9LFxyXG4gICAgICAgICAgICAoKSA9PiB7IHRoaXMuYWRkTnVtYmVyQXNOb3RlKG51bWJlcik7IH0sXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPE51bWJlckNvbnRyb2xcclxuICAgICAgICAgICAgICBrZXk9e251bWJlcn1cclxuICAgICAgICAgICAgICBudW1iZXI9e251bWJlcn1cclxuICAgICAgICAgICAgICBvbkNsaWNrPXshcHJlZmlsbGVkID8gY2xpY2tIYW5kbGUgOiB1bmRlZmluZWR9XHJcbiAgICAgICAgICAgICAgY29tcGxldGlvblBlcmNlbnRhZ2U9e3RoaXMuZ2V0TnVtYmVyVmFsdWVDb3VudChudW1iZXIpIC8gOX1cclxuICAgICAgICAgICAgLz4pO1xyXG4gICAgICAgIH0pfVxyXG4gICAgICAgIDxzdHlsZSBqc3g+e0NvbnRyb2xTdHlsZX08L3N0eWxlPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJBY3Rpb25zKCkge1xyXG4gICAgY29uc3QgeyBoaXN0b3J5IH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3Qgc2VsZWN0ZWRDZWxsID0gdGhpcy5nZXRTZWxlY3RlZENlbGwoKTtcclxuICAgIGNvbnN0IHByZWZpbGxlZCA9IHNlbGVjdGVkQ2VsbCAmJiBzZWxlY3RlZENlbGwuZ2V0KCdwcmVmaWxsZWQnKTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWN0aW9uc1wiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWN0aW9uXCIgb25DbGljaz17aGlzdG9yeS5zaXplID8gdGhpcy51bmRvIDogbnVsbH0+XHJcbiAgICAgICAgICA8UmVsb2FkSWNvbiAvPlVuZG9cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvbiByZWRvXCIgb25DbGljaz17aGlzdG9yeS5zaXplID8gdGhpcy5yZWRvIDogbnVsbH0+XHJcbiAgICAgICAgICA8UmVsb2FkSWNvbiAvPlJlZG9cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvblwiIG9uQ2xpY2s9eyFwcmVmaWxsZWQgPyB0aGlzLmVyYXNlU2VsZWN0ZWQgOiBudWxsfT5cclxuICAgICAgICAgIDxSZW1vdmVJY29uIC8+RXJhc2VcclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2XHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJhY3Rpb25cIlxyXG4gICAgICAgICAgb25DbGljaz17IXByZWZpbGxlZCA/XHJcbiAgICAgICAgICB0aGlzLmZpbGxTZWxlY3RlZFdpdGhTb2x1dGlvbiA6IG51bGx9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExvdXBlSWNvbiAvPkhpbnRcclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8c3R5bGUganN4PntBY3Rpb25zU3R5bGV9PC9zdHlsZT5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyUHV6emxlKCkge1xyXG4gICAgY29uc3QgeyBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHV6emxlXCI+XHJcbiAgICAgICAge2JvYXJkLmdldCgncHV6emxlJykubWFwKChyb3csIGkpID0+IChcclxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1hcnJheS1pbmRleC1rZXlcclxuICAgICAgICAgIDxkaXYga2V5PXtpfSBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHJvdy5tYXAoKGNlbGwsIGopID0+IHRoaXMucmVuZGVyQ2VsbChjZWxsLCBpLCBqKSkudG9BcnJheSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICkpLnRvQXJyYXkoKX1cclxuICAgICAgICA8c3R5bGUganN4PntQdXp6bGVTdHlsZX08L3N0eWxlPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJDb250cm9scygpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbHNcIj5cclxuICAgICAgICB7dGhpcy5yZW5kZXJOdW1iZXJDb250cm9sKCl9XHJcbiAgICAgICAge3RoaXMucmVuZGVyQWN0aW9ucygpfVxyXG4gICAgICAgIHsgLyogbGFuZ3VhZ2U9Q1NTICovIH1cclxuICAgICAgICA8c3R5bGUganN4PntgXHJcbiAgICAgICAgICAgIC5jb250cm9scyB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAuM2VtO1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAuNWVtIDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBgfVxyXG4gICAgICAgIDwvc3R5bGU+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJlbmRlckdlbmVyYXRpb25VSSgpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxHZW5lcmF0aW9uVUkgZ2VuZXJhdGVHYW1lPXt0aGlzLmdlbmVyYXRlR2FtZX0gLz5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJIZWFkZXIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlclwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV3LWdhbWVcIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgYm9hcmQ6IGZhbHNlIH0pfT5cclxuICAgICAgICAgIDxSZXR1cm5JY29uIC8+XHJcbiAgICAgICAgICA8ZGl2Pk5ldyBHYW1lPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPFRpcCAvPlxyXG4gICAgICAgIHsgLyogbGFuZ3VhZ2U9Q1NTICovIH1cclxuICAgICAgICA8c3R5bGUganN4PntgXHJcbiAgICAgICAgICAgIC5oZWFkZXIge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiA1MDBweDtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAgMC41ZW07XHJcbiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC5uZXctZ2FtZSB7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAuMmVtO1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XHJcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAuMmVtIDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLm5ldy1nYW1lIDpnbG9iYWwoc3ZnKSB7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDFlbTtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC4zZW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBgfVxyXG4gICAgICAgIDwvc3R5bGU+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvZHlcIj5cclxuICAgICAgICA8TmV4dEhlYWQ+XHJcbiAgICAgICAgICA8dGl0bGU+U3Vkb2t1IEV2b2x2ZWQ8L3RpdGxlPlxyXG4gICAgICAgICAgPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cImluaXRpYWwtc2NhbGU9MS4wLCB3aWR0aD1kZXZpY2Utd2lkdGhcIiAvPlxyXG4gICAgICAgICAgPG1ldGEgbmFtZT1cImRlc2NyaXB0aW9uXCIgY29udGVudD17RGVzY3JpcHRpb259IC8+XHJcbiAgICAgICAgICA8bGluayBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVNwZWNpYWwrRWxpdGVcIiByZWw9XCJzdHlsZXNoZWV0XCIgLz5cclxuICAgICAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dXJsXCIgY29udGVudD1cImh0dHBzOi8vc3Vkb2t1LnNpdGlhbmxpdS5jb20vXCIgLz5cclxuICAgICAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dGl0bGVcIiBjb250ZW50PVwiU3Vkb2t1IEV2b2x2ZWRcIiAvPlxyXG4gICAgICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzp0eXBlXCIgY29udGVudD1cIndlYnNpdGVcIiAvPlxyXG4gICAgICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzpkZXNjcmlwdGlvblwiIGNvbnRlbnQ9e0Rlc2NyaXB0aW9ufSAvPlxyXG4gICAgICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzppbWFnZVwiIGNvbnRlbnQ9XCJodHRwczovL3N1ZG9rdS5zaXRpYW5saXUuY29tL3N0YXRpYy9vZy1pbWFnZS5wbmdcIiAvPlxyXG4gICAgICAgIDwvTmV4dEhlYWQ+XHJcbiAgICAgICAgeyFib2FyZCAmJiB0aGlzLnJlbmRlckdlbmVyYXRpb25VSSgpfVxyXG4gICAgICAgIHtib2FyZCAmJiB0aGlzLnJlbmRlckhlYWRlcigpfVxyXG4gICAgICAgIHtib2FyZCAmJiB0aGlzLnJlbmRlclB1enpsZSgpfVxyXG4gICAgICAgIHtib2FyZCAmJiB0aGlzLnJlbmRlckNvbnRyb2xzKCl9XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb290ZXJcIj5cclxuICAgICAgICAgIE1hZGUgd2l0aCA8c3Bhbj7inaTvuI88L3NwYW4+77iPIEJ5IDxhIGhyZWY9XCJodHRwczovL3d3dy5zaXRpYW5saXUuY29tL1wiPlNpdGlhbiBMaXU8L2E+IHwgPGEgaHJlZj1cImh0dHBzOi8vbWVkaXVtLmNvbS9Ac2l0aWFubGl1XzU3NjgwL2J1aWxkaW5nLWEtc3Vkb2t1LWdhbWUtaW4tcmVhY3QtY2E2NjM5MTU3MTJcIj5CbG9nIFBvc3Q8L2E+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgeyAvKiBsYW5ndWFnZT1DU1MgKi8gfVxyXG4gICAgICAgIDxzdHlsZSBqc3g+e2BcclxuICAgICAgICAgICAgOmdsb2JhbChib2R5KSwgLmJvZHkge1xyXG4gICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6ICdTcGVjaWFsIEVsaXRlJywgY3Vyc2l2ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAuYm9keSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwdmg7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwdnc7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KSBhbmQgKG1pbi1oZWlnaHQ6IDkzMHB4KXtcclxuICAgICAgICAgICAgICAgIDpnbG9iYWwoLmhlYWRlciwgLnB1enpsZSwgLmNvbnRyb2xzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjVlbTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogODAwcHgpIGFuZCAobWluLXdpZHRoOiA2MDBweCl7XHJcbiAgICAgICAgICAgICAgICA6Z2xvYmFsKC5oZWFkZXIsIC5wdXp6bGUsIC5jb250cm9scykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4yZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQG1lZGlhIChtYXgtaGVpZ2h0OiA5MzBweCkgYW5kIChtaW4taGVpZ2h0OiA4MDBweCkgYW5kIChtaW4td2lkdGg6IDYwMHB4KXtcclxuICAgICAgICAgICAgICAgIDpnbG9iYWwoLmhlYWRlciwgLnB1enpsZSwgLmNvbnRyb2xzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjJlbTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBAbWVkaWEgKG1heC1oZWlnaHQ6IDgwMHB4KSBhbmQgKG1pbi1oZWlnaHQ6IDYwMHB4KSBhbmQgKG1pbi13aWR0aDogMzcwcHgpe1xyXG4gICAgICAgICAgICAgICAgOmdsb2JhbCguaGVhZGVyLCAucHV6emxlLCAuY29udHJvbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDFlbTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogMzcwcHgpe1xyXG4gICAgICAgICAgICAgICAgOmdsb2JhbCguaGVhZGVyLCAucHV6emxlLCAuY29udHJvbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IC44ZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQG1lZGlhIChtYXgtaGVpZ2h0OiA2MDBweCl7XHJcbiAgICAgICAgICAgICAgICA6Z2xvYmFsKC5oZWFkZXIsIC5wdXp6bGUsIC5jb250cm9scykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogLjhlbTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6Z2xvYmFsKGJvZHkpIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAucm9vdGVyIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgICAgICAgICAgICAgIGJvdHRvbTogMDtcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogLjhlbTtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgYH1cclxuICAgICAgICA8L3N0eWxlPlxyXG4gICAgICAgIDxzdHlsZSBqc3ggZ2xvYmFsPntSYW5nZVN0eWxlfTwvc3R5bGU+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19 */\n/*@ sourceURL=pages\\index.js */');

// eslint-disable-next-line no-lone-blocks
PuzzleStyle.__hash = '3222785624';
PuzzleStyle.__scoped = '.puzzle.jsx-289000025{margin-top:.5em;width:' + cellWidth * 9 + 'em;cursor:pointer;box-shadow:0 3px 6px rgba(0,0,0,0.16),0 3px 6px rgba(0,0,0,0.23);}.row.jsx-289000025{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex:0;-ms-flex:0;flex:0;width:' + cellWidth * 9 + 'em;}.row.jsx-289000025:not(:last-child){border-bottom:1px solid black;}.row.jsx-289000025:nth-child(3n+3):not(:last-child){border-bottom:2px solid black !important;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */';
PuzzleStyle.__scopedHash = '289000025';
{/* language=CSS */}
var CirculuarProgressStyle = new String('.circular-progress{display:block;width:100%;position:absolute;top:0;left:0;-webkit-transition:filter .4s ease-in-out;transition:filter .4s ease-in-out;}.circle-bg{fill:none;stroke:#eee;stroke-width:3.8;}.circle{stroke:' + ControlNumberColor + ';-webkit-transition:stroke-dasharray .4s ease-in-out;transition:stroke-dasharray .4s ease-in-out;fill:none;stroke-width:2.8;stroke-linecap:round;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */');

CirculuarProgressStyle.__hash = '161869746';
CirculuarProgressStyle.__scoped = '.circular-progress.jsx-1880568691{display:block;width:100%;position:absolute;top:0;left:0;-webkit-transition:filter .4s ease-in-out;transition:filter .4s ease-in-out;}.circle-bg.jsx-1880568691{fill:none;stroke:#eee;stroke-width:3.8;}.circle.jsx-1880568691{stroke:' + ControlNumberColor + ';-webkit-transition:stroke-dasharray .4s ease-in-out;transition:stroke-dasharray .4s ease-in-out;fill:none;stroke-width:2.8;stroke-linecap:round;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */';
CirculuarProgressStyle.__scopedHash = '1880568691';
var CircularPathD = 'M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831';

function getBackGroundColor(_ref) {
  var conflict = _ref.conflict,
      isPeer = _ref.isPeer,
      sameValue = _ref.sameValue,
      isSelected = _ref.isSelected;

  if (conflict && isPeer && sameValue) {
    return DeepOrange200;
  } else if (sameValue) {
    return LightBlue300;
  } else if (isSelected) {
    return LightBlue200;
  } else if (isPeer) {
    return LightBlue100;
  }
  return false;
}

function getFontColor(_ref2) {
  var value = _ref2.value,
      conflict = _ref2.conflict,
      prefilled = _ref2.prefilled;

  if (conflict && !prefilled) {
    return DeepOrange600;
  } else if (!prefilled && value) {
    return ControlNumberColor;
  }
  return false;
}

var GenerationUI = function (_Component) {
  _inherits(GenerationUI, _Component);

  function GenerationUI(props) {
    _classCallCheck(this, GenerationUI);

    var _this = _possibleConstructorReturn(this, (GenerationUI.__proto__ || Object.getPrototypeOf(GenerationUI)).call(this, props));

    _this.generateGame = function () {
      _this.props.generateGame(_this.state.value);
    };

    _this.state = { value: 30 };
    return _this;
  }

  _createClass(GenerationUI, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-886648584' + ' ' + 'generation',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 217
          }
        },
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          {
            className: 'jsx-886648584' + ' ' + 'copy',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 218
            }
          },
          'Start with ',
          this.state.value,
          ' cells prefilled'
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_6_react_input_range___default.a, {
          maxValue: 81,
          minValue: 17,
          value: this.state.value,
          onChange: function onChange(value) {
            return _this2.setState({ value: value });
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 219
          }
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          { onClick: this.generateGame, className: 'jsx-886648584' + ' ' + 'button',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 225
            }
          },
          'Play Sudoku'
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: '886648584',
          css: '.copy.jsx-886648584{text-align:center;font-size:1.3em;margin-bottom:.5em;}.generation.jsx-886648584{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.input-range{width:80%;max-width:500px;}.button.jsx-886648584{margin-top:.5em;border-radius:.25em;cursor:pointer;font-weight:bold;text-decoration:none;color:#fff;position:relative;display:inline-block;-webkit-transition:all .25s;transition:all .25s;padding:5px 10px;font-size:1.4em;}.button.jsx-886648584:active{-webkit-transform:translate(0px,5px);-ms-transform:translate(0px,5px);transform:translate(0px,5px);box-shadow:0 1px 0 0;}.button.jsx-886648584{background-color:' + __WEBPACK_IMPORTED_MODULE_9__colors__["a" /* backGroundBlue */] + ';box-shadow:0 2px 4px 0 ' + __WEBPACK_IMPORTED_MODULE_5_color___default()(__WEBPACK_IMPORTED_MODULE_9__colors__["a" /* backGroundBlue */]).darken(0.5).hsl().string() + ';display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.button.jsx-886648584:hover{background-color:' + __WEBPACK_IMPORTED_MODULE_5_color___default()(__WEBPACK_IMPORTED_MODULE_9__colors__["a" /* backGroundBlue */]).lighten(0.2).hsl().string() + ';}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2VzXFxpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrT29CLEFBR21DLEFBS0wsQUFPSCxBQUlJLEFBYWMsQUFLZ0IsQUFPQSxVQTVCNUIsTUFJRSxFQWhCRixRQWFwQixRQVp1QixFQWdCTixVQWlCcUMsQUFPdEQsS0F2Qm1CLEVBaEJuQixlQWlCdUIsTUFkSSxlQWVkLFNBZUUsQ0FOUSxDQVJILGtCQUNHLEVBUXZCLG1CQVBzQixpQ0FhRCxDQTlCSyxjQWtCUCxpQkFDRCxnQkFDbEIsK0JBbkJlLFdBQ1EsR0E2QnZCLDBGQTVCQSIsImZpbGUiOiJwYWdlc1xcaW5kZXguanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvRGFuaWVsL0Rlc2t0b3AvQ3VycmVudCBDbGFzc2VzL1NlbmlvciBEZXNpZ24vUHJvamVjdC9NZWRpdW0gUG9zdCBzcmMvcmVhY3Qtc3Vkb2t1LWdhbWUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9hY2Nlc3NpYmxlLWVtb2ppICovXHJcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFNldCwgTGlzdCwgZnJvbUpTIH0gZnJvbSAnaW1tdXRhYmxlJztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IE5leHRIZWFkIGZyb20gJ25leHQvaGVhZCc7XHJcbmltcG9ydCBDb2xvciBmcm9tICdjb2xvcic7XHJcbmltcG9ydCBJbnB1dFJhbmdlIGZyb20gJ3JlYWN0LWlucHV0LXJhbmdlJztcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcclxuaW1wb3J0IGNzcyBmcm9tICdzdHlsZWQtanN4L2Nzcyc7XHJcblxyXG5pbXBvcnQgUmFuZ2VTdHlsZSBmcm9tICcuLi9pbnB1dC1yYW5nZS1zdHlsZSc7XHJcbmltcG9ydCBMb3VwZUljb24gZnJvbSAnLi4vc3ZnL2xvdXBlLnN2Zyc7XHJcbmltcG9ydCBSZW1vdmVJY29uIGZyb20gJy4uL3N2Zy9yZW1vdmUuc3ZnJztcclxuaW1wb3J0IFJlbG9hZEljb24gZnJvbSAnLi4vc3ZnL3JlbG9hZC5zdmcnO1xyXG5pbXBvcnQgUmV0dXJuSWNvbiBmcm9tICcuLi9zdmcvcmV0dXJuLnN2Zyc7XHJcblxyXG5pbXBvcnQgeyBtYWtlUHV6emxlLCBwbHVjaywgaXNQZWVyIGFzIGFyZUNvb3JkaW5hdGVQZWVycywgcmFuZ2UgfSBmcm9tICcuLi9zdWRva3UnO1xyXG5pbXBvcnQgeyBiYWNrR3JvdW5kQmx1ZSB9IGZyb20gJy4uL2NvbG9ycyc7XHJcbmltcG9ydCBUaXAgZnJvbSAnLi4vY29tcG9uZW50cy90b29sLXRpcCc7XHJcblxyXG5cclxuY29uc3QgRGVzY3JpcHRpb24gPSAnRGlzY292ZXIgdGhlIG5leHQgZXZvbHV0aW9uIG9mIFN1ZG9rdSB3aXRoIGFtYXppbmcgZ3JhcGhpY3MsIGFuaW1hdGlvbnMsIGFuZCB1c2VyLWZyaWVuZGx5IGZlYXR1cmVzLiBFbmpveSBhIFN1ZG9rdSBleHBlcmllbmNlIGxpa2UgeW91IG5ldmVyIGhhdmUgYmVmb3JlIHdpdGggY3VzdG9taXphYmxlIGdhbWUgZ2VuZXJhdGlvbiwgY2VsbCBoaWdobGlnaHRpbmcsIGludHVpdGl2ZSBjb250cm9scyBhbmQgbW9yZSEnO1xyXG5jb25zdCBjZWxsV2lkdGggPSAyLjU7XHJcblxyXG5jb25zdCBMaWdodEJsdWUxMDAgPSAnI0IzRTVGQyc7XHJcbmNvbnN0IExpZ2h0Qmx1ZTIwMCA9ICcjODFENEZBJztcclxuY29uc3QgTGlnaHRCbHVlMzAwID0gJyM0RkMzRjcnO1xyXG5jb25zdCBJbmRpZ283MDAgPSAnIzMwM0Y5Ric7XHJcbmNvbnN0IERlZXBPcmFuZ2UyMDAgPSAnI0ZGQUI5MSc7XHJcbmNvbnN0IERlZXBPcmFuZ2U2MDAgPSAnI0Y0NTExRSc7XHJcbmNvbnN0IENvbnRyb2xOdW1iZXJDb2xvciA9IEluZGlnbzcwMDtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xyXG57IC8qIGxhbmd1YWdlPUNTUyAqLyB9XHJcbmNvbnN0IENlbGxTdHlsZSA9IGNzc2BcclxuLmNlbGwge1xyXG4gICAgaGVpZ2h0OiAke2NlbGxXaWR0aH1lbTtcclxuICAgIHdpZHRoOiAke2NlbGxXaWR0aH1lbTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBmb250LXNpemU6IDEuMWVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIC4zcyBlYXNlLWluLW91dDtcclxufVxyXG4uY2VsbDpudGgtY2hpbGQoM24rMyk6bm90KDpsYXN0LWNoaWxkKSB7XHJcbiAgICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCBibGFjaztcclxufVxyXG4uY2VsbDpub3QoOmxhc3QtY2hpbGQpIHtcclxuICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIGJsYWNrO1xyXG59XHJcbi5ub3RlLW51bWJlciB7XHJcbiAgICBmb250LXNpemU6IC42ZW07XHJcbiAgICB3aWR0aDogMzMlO1xyXG4gICAgaGVpZ2h0OiAzMyU7XHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxufVxyXG5gO1xyXG5cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXHJcbnsgLyogbGFuZ3VhZ2U9Q1NTICovIH1cclxuY29uc3QgQWN0aW9uc1N0eWxlID0gY3NzYFxyXG4uYWN0aW9ucyB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgIG1hcmdpbi10b3A6IC41ZW07XHJcbiAgICBwYWRkaW5nOiAwIC42ZW07XHJcbn1cclxuLmFjdGlvbiB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbn1cclxuLmFjdGlvbiA6Z2xvYmFsKHN2Zykge1xyXG4gICAgd2lkdGg6IDIuNWVtO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogLjJlbTtcclxufVxyXG4ucmVkbyA6Z2xvYmFsKHN2Zykge1xyXG4gICAgdHJhbnNmb3JtOiBzY2FsZVgoLTEpO1xyXG59XHJcbmA7XHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcclxueyAvKiBsYW5ndWFnZT1DU1MgKi8gfVxyXG5jb25zdCBDb250cm9sU3R5bGUgPSBjc3NgXHJcbi5jb250cm9sIHtcclxuICAgIHBhZGRpbmc6IDAgMmVtO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZmxleC13cmFwOiB3cmFwO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBmb250LWZhbWlseTogJ1NwZWNpYWwgRWxpdGUnLCBjdXJzaXZlO1xyXG4gICAgdHJhbnNpdGlvbjogZmlsdGVyIC41cyBlYXNlLWluLW91dDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcbmA7XHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcclxueyAvKiBsYW5ndWFnZT1DU1MgKi8gfVxyXG5jb25zdCBOdW1iZXJDb250cm9sU3R5bGUgPSBjc3NgXHJcbi5udW1iZXIge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGZvbnQtc2l6ZTogMmVtO1xyXG4gICAgbWFyZ2luOiAuMWVtO1xyXG4gICAgd2lkdGg6IDEuNWVtO1xyXG4gICAgaGVpZ2h0OiAxLjVlbTtcclxuICAgIGNvbG9yOiAke0NvbnRyb2xOdW1iZXJDb2xvcn07XHJcbiAgICBib3gtc2hhZG93OiAwIDFweCAycHggcmdiYSgwLDAsMCwwLjE2KSwgMCAxcHggMnB4IHJnYmEoMCwwLDAsMC4yMyk7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbn1cclxuLm51bWJlciA+IGRpdiB7XHJcbiAgICBtYXJnaW4tdG9wOiAuM2VtO1xyXG59XHJcbmA7XHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcclxueyAvKiBsYW5ndWFnZT1DU1MgKi8gfVxyXG5jb25zdCBQdXp6bGVTdHlsZSA9IGNzc2BcclxuLnB1enpsZSB7XHJcbiAgICBtYXJnaW4tdG9wOiAuNWVtO1xyXG4gICAgd2lkdGg6ICR7Y2VsbFdpZHRoICogOX1lbTtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIGJveC1zaGFkb3c6IDAgM3B4IDZweCByZ2JhKDAsMCwwLDAuMTYpLCAwIDNweCA2cHggcmdiYSgwLDAsMCwwLjIzKTtcclxufVxyXG4ucm93IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZmxleDogMDtcclxuICAgIHdpZHRoOiAke2NlbGxXaWR0aCAqIDl9ZW07XHJcbn1cclxuLnJvdzpub3QoOmxhc3QtY2hpbGQpIHtcclxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBibGFjaztcclxufVxyXG4ucm93Om50aC1jaGlsZCgzbiszKTpub3QoOmxhc3QtY2hpbGQpIHtcclxuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCBibGFjayAhaW1wb3J0YW50O1xyXG59XHJcbmA7XHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcclxueyAvKiBsYW5ndWFnZT1DU1MgKi8gfVxyXG5jb25zdCBDaXJjdWx1YXJQcm9ncmVzc1N0eWxlID0gY3NzYFxyXG4uY2lyY3VsYXItcHJvZ3Jlc3Mge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICB0cmFuc2l0aW9uOiBmaWx0ZXIgLjRzIGVhc2UtaW4tb3V0O1xyXG59XHJcblxyXG4uY2lyY2xlLWJnIHtcclxuICAgIGZpbGw6IG5vbmU7XHJcbiAgICBzdHJva2U6ICNlZWU7XHJcbiAgICBzdHJva2Utd2lkdGg6IDMuODtcclxufVxyXG5cclxuLmNpcmNsZSB7XHJcbiAgICBzdHJva2U6ICR7Q29udHJvbE51bWJlckNvbG9yfTtcclxuICAgIHRyYW5zaXRpb246IHN0cm9rZS1kYXNoYXJyYXkgLjRzIGVhc2UtaW4tb3V0O1xyXG4gICAgZmlsbDogbm9uZTtcclxuICAgIHN0cm9rZS13aWR0aDogMi44O1xyXG4gICAgc3Ryb2tlLWxpbmVjYXA6IHJvdW5kO1xyXG59XHJcbmA7XHJcblxyXG5jb25zdCBDaXJjdWxhclBhdGhEID0gJ00xOCAyLjA4NDUgYSAxNS45MTU1IDE1LjkxNTUgMCAwIDEgMCAzMS44MzEgYSAxNS45MTU1IDE1LjkxNTUgMCAwIDEgMCAtMzEuODMxJztcclxuXHJcbmZ1bmN0aW9uIGdldEJhY2tHcm91bmRDb2xvcih7XHJcbiAgY29uZmxpY3QsIGlzUGVlciwgc2FtZVZhbHVlLCBpc1NlbGVjdGVkLFxyXG59KSB7XHJcbiAgaWYgKGNvbmZsaWN0ICYmIGlzUGVlciAmJiBzYW1lVmFsdWUpIHtcclxuICAgIHJldHVybiBEZWVwT3JhbmdlMjAwO1xyXG4gIH0gZWxzZSBpZiAoc2FtZVZhbHVlKSB7XHJcbiAgICByZXR1cm4gTGlnaHRCbHVlMzAwO1xyXG4gIH0gZWxzZSBpZiAoaXNTZWxlY3RlZCkge1xyXG4gICAgcmV0dXJuIExpZ2h0Qmx1ZTIwMDtcclxuICB9IGVsc2UgaWYgKGlzUGVlcikge1xyXG4gICAgcmV0dXJuIExpZ2h0Qmx1ZTEwMDtcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRGb250Q29sb3IoeyB2YWx1ZSwgY29uZmxpY3QsIHByZWZpbGxlZCB9KSB7XHJcbiAgaWYgKGNvbmZsaWN0ICYmICFwcmVmaWxsZWQpIHtcclxuICAgIHJldHVybiBEZWVwT3JhbmdlNjAwO1xyXG4gIH0gZWxzZSBpZiAoIXByZWZpbGxlZCAmJiB2YWx1ZSkge1xyXG4gICAgcmV0dXJuIENvbnRyb2xOdW1iZXJDb2xvcjtcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5jbGFzcyBHZW5lcmF0aW9uVUkgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgdGhpcy5zdGF0ZSA9IHsgdmFsdWU6IDMwIH07XHJcbiAgfVxyXG5cclxuICBnZW5lcmF0ZUdhbWUgPSAoKSA9PiB7XHJcbiAgICB0aGlzLnByb3BzLmdlbmVyYXRlR2FtZSh0aGlzLnN0YXRlLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2VuZXJhdGlvblwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29weVwiPlN0YXJ0IHdpdGgge3RoaXMuc3RhdGUudmFsdWV9IGNlbGxzIHByZWZpbGxlZDwvZGl2PlxyXG4gICAgICAgIDxJbnB1dFJhbmdlXHJcbiAgICAgICAgICBtYXhWYWx1ZT17ODF9XHJcbiAgICAgICAgICBtaW5WYWx1ZT17MTd9XHJcbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS52YWx1ZX1cclxuICAgICAgICAgIG9uQ2hhbmdlPXt2YWx1ZSA9PiB0aGlzLnNldFN0YXRlKHsgdmFsdWUgfSl9XHJcbiAgICAgICAgLz5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dHRvblwiIG9uQ2xpY2s9e3RoaXMuZ2VuZXJhdGVHYW1lfT5QbGF5IFN1ZG9rdTwvZGl2PlxyXG4gICAgICAgIHsgLyogbGFuZ3VhZ2U9Q1NTICovIH1cclxuICAgICAgICA8c3R5bGUganN4PntgXHJcbiAgICAgICAgICAgIC5jb3B5IHtcclxuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4zZW07XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAuNWVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC5nZW5lcmF0aW9uIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgOmdsb2JhbCguaW5wdXQtcmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA4MCU7XHJcbiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDUwMHB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC5idXR0b24ge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IC41ZW07XHJcbiAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogLjI1ZW07XHJcbiAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgICAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAuMjVzO1xyXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xyXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS40ZW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLmJ1dHRvbjphY3RpdmUge1xyXG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgNXB4KTtcclxuICAgICAgICAgICAgICBib3gtc2hhZG93OiAwIDFweCAwIDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC5idXR0b24ge1xyXG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7YmFja0dyb3VuZEJsdWV9O1xyXG4gICAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCAwICR7Q29sb3IoYmFja0dyb3VuZEJsdWUpLmRhcmtlbigwLjUpLmhzbCgpLnN0cmluZygpfTtcclxuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC5idXR0b246aG92ZXIge1xyXG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Q29sb3IoYmFja0dyb3VuZEJsdWUpLmxpZ2h0ZW4oMC4yKS5oc2woKS5zdHJpbmcoKX07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBgfVxyXG4gICAgICAgIDwvc3R5bGU+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbkdlbmVyYXRpb25VSS5wcm9wVHlwZXMgPSB7XHJcbiAgZ2VuZXJhdGVHYW1lOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG59O1xyXG5cclxuY29uc3QgTnVtYmVyQ29udHJvbCA9ICh7IG51bWJlciwgb25DbGljaywgY29tcGxldGlvblBlcmNlbnRhZ2UgfSkgPT4gKFxyXG4gIDxkaXZcclxuICAgIGtleT17bnVtYmVyfVxyXG4gICAgY2xhc3NOYW1lPVwibnVtYmVyXCJcclxuICAgIG9uQ2xpY2s9e29uQ2xpY2t9XHJcbiAgPlxyXG4gICAgPGRpdj57bnVtYmVyfTwvZGl2PlxyXG4gICAgPENpcmNsdWxhclByb2dyZXNzIHBlcmNlbnQ9e2NvbXBsZXRpb25QZXJjZW50YWdlfSAvPlxyXG4gICAgPHN0eWxlIGpzeD57TnVtYmVyQ29udHJvbFN0eWxlfTwvc3R5bGU+XHJcbiAgPC9kaXY+XHJcbik7XHJcblxyXG5OdW1iZXJDb250cm9sLnByb3BUeXBlcyA9IHtcclxuICBudW1iZXI6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcclxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcclxuICBjb21wbGV0aW9uUGVyY2VudGFnZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxyXG59O1xyXG5cclxuTnVtYmVyQ29udHJvbC5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgb25DbGljazogbnVsbCxcclxufTtcclxuXHJcbmNvbnN0IENlbGwgPSAocHJvcHMpID0+IHtcclxuICBjb25zdCB7XHJcbiAgICB2YWx1ZSwgb25DbGljaywgaXNQZWVyLCBpc1NlbGVjdGVkLCBzYW1lVmFsdWUsIHByZWZpbGxlZCwgbm90ZXMsIGNvbmZsaWN0LFxyXG4gIH0gPSBwcm9wcztcclxuICBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBnZXRCYWNrR3JvdW5kQ29sb3Ioe1xyXG4gICAgY29uZmxpY3QsIGlzUGVlciwgc2FtZVZhbHVlLCBpc1NlbGVjdGVkLFxyXG4gIH0pO1xyXG4gIGNvbnN0IGZvbnRDb2xvciA9IGdldEZvbnRDb2xvcih7IGNvbmZsaWN0LCBwcmVmaWxsZWQsIHZhbHVlIH0pO1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNlbGxcIiBvbkNsaWNrPXtvbkNsaWNrfT5cclxuICAgICAge1xyXG4gICAgICAgIG5vdGVzID9cclxuICAgICAgICAgIHJhbmdlKDkpLm1hcChpID0+XHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICA8ZGl2IGtleT17aX0gY2xhc3NOYW1lPVwibm90ZS1udW1iZXJcIj5cclxuICAgICAgICAgICAgICAgIHtub3Rlcy5oYXMoaSArIDEpICYmIChpICsgMSl9XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICkpIDpcclxuICAgICAgICAgIHZhbHVlICYmIHZhbHVlXHJcbiAgICAgIH1cclxuICAgICAgey8qIGxhbmd1YWdlPUNTUyAqL31cclxuICAgICAgPHN0eWxlIGpzeD57Q2VsbFN0eWxlfTwvc3R5bGU+XHJcbiAgICAgIDxzdHlsZSBqc3g+e2BcclxuICAgICAgICAgICAgICAgIC5jZWxsIHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2JhY2tncm91bmRDb2xvciB8fCAnaW5pdGlhbCd9O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke2ZvbnRDb2xvciB8fCAnaW5pdGlhbCd9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBgfVxyXG4gICAgICA8L3N0eWxlPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbkNlbGwucHJvcFR5cGVzID0ge1xyXG4gIC8vIGN1cnJlbnQgbnVtYmVyIHZhbHVlXHJcbiAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIsXHJcbiAgLy8gY2VsbCBjbGljayBoYW5kbGVyXHJcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAvLyBpZiB0aGUgY2VsbCBpcyBhIHBlZXIgb2YgdGhlIHNlbGVjdGVkIGNlbGxcclxuICBpc1BlZXI6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXHJcbiAgLy8gaWYgdGhlIGNlbGwgaXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXJcclxuICBpc1NlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxyXG4gIC8vIGN1cnJlbnQgY2VsbCBoYXMgdGhlIHNhbWUgdmFsdWUgaWYgdGhlIHVzZXIgc2VsZWN0ZWQgY2VsbFxyXG4gIHNhbWVWYWx1ZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcclxuICAvLyBpZiB0aGlzIHdhcyBwcmVmaWxsZWQgYXMgYSBwYXJ0IG9mIHRoZSBwdXp6bGVcclxuICBwcmVmaWxsZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXHJcbiAgLy8gY3VycmVudCBub3RlcyB0YWtlbiBvbiB0aGUgY2VsbFxyXG4gIG5vdGVzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihTZXQpLFxyXG4gIC8vIGlmIHRoZSBjdXJyZW50IGNlbGwgZG9lcyBub3Qgc2F0aXNmeSB0aGUgZ2FtZSBjb25zdHJhaW50XHJcbiAgY29uZmxpY3Q6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXHJcbn07XHJcblxyXG5DZWxsLmRlZmF1bHRQcm9wcyA9IHtcclxuICBub3RlczogbnVsbCxcclxuICB2YWx1ZTogbnVsbCxcclxufTtcclxuXHJcbmNvbnN0IENpcmNsdWxhclByb2dyZXNzID0gKHsgcGVyY2VudCB9KSA9PiAoXHJcbiAgPHN2ZyB2aWV3Qm94PVwiMCAwIDM2IDM2XCIgY2xhc3NOYW1lPVwiY2lyY3VsYXItcHJvZ3Jlc3NcIj5cclxuICAgIDxwYXRoXHJcbiAgICAgIGNsYXNzTmFtZT1cImNpcmNsZS1iZ1wiXHJcbiAgICAgIGQ9e0NpcmN1bGFyUGF0aER9XHJcbiAgICAvPlxyXG4gICAgPHBhdGhcclxuICAgICAgY2xhc3NOYW1lPVwiY2lyY2xlXCJcclxuICAgICAgc3Ryb2tlRGFzaGFycmF5PXtgJHtwZXJjZW50ICogMTAwfSwgMTAwYH1cclxuICAgICAgZD17Q2lyY3VsYXJQYXRoRH1cclxuICAgIC8+XHJcbiAgICB7IC8qIGxhbmd1YWdlPUNTUyAqLyB9XHJcbiAgICA8c3R5bGUganN4PntDaXJjdWx1YXJQcm9ncmVzc1N0eWxlfTwvc3R5bGU+XHJcbiAgPC9zdmc+XHJcbik7XHJcblxyXG5DaXJjbHVsYXJQcm9ncmVzcy5wcm9wVHlwZXMgPSB7XHJcbiAgcGVyY2VudDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2V0Q2xpY2tIYW5kbGVyKG9uQ2xpY2ssIG9uRG91YmxlQ2xpY2ssIGRlbGF5ID0gMjUwKSB7XHJcbiAgbGV0IHRpbWVvdXRJRCA9IG51bGw7XHJcbiAgcmV0dXJuIChldmVudCkgPT4ge1xyXG4gICAgaWYgKCF0aW1lb3V0SUQpIHtcclxuICAgICAgdGltZW91dElEID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgb25DbGljayhldmVudCk7XHJcbiAgICAgICAgdGltZW91dElEID0gbnVsbDtcclxuICAgICAgfSwgZGVsYXkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGltZW91dElEID0gY2xlYXJUaW1lb3V0KHRpbWVvdXRJRCk7XHJcbiAgICAgIG9uRG91YmxlQ2xpY2soZXZlbnQpO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBtYWtlIHNpemUgOSBhcnJheSBvZiAwc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9XHJcbiAqL1xyXG5mdW5jdGlvbiBtYWtlQ291bnRPYmplY3QoKSB7XHJcbiAgY29uc3QgY291bnRPYmogPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpICs9IDEpIGNvdW50T2JqLnB1c2goMCk7XHJcbiAgcmV0dXJuIGNvdW50T2JqO1xyXG59XHJcblxyXG4vKipcclxuICogZ2l2ZW4gYSAyRCBhcnJheSBvZiBudW1iZXJzIGFzIHRoZSBpbml0aWFsIHB1enpsZSwgZ2VuZXJhdGUgdGhlIGluaXRpYWwgZ2FtZSBzdGF0ZVxyXG4gKiBAcGFyYW0gcHV6emxlXHJcbiAqIEByZXR1cm5zIHthbnl9XHJcbiAqL1xyXG5mdW5jdGlvbiBtYWtlQm9hcmQoeyBwdXp6bGUgfSkge1xyXG4gIC8vIGNyZWF0ZSBpbml0aWFsIGNvdW50IG9iamVjdCB0byBrZWVwIHRyYWNrIG9mIGNvbmZsaWN0cyBwZXIgbnVtYmVyIHZhbHVlXHJcbiAgY29uc3Qgcm93cyA9IEFycmF5LmZyb20oQXJyYXkoOSkua2V5cygpKS5tYXAoKCkgPT4gbWFrZUNvdW50T2JqZWN0KCkpO1xyXG4gIGNvbnN0IGNvbHVtbnMgPSBBcnJheS5mcm9tKEFycmF5KDkpLmtleXMoKSkubWFwKCgpID0+IG1ha2VDb3VudE9iamVjdCgpKTtcclxuICBjb25zdCBzcXVhcmVzID0gQXJyYXkuZnJvbShBcnJheSg5KS5rZXlzKCkpLm1hcCgoKSA9PiBtYWtlQ291bnRPYmplY3QoKSk7XHJcbiAgY29uc3QgcmVzdWx0ID0gcHV6emxlLm1hcCgocm93LCBpKSA9PiAoXHJcbiAgICByb3cubWFwKChjZWxsLCBqKSA9PiB7XHJcbiAgICAgIGlmIChjZWxsKSB7XHJcbiAgICAgICAgcm93c1tpXVtjZWxsXSArPSAxO1xyXG4gICAgICAgIGNvbHVtbnNbal1bY2VsbF0gKz0gMTtcclxuICAgICAgICBzcXVhcmVzWygoTWF0aC5mbG9vcihpIC8gMykpICogMykgKyBNYXRoLmZsb29yKGogLyAzKV1bY2VsbF0gKz0gMTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbHVlOiBwdXp6bGVbaV1bal0gPiAwID8gcHV6emxlW2ldW2pdIDogbnVsbCxcclxuICAgICAgICBwcmVmaWxsZWQ6ICEhcHV6emxlW2ldW2pdLFxyXG4gICAgICB9O1xyXG4gICAgfSlcclxuICApKTtcclxuICByZXR1cm4gZnJvbUpTKHsgcHV6emxlOiByZXN1bHQsIHNlbGVjdGVkOiBmYWxzZSwgY2hvaWNlczogeyByb3dzLCBjb2x1bW5zLCBzcXVhcmVzIH0gfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBnaXZlIHRoZSBjb29yZGluYXRlIHVwZGF0ZSB0aGUgY3VycmVudCBib2FyZCB3aXRoIGEgbnVtYmVyIGNob2ljZVxyXG4gKiBAcGFyYW0geFxyXG4gKiBAcGFyYW0geVxyXG4gKiBAcGFyYW0gbnVtYmVyXHJcbiAqIEBwYXJhbSBmaWxsIHdoZXRoZXIgdG8gc2V0IG9yIHVuc2V0XHJcbiAqIEBwYXJhbSBib2FyZCB0aGUgaW1tdXRhYmxlIGJvYXJkIGdpdmVuIHRvIGNoYW5nZVxyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlQm9hcmRXaXRoTnVtYmVyKHtcclxuICB4LCB5LCBudW1iZXIsIGZpbGwgPSB0cnVlLCBib2FyZCxcclxufSkge1xyXG4gIGxldCBjZWxsID0gYm9hcmQuZ2V0KCdwdXp6bGUnKS5nZXRJbihbeCwgeV0pO1xyXG4gIC8vIGRlbGV0ZSBpdHMgbm90ZXNcclxuICBjZWxsID0gY2VsbC5kZWxldGUoJ25vdGVzJyk7XHJcbiAgLy8gc2V0IG9yIHVuc2V0IGl0cyB2YWx1ZSBkZXBlbmRpbmcgb24gYGZpbGxgXHJcbiAgY2VsbCA9IGZpbGwgPyBjZWxsLnNldCgndmFsdWUnLCBudW1iZXIpIDogY2VsbC5kZWxldGUoJ3ZhbHVlJyk7XHJcbiAgY29uc3QgaW5jcmVtZW50ID0gZmlsbCA/IDEgOiAtMTtcclxuICAvLyB1cGRhdGUgdGhlIGN1cnJlbnQgZ3JvdXAgY2hvaWNlc1xyXG4gIGNvbnN0IHJvd1BhdGggPSBbJ2Nob2ljZXMnLCAncm93cycsIHgsIG51bWJlcl07XHJcbiAgY29uc3QgY29sdW1uUGF0aCA9IFsnY2hvaWNlcycsICdjb2x1bW5zJywgeSwgbnVtYmVyXTtcclxuICBjb25zdCBzcXVhcmVQYXRoID0gWydjaG9pY2VzJywgJ3NxdWFyZXMnLFxyXG4gICAgKChNYXRoLmZsb29yKHggLyAzKSkgKiAzKSArIE1hdGguZmxvb3IoeSAvIDMpLCBudW1iZXJdO1xyXG4gIHJldHVybiBib2FyZC5zZXRJbihyb3dQYXRoLCBib2FyZC5nZXRJbihyb3dQYXRoKSArIGluY3JlbWVudClcclxuICAgIC5zZXRJbihjb2x1bW5QYXRoLCBib2FyZC5nZXRJbihjb2x1bW5QYXRoKSArIGluY3JlbWVudClcclxuICAgIC5zZXRJbihzcXVhcmVQYXRoLCBib2FyZC5nZXRJbihzcXVhcmVQYXRoKSArIGluY3JlbWVudClcclxuICAgIC5zZXRJbihbJ3B1enpsZScsIHgsIHldLCBjZWxsKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TnVtYmVyT2ZHcm91cHNBc3NpZ25lZEZvck51bWJlcihudW1iZXIsIGdyb3Vwcykge1xyXG4gIHJldHVybiBncm91cHMucmVkdWNlKChhY2N1bXVsYXRvciwgcm93KSA9PlxyXG4gICAgYWNjdW11bGF0b3IgKyAocm93LmdldChudW1iZXIpID4gMCA/IDEgOiAwKSwgMCk7XHJcbn1cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLW11bHRpLWNvbXBcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5kZXggZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIHN0YXRlID0ge307XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICBpZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcikge1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXJcclxuICAgICAgICAucmVnaXN0ZXIoJy9zZXJ2aWNlLXdvcmtlci5qcycpXHJcbiAgICAgICAgLnRoZW4oKHJlZykgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ1NlcnZpY2VXb3JrZXIgc2NvcGU6ICcsIHJlZy5zY29wZSk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnc2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uIHN1Y2Nlc3NmdWwnKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ3NlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbiBmYWlsZWQnLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGdldFNlbGVjdGVkQ2VsbCgpIHtcclxuICAgIGNvbnN0IHsgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCBzZWxlY3RlZCA9IGJvYXJkLmdldCgnc2VsZWN0ZWQnKTtcclxuICAgIHJldHVybiBzZWxlY3RlZCAmJiBib2FyZC5nZXQoJ3B1enpsZScpLmdldEluKFtzZWxlY3RlZC54LCBzZWxlY3RlZC55XSk7XHJcbiAgfVxyXG5cclxuICAvLyBnZXQgdGhlIG1pbiBiZXR3ZWVuIGl0cyBjb21wbGV0aW9uIGluIHJvd3MsIGNvbHVtbnMgYW5kIHNxdWFyZXMuXHJcbiAgZ2V0TnVtYmVyVmFsdWVDb3VudChudW1iZXIpIHtcclxuICAgIGNvbnN0IHJvd3MgPSB0aGlzLnN0YXRlLmJvYXJkLmdldEluKFsnY2hvaWNlcycsICdyb3dzJ10pO1xyXG4gICAgY29uc3QgY29sdW1ucyA9IHRoaXMuc3RhdGUuYm9hcmQuZ2V0SW4oWydjaG9pY2VzJywgJ2NvbHVtbnMnXSk7XHJcbiAgICBjb25zdCBzcXVhcmVzID0gdGhpcy5zdGF0ZS5ib2FyZC5nZXRJbihbJ2Nob2ljZXMnLCAnc3F1YXJlcyddKTtcclxuICAgIHJldHVybiBNYXRoLm1pbihcclxuICAgICAgZ2V0TnVtYmVyT2ZHcm91cHNBc3NpZ25lZEZvck51bWJlcihudW1iZXIsIHNxdWFyZXMpLFxyXG4gICAgICBNYXRoLm1pbihcclxuICAgICAgICBnZXROdW1iZXJPZkdyb3Vwc0Fzc2lnbmVkRm9yTnVtYmVyKG51bWJlciwgcm93cyksXHJcbiAgICAgICAgZ2V0TnVtYmVyT2ZHcm91cHNBc3NpZ25lZEZvck51bWJlcihudW1iZXIsIGNvbHVtbnMpLFxyXG4gICAgICApLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGdlbmVyYXRlR2FtZSA9IChmaW5hbENvdW50ID0gMjApID0+IHtcclxuICAgIC8vIGdldCBhIGZpbGxlZCBwdXp6bGUgZ2VuZXJhdGVkXHJcbiAgICBjb25zdCBzb2x1dGlvbiA9IG1ha2VQdXp6bGUoKTtcclxuICAgIC8vIHBsdWNrIHZhbHVlcyBmcm9tIGNlbGxzIHRvIGNyZWF0ZSB0aGUgZ2FtZVxyXG4gICAgY29uc3QgeyBwdXp6bGUgfSA9IHBsdWNrKHNvbHV0aW9uLCBmaW5hbENvdW50KTtcclxuICAgIC8vIGluaXRpYWxpemUgdGhlIGJvYXJkIHdpdGggY2hvaWNlIGNvdW50c1xyXG4gICAgY29uc3QgYm9hcmQgPSBtYWtlQm9hcmQoeyBwdXp6bGUgfSk7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgYm9hcmQsIGhpc3Rvcnk6IExpc3Qub2YoYm9hcmQpLCBoaXN0b3J5T2ZmU2V0OiAwLCBzb2x1dGlvbixcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkTnVtYmVyQXNOb3RlID0gKG51bWJlcikgPT4ge1xyXG4gICAgbGV0IHsgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBsZXQgc2VsZWN0ZWRDZWxsID0gdGhpcy5nZXRTZWxlY3RlZENlbGwoKTtcclxuICAgIGlmICghc2VsZWN0ZWRDZWxsKSByZXR1cm47XHJcbiAgICBjb25zdCBwcmVmaWxsZWQgPSBzZWxlY3RlZENlbGwuZ2V0KCdwcmVmaWxsZWQnKTtcclxuICAgIGlmIChwcmVmaWxsZWQpIHJldHVybjtcclxuICAgIGNvbnN0IHsgeCwgeSB9ID0gYm9hcmQuZ2V0KCdzZWxlY3RlZCcpO1xyXG4gICAgY29uc3QgY3VycmVudFZhbHVlID0gc2VsZWN0ZWRDZWxsLmdldCgndmFsdWUnKTtcclxuICAgIGlmIChjdXJyZW50VmFsdWUpIHtcclxuICAgICAgYm9hcmQgPSB1cGRhdGVCb2FyZFdpdGhOdW1iZXIoe1xyXG4gICAgICAgIHgsIHksIG51bWJlcjogY3VycmVudFZhbHVlLCBmaWxsOiBmYWxzZSwgYm9hcmQ6IHRoaXMuc3RhdGUuYm9hcmQsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbGV0IG5vdGVzID0gc2VsZWN0ZWRDZWxsLmdldCgnbm90ZXMnKSB8fCBTZXQoKTtcclxuICAgIGlmIChub3Rlcy5oYXMobnVtYmVyKSkge1xyXG4gICAgICBub3RlcyA9IG5vdGVzLmRlbGV0ZShudW1iZXIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbm90ZXMgPSBub3Rlcy5hZGQobnVtYmVyKTtcclxuICAgIH1cclxuICAgIHNlbGVjdGVkQ2VsbCA9IHNlbGVjdGVkQ2VsbC5zZXQoJ25vdGVzJywgbm90ZXMpO1xyXG4gICAgc2VsZWN0ZWRDZWxsID0gc2VsZWN0ZWRDZWxsLmRlbGV0ZSgndmFsdWUnKTtcclxuICAgIGJvYXJkID0gYm9hcmQuc2V0SW4oWydwdXp6bGUnLCB4LCB5XSwgc2VsZWN0ZWRDZWxsKTtcclxuICAgIHRoaXMudXBkYXRlQm9hcmQoYm9hcmQpO1xyXG4gIH07XHJcblxyXG4gIHVwZGF0ZUJvYXJkID0gKG5ld0JvYXJkKSA9PiB7XHJcbiAgICBsZXQgeyBoaXN0b3J5IH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3QgeyBoaXN0b3J5T2ZmU2V0IH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgLy8gYW55dGhpbmcgYmVmb3JlIGN1cnJlbnQgc3RlcCBpcyBzdGlsbCBpbiBoaXN0b3J5XHJcbiAgICBoaXN0b3J5ID0gaGlzdG9yeS5zbGljZSgwLCBoaXN0b3J5T2ZmU2V0ICsgMSk7XHJcbiAgICAvLyBhZGQgaXRzZWxmIG9udG8gdGhlIGhpc3RvcnlcclxuICAgIGhpc3RvcnkgPSBoaXN0b3J5LnB1c2gobmV3Qm9hcmQpO1xyXG4gICAgLy8gdXBkYXRlIHRoZSBnYW1lXHJcbiAgICB0aGlzLnNldFN0YXRlKHsgYm9hcmQ6IG5ld0JvYXJkLCBoaXN0b3J5LCBoaXN0b3J5T2ZmU2V0OiBoaXN0b3J5LnNpemUgLSAxIH0pO1xyXG4gIH07XHJcblxyXG4gIGNhblVuZG8gPSAoKSA9PiB0aGlzLnN0YXRlLmhpc3RvcnlPZmZTZXQgPiAwXHJcblxyXG4gIHJlZG8gPSAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGhpc3RvcnkgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBsZXQgeyBoaXN0b3J5T2ZmU2V0IH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgaWYgKGhpc3Rvcnkuc2l6ZSkge1xyXG4gICAgICBoaXN0b3J5T2ZmU2V0ID0gTWF0aC5taW4oaGlzdG9yeS5zaXplIC0gMSwgaGlzdG9yeU9mZlNldCArIDEpO1xyXG4gICAgICBjb25zdCBib2FyZCA9IGhpc3RvcnkuZ2V0KGhpc3RvcnlPZmZTZXQpO1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgYm9hcmQsIGhpc3RvcnlPZmZTZXQgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdW5kbyA9ICgpID0+IHtcclxuICAgIGNvbnN0IHsgaGlzdG9yeSB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGxldCB7IGhpc3RvcnlPZmZTZXQsIGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgaWYgKGhpc3Rvcnkuc2l6ZSkge1xyXG4gICAgICBoaXN0b3J5T2ZmU2V0ID0gTWF0aC5tYXgoMCwgaGlzdG9yeU9mZlNldCAtIDEpO1xyXG4gICAgICBib2FyZCA9IGhpc3RvcnkuZ2V0KGhpc3RvcnlPZmZTZXQpO1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgYm9hcmQsIGhpc3RvcnlPZmZTZXQsIGhpc3RvcnkgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgZXJhc2VTZWxlY3RlZCA9ICgpID0+IHtcclxuICAgIGNvbnN0IHNlbGVjdGVkQ2VsbCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XHJcbiAgICBpZiAoIXNlbGVjdGVkQ2VsbCkgcmV0dXJuO1xyXG4gICAgdGhpcy5maWxsTnVtYmVyKGZhbHNlKTtcclxuICB9XHJcblxyXG4gIGZpbGxTZWxlY3RlZFdpdGhTb2x1dGlvbiA9ICgpID0+IHtcclxuICAgIGNvbnN0IHsgYm9hcmQsIHNvbHV0aW9uIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3Qgc2VsZWN0ZWRDZWxsID0gdGhpcy5nZXRTZWxlY3RlZENlbGwoKTtcclxuICAgIGlmICghc2VsZWN0ZWRDZWxsKSByZXR1cm47XHJcbiAgICBjb25zdCB7IHgsIHkgfSA9IGJvYXJkLmdldCgnc2VsZWN0ZWQnKTtcclxuICAgIHRoaXMuZmlsbE51bWJlcihzb2x1dGlvblt4XVt5XSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gZmlsbCBjdXJyZW50bHkgc2VsZWN0ZWQgY2VsbCB3aXRoIG51bWJlclxyXG4gIGZpbGxOdW1iZXIgPSAobnVtYmVyKSA9PiB7XHJcbiAgICBsZXQgeyBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHNlbGVjdGVkQ2VsbCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XHJcbiAgICAvLyBuby1vcCBpZiBub3RoaW5nIGlzIHNlbGVjdGVkXHJcbiAgICBpZiAoIXNlbGVjdGVkQ2VsbCkgcmV0dXJuO1xyXG4gICAgY29uc3QgcHJlZmlsbGVkID0gc2VsZWN0ZWRDZWxsLmdldCgncHJlZmlsbGVkJyk7XHJcbiAgICAvLyBuby1vcCBpZiBpdCBpcyByZWZpbGxlZFxyXG4gICAgaWYgKHByZWZpbGxlZCkgcmV0dXJuO1xyXG4gICAgY29uc3QgeyB4LCB5IH0gPSBib2FyZC5nZXQoJ3NlbGVjdGVkJyk7XHJcbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBzZWxlY3RlZENlbGwuZ2V0KCd2YWx1ZScpO1xyXG4gICAgLy8gcmVtb3ZlIHRoZSBjdXJyZW50IHZhbHVlIGFuZCB1cGRhdGUgdGhlIGdhbWUgc3RhdGVcclxuICAgIGlmIChjdXJyZW50VmFsdWUpIHtcclxuICAgICAgYm9hcmQgPSB1cGRhdGVCb2FyZFdpdGhOdW1iZXIoe1xyXG4gICAgICAgIHgsIHksIG51bWJlcjogY3VycmVudFZhbHVlLCBmaWxsOiBmYWxzZSwgYm9hcmQ6IHRoaXMuc3RhdGUuYm9hcmQsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gdXBkYXRlIHRvIG5ldyBudW1iZXIgaWYgYW55XHJcbiAgICBjb25zdCBzZXROdW1iZXIgPSBjdXJyZW50VmFsdWUgIT09IG51bWJlciAmJiBudW1iZXI7XHJcbiAgICBpZiAoc2V0TnVtYmVyKSB7XHJcbiAgICAgIGJvYXJkID0gdXBkYXRlQm9hcmRXaXRoTnVtYmVyKHtcclxuICAgICAgICB4LCB5LCBudW1iZXIsIGZpbGw6IHRydWUsIGJvYXJkLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlQm9hcmQoYm9hcmQpO1xyXG4gIH07XHJcblxyXG4gIHNlbGVjdENlbGwgPSAoeCwgeSkgPT4ge1xyXG4gICAgbGV0IHsgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBib2FyZCA9IGJvYXJkLnNldCgnc2VsZWN0ZWQnLCB7IHgsIHkgfSk7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgYm9hcmQgfSk7XHJcbiAgfTtcclxuXHJcbiAgaXNDb25mbGljdChpLCBqKSB7XHJcbiAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnN0YXRlLmJvYXJkLmdldEluKFsncHV6emxlJywgaSwgal0pLnRvSlNPTigpO1xyXG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgY29uc3Qgcm93Q29uZmxpY3QgPVxyXG4gICAgICB0aGlzLnN0YXRlLmJvYXJkLmdldEluKFsnY2hvaWNlcycsICdyb3dzJywgaSwgdmFsdWVdKSA+IDE7XHJcbiAgICBjb25zdCBjb2x1bW5Db25mbGljdCA9XHJcbiAgICAgIHRoaXMuc3RhdGUuYm9hcmQuZ2V0SW4oWydjaG9pY2VzJywgJ2NvbHVtbnMnLCBqLCB2YWx1ZV0pID4gMTtcclxuICAgIGNvbnN0IHNxdWFyZUNvbmZsaWN0ID1cclxuICAgICAgdGhpcy5zdGF0ZS5ib2FyZC5nZXRJbihbJ2Nob2ljZXMnLCAnc3F1YXJlcycsXHJcbiAgICAgICAgKChNYXRoLmZsb29yKGkgLyAzKSkgKiAzKSArIE1hdGguZmxvb3IoaiAvIDMpLCB2YWx1ZV0pID4gMTtcclxuICAgIHJldHVybiByb3dDb25mbGljdCB8fCBjb2x1bW5Db25mbGljdCB8fCBzcXVhcmVDb25mbGljdDtcclxuICB9XHJcblxyXG4gIHJlbmRlckNlbGwoY2VsbCwgeCwgeSkge1xyXG4gICAgY29uc3QgeyBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHNlbGVjdGVkID0gdGhpcy5nZXRTZWxlY3RlZENlbGwoKTtcclxuICAgIGNvbnN0IHsgdmFsdWUsIHByZWZpbGxlZCwgbm90ZXMgfSA9IGNlbGwudG9KU09OKCk7XHJcbiAgICBjb25zdCBjb25mbGljdCA9IHRoaXMuaXNDb25mbGljdCh4LCB5KTtcclxuICAgIGNvbnN0IHBlZXIgPSBhcmVDb29yZGluYXRlUGVlcnMoeyB4LCB5IH0sIGJvYXJkLmdldCgnc2VsZWN0ZWQnKSk7XHJcbiAgICBjb25zdCBzYW1lVmFsdWUgPSAhIShzZWxlY3RlZCAmJiBzZWxlY3RlZC5nZXQoJ3ZhbHVlJylcclxuICAgICAgJiYgdmFsdWUgPT09IHNlbGVjdGVkLmdldCgndmFsdWUnKSk7XHJcblxyXG4gICAgY29uc3QgaXNTZWxlY3RlZCA9IGNlbGwgPT09IHNlbGVjdGVkO1xyXG4gICAgcmV0dXJuICg8Q2VsbFxyXG4gICAgICBwcmVmaWxsZWQ9e3ByZWZpbGxlZH1cclxuICAgICAgbm90ZXM9e25vdGVzfVxyXG4gICAgICBzYW1lVmFsdWU9e3NhbWVWYWx1ZX1cclxuICAgICAgaXNTZWxlY3RlZD17aXNTZWxlY3RlZH1cclxuICAgICAgaXNQZWVyPXtwZWVyfVxyXG4gICAgICB2YWx1ZT17dmFsdWV9XHJcbiAgICAgIG9uQ2xpY2s9eygpID0+IHsgdGhpcy5zZWxlY3RDZWxsKHgsIHkpOyB9fVxyXG4gICAgICBrZXk9e3l9XHJcbiAgICAgIHg9e3h9XHJcbiAgICAgIHk9e3l9XHJcbiAgICAgIGNvbmZsaWN0PXtjb25mbGljdH1cclxuICAgIC8+KTtcclxuICB9XHJcblxyXG4gIHJlbmRlck51bWJlckNvbnRyb2woKSB7XHJcbiAgICBjb25zdCBzZWxlY3RlZENlbGwgPSB0aGlzLmdldFNlbGVjdGVkQ2VsbCgpO1xyXG4gICAgY29uc3QgcHJlZmlsbGVkID0gc2VsZWN0ZWRDZWxsICYmIHNlbGVjdGVkQ2VsbC5nZXQoJ3ByZWZpbGxlZCcpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sXCI+XHJcbiAgICAgICAge3JhbmdlKDkpLm1hcCgoaSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgbnVtYmVyID0gaSArIDE7XHJcbiAgICAgICAgICAvLyBoYW5kbGVzIGJpbmRpbmcgc2luZ2xlIGNsaWNrIGFuZCBkb3VibGUgY2xpY2sgY2FsbGJhY2tzXHJcbiAgICAgICAgICBjb25zdCBjbGlja0hhbmRsZSA9IGdldENsaWNrSGFuZGxlcihcclxuICAgICAgICAgICAgKCkgPT4geyB0aGlzLmZpbGxOdW1iZXIobnVtYmVyKTsgfSxcclxuICAgICAgICAgICAgKCkgPT4geyB0aGlzLmFkZE51bWJlckFzTm90ZShudW1iZXIpOyB9LFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxOdW1iZXJDb250cm9sXHJcbiAgICAgICAgICAgICAga2V5PXtudW1iZXJ9XHJcbiAgICAgICAgICAgICAgbnVtYmVyPXtudW1iZXJ9XHJcbiAgICAgICAgICAgICAgb25DbGljaz17IXByZWZpbGxlZCA/IGNsaWNrSGFuZGxlIDogdW5kZWZpbmVkfVxyXG4gICAgICAgICAgICAgIGNvbXBsZXRpb25QZXJjZW50YWdlPXt0aGlzLmdldE51bWJlclZhbHVlQ291bnQobnVtYmVyKSAvIDl9XHJcbiAgICAgICAgICAgIC8+KTtcclxuICAgICAgICB9KX1cclxuICAgICAgICA8c3R5bGUganN4PntDb250cm9sU3R5bGV9PC9zdHlsZT5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyQWN0aW9ucygpIHtcclxuICAgIGNvbnN0IHsgaGlzdG9yeSB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHNlbGVjdGVkQ2VsbCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XHJcbiAgICBjb25zdCBwcmVmaWxsZWQgPSBzZWxlY3RlZENlbGwgJiYgc2VsZWN0ZWRDZWxsLmdldCgncHJlZmlsbGVkJyk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvbnNcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvblwiIG9uQ2xpY2s9e2hpc3Rvcnkuc2l6ZSA/IHRoaXMudW5kbyA6IG51bGx9PlxyXG4gICAgICAgICAgPFJlbG9hZEljb24gLz5VbmRvXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb24gcmVkb1wiIG9uQ2xpY2s9e2hpc3Rvcnkuc2l6ZSA/IHRoaXMucmVkbyA6IG51bGx9PlxyXG4gICAgICAgICAgPFJlbG9hZEljb24gLz5SZWRvXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb25cIiBvbkNsaWNrPXshcHJlZmlsbGVkID8gdGhpcy5lcmFzZVNlbGVjdGVkIDogbnVsbH0+XHJcbiAgICAgICAgICA8UmVtb3ZlSWNvbiAvPkVyYXNlXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwiYWN0aW9uXCJcclxuICAgICAgICAgIG9uQ2xpY2s9eyFwcmVmaWxsZWQgP1xyXG4gICAgICAgICAgdGhpcy5maWxsU2VsZWN0ZWRXaXRoU29sdXRpb24gOiBudWxsfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMb3VwZUljb24gLz5IaW50XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPHN0eWxlIGpzeD57QWN0aW9uc1N0eWxlfTwvc3R5bGU+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJlbmRlclB1enpsZSgpIHtcclxuICAgIGNvbnN0IHsgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInB1enpsZVwiPlxyXG4gICAgICAgIHtib2FyZC5nZXQoJ3B1enpsZScpLm1hcCgocm93LCBpKSA9PiAoXHJcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XHJcbiAgICAgICAgICA8ZGl2IGtleT17aX0gY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICByb3cubWFwKChjZWxsLCBqKSA9PiB0aGlzLnJlbmRlckNlbGwoY2VsbCwgaSwgaikpLnRvQXJyYXkoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApKS50b0FycmF5KCl9XHJcbiAgICAgICAgPHN0eWxlIGpzeD57UHV6emxlU3R5bGV9PC9zdHlsZT5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyQ29udHJvbHMoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2xzXCI+XHJcbiAgICAgICAge3RoaXMucmVuZGVyTnVtYmVyQ29udHJvbCgpfVxyXG4gICAgICAgIHt0aGlzLnJlbmRlckFjdGlvbnMoKX1cclxuICAgICAgICB7IC8qIGxhbmd1YWdlPUNTUyAqLyB9XHJcbiAgICAgICAgPHN0eWxlIGpzeD57YFxyXG4gICAgICAgICAgICAuY29udHJvbHMge1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogLjNlbTtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogLjVlbSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgYH1cclxuICAgICAgICA8L3N0eWxlPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJHZW5lcmF0aW9uVUkoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8R2VuZXJhdGlvblVJIGdlbmVyYXRlR2FtZT17dGhpcy5nZW5lcmF0ZUdhbWV9IC8+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySGVhZGVyKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5ldy1nYW1lXCIgb25DbGljaz17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGJvYXJkOiBmYWxzZSB9KX0+XHJcbiAgICAgICAgICA8UmV0dXJuSWNvbiAvPlxyXG4gICAgICAgICAgPGRpdj5OZXcgR2FtZTwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxUaXAgLz5cclxuICAgICAgICB7IC8qIGxhbmd1YWdlPUNTUyAqLyB9XHJcbiAgICAgICAgPHN0eWxlIGpzeD57YFxyXG4gICAgICAgICAgICAuaGVhZGVyIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgICAgICAgICAgICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwIDAuNWVtO1xyXG4gICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAubmV3LWdhbWUge1xyXG4gICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogLjJlbTtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xyXG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogLjJlbSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC5uZXctZ2FtZSA6Z2xvYmFsKHN2Zykge1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxZW07XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAuM2VtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgYH1cclxuICAgICAgICA8L3N0eWxlPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJib2R5XCI+XHJcbiAgICAgICAgPE5leHRIZWFkPlxyXG4gICAgICAgICAgPHRpdGxlPlN1ZG9rdSBFdm9sdmVkPC90aXRsZT5cclxuICAgICAgICAgIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJpbml0aWFsLXNjYWxlPTEuMCwgd2lkdGg9ZGV2aWNlLXdpZHRoXCIgLz5cclxuICAgICAgICAgIDxtZXRhIG5hbWU9XCJkZXNjcmlwdGlvblwiIGNvbnRlbnQ9e0Rlc2NyaXB0aW9ufSAvPlxyXG4gICAgICAgICAgPGxpbmsgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1TcGVjaWFsK0VsaXRlXCIgcmVsPVwic3R5bGVzaGVldFwiIC8+XHJcbiAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnVybFwiIGNvbnRlbnQ9XCJodHRwczovL3N1ZG9rdS5zaXRpYW5saXUuY29tL1wiIC8+XHJcbiAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnRpdGxlXCIgY29udGVudD1cIlN1ZG9rdSBFdm9sdmVkXCIgLz5cclxuICAgICAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dHlwZVwiIGNvbnRlbnQ9XCJ3ZWJzaXRlXCIgLz5cclxuICAgICAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6ZGVzY3JpcHRpb25cIiBjb250ZW50PXtEZXNjcmlwdGlvbn0gLz5cclxuICAgICAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6aW1hZ2VcIiBjb250ZW50PVwiaHR0cHM6Ly9zdWRva3Uuc2l0aWFubGl1LmNvbS9zdGF0aWMvb2ctaW1hZ2UucG5nXCIgLz5cclxuICAgICAgICA8L05leHRIZWFkPlxyXG4gICAgICAgIHshYm9hcmQgJiYgdGhpcy5yZW5kZXJHZW5lcmF0aW9uVUkoKX1cclxuICAgICAgICB7Ym9hcmQgJiYgdGhpcy5yZW5kZXJIZWFkZXIoKX1cclxuICAgICAgICB7Ym9hcmQgJiYgdGhpcy5yZW5kZXJQdXp6bGUoKX1cclxuICAgICAgICB7Ym9hcmQgJiYgdGhpcy5yZW5kZXJDb250cm9scygpfVxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm9vdGVyXCI+XHJcbiAgICAgICAgICBNYWRlIHdpdGggPHNwYW4+4p2k77iPPC9zcGFuPu+4jyBCeSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuc2l0aWFubGl1LmNvbS9cIj5TaXRpYW4gTGl1PC9hPiB8IDxhIGhyZWY9XCJodHRwczovL21lZGl1bS5jb20vQHNpdGlhbmxpdV81NzY4MC9idWlsZGluZy1hLXN1ZG9rdS1nYW1lLWluLXJlYWN0LWNhNjYzOTE1NzEyXCI+QmxvZyBQb3N0PC9hPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIHsgLyogbGFuZ3VhZ2U9Q1NTICovIH1cclxuICAgICAgICA8c3R5bGUganN4PntgXHJcbiAgICAgICAgICAgIDpnbG9iYWwoYm9keSksIC5ib2R5IHtcclxuICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAnU3BlY2lhbCBFbGl0ZScsIGN1cnNpdmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLmJvZHkge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHZoO1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMHZ3O1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEBtZWRpYSAobWluLXdpZHRoOiA4MDBweCkgYW5kIChtaW4taGVpZ2h0OiA5MzBweCl7XHJcbiAgICAgICAgICAgICAgICA6Z2xvYmFsKC5oZWFkZXIsIC5wdXp6bGUsIC5jb250cm9scykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS41ZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwMHB4KSBhbmQgKG1pbi13aWR0aDogNjAwcHgpe1xyXG4gICAgICAgICAgICAgICAgOmdsb2JhbCguaGVhZGVyLCAucHV6emxlLCAuY29udHJvbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDEuMmVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEBtZWRpYSAobWF4LWhlaWdodDogOTMwcHgpIGFuZCAobWluLWhlaWdodDogODAwcHgpIGFuZCAobWluLXdpZHRoOiA2MDBweCl7XHJcbiAgICAgICAgICAgICAgICA6Z2xvYmFsKC5oZWFkZXIsIC5wdXp6bGUsIC5jb250cm9scykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4yZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQG1lZGlhIChtYXgtaGVpZ2h0OiA4MDBweCkgYW5kIChtaW4taGVpZ2h0OiA2MDBweCkgYW5kIChtaW4td2lkdGg6IDM3MHB4KXtcclxuICAgICAgICAgICAgICAgIDpnbG9iYWwoLmhlYWRlciwgLnB1enpsZSwgLmNvbnRyb2xzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDM3MHB4KXtcclxuICAgICAgICAgICAgICAgIDpnbG9iYWwoLmhlYWRlciwgLnB1enpsZSwgLmNvbnRyb2xzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAuOGVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEBtZWRpYSAobWF4LWhlaWdodDogNjAwcHgpe1xyXG4gICAgICAgICAgICAgICAgOmdsb2JhbCguaGVhZGVyLCAucHV6emxlLCAuY29udHJvbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IC44ZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgOmdsb2JhbChib2R5KSB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW46IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLnJvb3RlciB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICAgICAgICAgICAgICBib3R0b206IDA7XHJcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IC44ZW07XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIGB9XHJcbiAgICAgICAgPC9zdHlsZT5cclxuICAgICAgICA8c3R5bGUganN4IGdsb2JhbD57UmFuZ2VTdHlsZX08L3N0eWxlPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ== */\n/*@ sourceURL=pages\\index.js */'
        })
      );
    }
  }]);

  return GenerationUI;
}(__WEBPACK_IMPORTED_MODULE_1_react__["Component"]);

GenerationUI.propTypes = {
  generateGame: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func.isRequired
};

var NumberControl = function NumberControl(_ref3) {
  var number = _ref3.number,
      onClick = _ref3.onClick,
      completionPercentage = _ref3.completionPercentage;
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'div',
    {
      key: number,

      onClick: onClick,
      className: 'jsx-' + NumberControlStyle.__scopedHash + ' ' + 'number',
      __source: {
        fileName: _jsxFileName,
        lineNumber: 284
      }
    },
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
      'div',
      {
        className: 'jsx-' + NumberControlStyle.__scopedHash,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 289
        }
      },
      number
    ),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(CirclularProgress, { percent: completionPercentage, __source: {
        fileName: _jsxFileName,
        lineNumber: 290
      }
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
      styleId: NumberControlStyle.__scopedHash,
      css: NumberControlStyle.__scoped
    })
  );
};

NumberControl.propTypes = {
  number: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.number.isRequired,
  onClick: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func,
  completionPercentage: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.number.isRequired
};

NumberControl.defaultProps = {
  onClick: null
};

var Cell = function Cell(props) {
  var value = props.value,
      onClick = props.onClick,
      isPeer = props.isPeer,
      isSelected = props.isSelected,
      sameValue = props.sameValue,
      prefilled = props.prefilled,
      notes = props.notes,
      conflict = props.conflict;

  var backgroundColor = getBackGroundColor({
    conflict: conflict, isPeer: isPeer, sameValue: sameValue, isSelected: isSelected
  });
  var fontColor = getFontColor({ conflict: conflict, prefilled: prefilled, value: value });
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'div',
    { onClick: onClick, className: 'jsx-' + CellStyle.__scopedHash + ' ' + __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a.dynamic([['60311025', [backgroundColor || 'initial', fontColor || 'initial']]]) + ' ' + 'cell',
      __source: {
        fileName: _jsxFileName,
        lineNumber: 314
      }
    },
    notes ? Object(__WEBPACK_IMPORTED_MODULE_8__sudoku__["d" /* range */])(9).map(function (i) {
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        { key: i, className: 'jsx-' + CellStyle.__scopedHash + ' ' + __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a.dynamic([['60311025', [backgroundColor || 'initial', fontColor || 'initial']]]) + ' ' + 'note-number',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 319
          }
        },
        notes.has(i + 1) && i + 1
      );
    }) : value && value,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
      styleId: CellStyle.__scopedHash,
      css: CellStyle.__scoped
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
      styleId: '60311025',
      css: '.cell.__jsx-style-dynamic-selector{background-color:' + (backgroundColor || 'initial') + ';color:' + (fontColor || 'initial') + ';}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */',
      dynamic: [backgroundColor || 'initial', fontColor || 'initial']
    })
  );
};

Cell.propTypes = {
  // current number value
  value: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.number,
  // cell click handler
  onClick: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func.isRequired,
  // if the cell is a peer of the selected cell
  isPeer: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // if the cell is selected by the user
  isSelected: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // current cell has the same value if the user selected cell
  sameValue: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // if this was prefilled as a part of the puzzle
  prefilled: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // current notes taken on the cell
  notes: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.instanceOf(__WEBPACK_IMPORTED_MODULE_2_immutable__["Set"]),
  // if the current cell does not satisfy the game constraint
  conflict: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired
};

Cell.defaultProps = {
  notes: null,
  value: null
};

var CirclularProgress = function CirclularProgress(_ref4) {
  var percent = _ref4.percent;
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    'svg',
    { viewBox: '0 0 36 36', className: 'jsx-' + CirculuarProgressStyle.__scopedHash + ' ' + 'circular-progress',
      __source: {
        fileName: _jsxFileName,
        lineNumber: 363
      }
    },
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      d: CircularPathD,
      className: 'jsx-' + CirculuarProgressStyle.__scopedHash + ' ' + 'circle-bg',
      __source: {
        fileName: _jsxFileName,
        lineNumber: 364
      }
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('path', {
      strokeDasharray: percent * 100 + ', 100',
      d: CircularPathD,
      className: 'jsx-' + CirculuarProgressStyle.__scopedHash + ' ' + 'circle',
      __source: {
        fileName: _jsxFileName,
        lineNumber: 368
      }
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
      styleId: CirculuarProgressStyle.__scopedHash,
      css: CirculuarProgressStyle.__scoped
    })
  );
};

CirclularProgress.propTypes = {
  percent: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.number.isRequired
};

function getClickHandler(onClick, onDoubleClick) {
  var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 250;

  var timeoutID = null;
  return function (event) {
    if (!timeoutID) {
      timeoutID = setTimeout(function () {
        onClick(event);
        timeoutID = null;
      }, delay);
    } else {
      timeoutID = clearTimeout(timeoutID);
      onDoubleClick(event);
    }
  };
}

/**
 * make size 9 array of 0s
 * @returns {Array}
 */
function makeCountObject() {
  var countObj = [];
  for (var i = 0; i < 10; i += 1) {
    countObj.push(0);
  }return countObj;
}

/**
 * given a 2D array of numbers as the initial puzzle, generate the initial game state
 * @param puzzle
 * @returns {any}
 */
function makeBoard(_ref5) {
  var puzzle = _ref5.puzzle;

  // create initial count object to keep track of conflicts per number value
  var rows = Array.from(Array(9).keys()).map(function () {
    return makeCountObject();
  });
  var columns = Array.from(Array(9).keys()).map(function () {
    return makeCountObject();
  });
  var squares = Array.from(Array(9).keys()).map(function () {
    return makeCountObject();
  });
  var result = puzzle.map(function (row, i) {
    return row.map(function (cell, j) {
      if (cell) {
        rows[i][cell] += 1;
        columns[j][cell] += 1;
        squares[Math.floor(i / 3) * 3 + Math.floor(j / 3)][cell] += 1;
      }
      return {
        value: puzzle[i][j] > 0 ? puzzle[i][j] : null,
        prefilled: !!puzzle[i][j]
      };
    });
  });
  return Object(__WEBPACK_IMPORTED_MODULE_2_immutable__["fromJS"])({ puzzle: result, selected: false, choices: { rows: rows, columns: columns, squares: squares } });
}

/**
 * give the coordinate update the current board with a number choice
 * @param x
 * @param y
 * @param number
 * @param fill whether to set or unset
 * @param board the immutable board given to change
 */
function updateBoardWithNumber(_ref6) {
  var x = _ref6.x,
      y = _ref6.y,
      number = _ref6.number,
      _ref6$fill = _ref6.fill,
      fill = _ref6$fill === undefined ? true : _ref6$fill,
      board = _ref6.board;

  var cell = board.get('puzzle').getIn([x, y]);
  // delete its notes
  cell = cell.delete('notes');
  // set or unset its value depending on `fill`
  cell = fill ? cell.set('value', number) : cell.delete('value');
  var increment = fill ? 1 : -1;
  // update the current group choices
  var rowPath = ['choices', 'rows', x, number];
  var columnPath = ['choices', 'columns', y, number];
  var squarePath = ['choices', 'squares', Math.floor(x / 3) * 3 + Math.floor(y / 3), number];
  return board.setIn(rowPath, board.getIn(rowPath) + increment).setIn(columnPath, board.getIn(columnPath) + increment).setIn(squarePath, board.getIn(squarePath) + increment).setIn(['puzzle', x, y], cell);
}

function getNumberOfGroupsAssignedForNumber(number, groups) {
  return groups.reduce(function (accumulator, row) {
    return accumulator + (row.get(number) > 0 ? 1 : 0);
  }, 0);
}
// eslint-disable-next-line react/no-multi-comp

var Index = function (_Component2) {
  _inherits(Index, _Component2);

  function Index() {
    var _ref7;

    var _temp, _this3, _ret;

    _classCallCheck(this, Index);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this3 = _possibleConstructorReturn(this, (_ref7 = Index.__proto__ || Object.getPrototypeOf(Index)).call.apply(_ref7, [this].concat(args))), _this3), _this3.state = {}, _this3.generateGame = function () {
      var finalCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;

      // get a filled puzzle generated
      var solution = Object(__WEBPACK_IMPORTED_MODULE_8__sudoku__["b" /* makePuzzle */])();
      // pluck values from cells to create the game

      var _pluck = Object(__WEBPACK_IMPORTED_MODULE_8__sudoku__["c" /* pluck */])(solution, finalCount),
          puzzle = _pluck.puzzle;
      // initialize the board with choice counts


      var board = makeBoard({ puzzle: puzzle });
      _this3.setState({
        board: board, history: __WEBPACK_IMPORTED_MODULE_2_immutable__["List"].of(board), historyOffSet: 0, solution: solution
      });
    }, _this3.addNumberAsNote = function (number) {
      var board = _this3.state.board;

      var selectedCell = _this3.getSelectedCell();
      if (!selectedCell) return;
      var prefilled = selectedCell.get('prefilled');
      if (prefilled) return;

      var _board$get = board.get('selected'),
          x = _board$get.x,
          y = _board$get.y;

      var currentValue = selectedCell.get('value');
      if (currentValue) {
        board = updateBoardWithNumber({
          x: x, y: y, number: currentValue, fill: false, board: _this3.state.board
        });
      }
      var notes = selectedCell.get('notes') || Object(__WEBPACK_IMPORTED_MODULE_2_immutable__["Set"])();
      if (notes.has(number)) {
        notes = notes.delete(number);
      } else {
        notes = notes.add(number);
      }
      selectedCell = selectedCell.set('notes', notes);
      selectedCell = selectedCell.delete('value');
      board = board.setIn(['puzzle', x, y], selectedCell);
      _this3.updateBoard(board);
    }, _this3.updateBoard = function (newBoard) {
      var history = _this3.state.history;
      var historyOffSet = _this3.state.historyOffSet;
      // anything before current step is still in history

      history = history.slice(0, historyOffSet + 1);
      // add itself onto the history
      history = history.push(newBoard);
      // update the game
      _this3.setState({ board: newBoard, history: history, historyOffSet: history.size - 1 });
    }, _this3.canUndo = function () {
      return _this3.state.historyOffSet > 0;
    }, _this3.redo = function () {
      var history = _this3.state.history;
      var historyOffSet = _this3.state.historyOffSet;

      if (history.size) {
        historyOffSet = Math.min(history.size - 1, historyOffSet + 1);
        var board = history.get(historyOffSet);
        _this3.setState({ board: board, historyOffSet: historyOffSet });
      }
    }, _this3.undo = function () {
      var history = _this3.state.history;
      var _this3$state = _this3.state,
          historyOffSet = _this3$state.historyOffSet,
          board = _this3$state.board;

      if (history.size) {
        historyOffSet = Math.max(0, historyOffSet - 1);
        board = history.get(historyOffSet);
        _this3.setState({ board: board, historyOffSet: historyOffSet, history: history });
      }
    }, _this3.eraseSelected = function () {
      var selectedCell = _this3.getSelectedCell();
      if (!selectedCell) return;
      _this3.fillNumber(false);
    }, _this3.fillSelectedWithSolution = function () {
      var _this3$state2 = _this3.state,
          board = _this3$state2.board,
          solution = _this3$state2.solution;

      var selectedCell = _this3.getSelectedCell();
      if (!selectedCell) return;

      var _board$get2 = board.get('selected'),
          x = _board$get2.x,
          y = _board$get2.y;

      _this3.fillNumber(solution[x][y]);
    }, _this3.fillNumber = function (number) {
      var board = _this3.state.board;

      var selectedCell = _this3.getSelectedCell();
      // no-op if nothing is selected
      if (!selectedCell) return;
      var prefilled = selectedCell.get('prefilled');
      // no-op if it is refilled
      if (prefilled) return;

      var _board$get3 = board.get('selected'),
          x = _board$get3.x,
          y = _board$get3.y;

      var currentValue = selectedCell.get('value');
      // remove the current value and update the game state
      if (currentValue) {
        board = updateBoardWithNumber({
          x: x, y: y, number: currentValue, fill: false, board: _this3.state.board
        });
      }
      // update to new number if any
      var setNumber = currentValue !== number && number;
      if (setNumber) {
        board = updateBoardWithNumber({
          x: x, y: y, number: number, fill: true, board: board
        });
      }
      _this3.updateBoard(board);
    }, _this3.selectCell = function (x, y) {
      var board = _this3.state.board;

      board = board.set('selected', { x: x, y: y });
      _this3.setState({ board: board });
    }, _temp), _possibleConstructorReturn(_this3, _ret);
  }

  _createClass(Index, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // eslint-disable-next-line no-undef
      if ('serviceWorker' in navigator) {
        // eslint-disable-next-line no-undef
        navigator.serviceWorker.register('/service-worker.js').then(function (reg) {
          console.log('ServiceWorker scope: ', reg.scope);
          console.log('service worker registration successful');
        }).catch(function (err) {
          console.warn('service worker registration failed', err.message);
        });
      }
    }
  }, {
    key: 'getSelectedCell',
    value: function getSelectedCell() {
      var board = this.state.board;

      var selected = board.get('selected');
      return selected && board.get('puzzle').getIn([selected.x, selected.y]);
    }

    // get the min between its completion in rows, columns and squares.

  }, {
    key: 'getNumberValueCount',
    value: function getNumberValueCount(number) {
      var rows = this.state.board.getIn(['choices', 'rows']);
      var columns = this.state.board.getIn(['choices', 'columns']);
      var squares = this.state.board.getIn(['choices', 'squares']);
      return Math.min(getNumberOfGroupsAssignedForNumber(number, squares), Math.min(getNumberOfGroupsAssignedForNumber(number, rows), getNumberOfGroupsAssignedForNumber(number, columns)));
    }

    // fill currently selected cell with number

  }, {
    key: 'isConflict',
    value: function isConflict(i, j) {
      var _state$board$getIn$to = this.state.board.getIn(['puzzle', i, j]).toJSON(),
          value = _state$board$getIn$to.value;

      if (!value) return false;
      var rowConflict = this.state.board.getIn(['choices', 'rows', i, value]) > 1;
      var columnConflict = this.state.board.getIn(['choices', 'columns', j, value]) > 1;
      var squareConflict = this.state.board.getIn(['choices', 'squares', Math.floor(i / 3) * 3 + Math.floor(j / 3), value]) > 1;
      return rowConflict || columnConflict || squareConflict;
    }
  }, {
    key: 'renderCell',
    value: function renderCell(cell, x, y) {
      var _this4 = this;

      var board = this.state.board;

      var selected = this.getSelectedCell();

      var _cell$toJSON = cell.toJSON(),
          value = _cell$toJSON.value,
          prefilled = _cell$toJSON.prefilled,
          notes = _cell$toJSON.notes;

      var conflict = this.isConflict(x, y);
      var peer = Object(__WEBPACK_IMPORTED_MODULE_8__sudoku__["a" /* isPeer */])({ x: x, y: y }, board.get('selected'));
      var sameValue = !!(selected && selected.get('value') && value === selected.get('value'));

      var isSelected = cell === selected;
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(Cell, {
        prefilled: prefilled,
        notes: notes,
        sameValue: sameValue,
        isSelected: isSelected,
        isPeer: peer,
        value: value,
        onClick: function onClick() {
          _this4.selectCell(x, y);
        },
        key: y,
        x: x,
        y: y,
        conflict: conflict,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 645
        }
      });
    }
  }, {
    key: 'renderNumberControl',
    value: function renderNumberControl() {
      var _this5 = this;

      var selectedCell = this.getSelectedCell();
      var prefilled = selectedCell && selectedCell.get('prefilled');
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-' + ControlStyle.__scopedHash + ' ' + 'control',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 664
          }
        },
        Object(__WEBPACK_IMPORTED_MODULE_8__sudoku__["d" /* range */])(9).map(function (i) {
          var number = i + 1;
          // handles binding single click and double click callbacks
          var clickHandle = getClickHandler(function () {
            _this5.fillNumber(number);
          }, function () {
            _this5.addNumberAsNote(number);
          });
          return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(NumberControl, {
            key: number,
            number: number,
            onClick: !prefilled ? clickHandle : undefined,
            completionPercentage: _this5.getNumberValueCount(number) / 9,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 673
            }
          });
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: ControlStyle.__scopedHash,
          css: ControlStyle.__scoped
        })
      );
    }
  }, {
    key: 'renderActions',
    value: function renderActions() {
      var history = this.state.history;

      var selectedCell = this.getSelectedCell();
      var prefilled = selectedCell && selectedCell.get('prefilled');
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-' + ActionsStyle.__scopedHash + ' ' + 'actions',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 690
          }
        },
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          { onClick: history.size ? this.undo : null, className: 'jsx-' + ActionsStyle.__scopedHash + ' ' + 'action',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 691
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(ReloadIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 692
            }
          }),
          'Undo'
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          { onClick: history.size ? this.redo : null, className: 'jsx-' + ActionsStyle.__scopedHash + ' ' + 'action redo',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 694
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(ReloadIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 695
            }
          }),
          'Redo'
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          { onClick: !prefilled ? this.eraseSelected : null, className: 'jsx-' + ActionsStyle.__scopedHash + ' ' + 'action',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 697
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(RemoveIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 698
            }
          }),
          'Erase'
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          {
            onClick: !prefilled ? this.fillSelectedWithSolution : null,
            className: 'jsx-' + ActionsStyle.__scopedHash + ' ' + 'action',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 700
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(LoupeIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 705
            }
          }),
          'Hint'
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: ActionsStyle.__scopedHash,
          css: ActionsStyle.__scoped
        })
      );
    }
  }, {
    key: 'renderPuzzle',
    value: function renderPuzzle() {
      var _this6 = this;

      var board = this.state.board;

      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-' + PuzzleStyle.__scopedHash + ' ' + 'puzzle',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 715
          }
        },
        board.get('puzzle').map(function (row, i) {
          return (
            // eslint-disable-next-line react/no-array-index-key
            __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
              'div',
              { key: i, className: 'jsx-' + PuzzleStyle.__scopedHash + ' ' + 'row',
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 718
                }
              },
              row.map(function (cell, j) {
                return _this6.renderCell(cell, i, j);
              }).toArray()
            )
          );
        }).toArray(),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: PuzzleStyle.__scopedHash,
          css: PuzzleStyle.__scoped
        })
      );
    }
  }, {
    key: 'renderControls',
    value: function renderControls() {
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-3626433229' + ' ' + 'controls',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 731
          }
        },
        this.renderNumberControl(),
        this.renderActions(),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: '3626433229',
          css: '.controls.jsx-3626433229{margin-top:.3em;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;width:100%;padding:.5em 0;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */'
        })
      );
    }
  }, {
    key: 'renderGenerationUI',
    value: function renderGenerationUI() {
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(GenerationUI, { generateGame: this.generateGame, __source: {
          fileName: _jsxFileName,
          lineNumber: 752
        }
      });
    }
  }, {
    key: 'renderHeader',
    value: function renderHeader() {
      var _this7 = this;

      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-2229275753' + ' ' + 'header',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 758
          }
        },
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          { onClick: function onClick() {
              return _this7.setState({ board: false });
            }, className: 'jsx-2229275753' + ' ' + 'new-game',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 759
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(ReturnIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 760
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
            'div',
            {
              className: 'jsx-2229275753',
              __source: {
                fileName: _jsxFileName,
                lineNumber: 761
              }
            },
            'New Game'
          )
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_10__components_tool_tip__["a" /* default */], {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 763
          }
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: '2229275753',
          css: '.header.jsx-2229275753{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;max-width:500px;padding:0 0.5em;box-sizing:border-box;}.new-game.jsx-2229275753{cursor:pointer;margin-top:.2em;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:.2em 0;}.new-game.jsx-2229275753 svg{height:1em;margin-bottom:.3em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */'
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var board = this.state.board;

      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        'div',
        {
          className: 'jsx-389099333' + ' ' + 'body',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 795
          }
        },
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          __WEBPACK_IMPORTED_MODULE_4_next_head___default.a,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 796
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
            'title',
            {
              className: 'jsx-389099333',
              __source: {
                fileName: _jsxFileName,
                lineNumber: 797
              }
            },
            'Sudoku Evolved'
          ),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { name: 'viewport', content: 'initial-scale=1.0, width=device-width', className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 798
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { name: 'description', content: Description, className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 799
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('link', { href: 'https://fonts.googleapis.com/css?family=Special+Elite', rel: 'stylesheet', className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 800
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { property: 'og:url', content: 'https://sudoku.sitianliu.com/', className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 801
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { property: 'og:title', content: 'Sudoku Evolved', className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 802
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { property: 'og:type', content: 'website', className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 803
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { property: 'og:description', content: Description, className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 804
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('meta', { property: 'og:image', content: 'https://sudoku.sitianliu.com/static/og-image.png', className: 'jsx-389099333',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 805
            }
          })
        ),
        !board && this.renderGenerationUI(),
        board && this.renderHeader(),
        board && this.renderPuzzle(),
        board && this.renderControls(),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          'div',
          {
            className: 'jsx-389099333' + ' ' + 'rooter',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 811
            }
          },
          'Made with ',
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
            'span',
            {
              className: 'jsx-389099333',
              __source: {
                fileName: _jsxFileName,
                lineNumber: 812
              }
            },
            '\u2764\uFE0F'
          ),
          '\uFE0F By ',
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
            'a',
            { href: 'https://www.sitianliu.com/', className: 'jsx-389099333',
              __source: {
                fileName: _jsxFileName,
                lineNumber: 812
              }
            },
            'Sitian Liu'
          ),
          ' | ',
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
            'a',
            { href: 'https://medium.com/@sitianliu_57680/building-a-sudoku-game-in-react-ca663915712', className: 'jsx-389099333',
              __source: {
                fileName: _jsxFileName,
                lineNumber: 812
              }
            },
            'Blog Post'
          )
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: '389099333',
          css: 'body,.body.jsx-389099333{font-family:\'Special Elite\',cursive;}.body.jsx-389099333{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;height:100vh;width:100vw;position:relative;}@media (min-width:800px) and (min-height:930px){.header,.puzzle,.controls{font-size:1.5em;}}@media (max-width:800px) and (min-width:600px){.header,.puzzle,.controls{font-size:1.2em;}}@media (max-height:930px) and (min-height:800px) and (min-width:600px){.header,.puzzle,.controls{font-size:1.2em;}}@media (max-height:800px) and (min-height:600px) and (min-width:370px){.header,.puzzle,.controls{font-size:1em;}}@media (max-width:370px){.header,.puzzle,.controls{font-size:.8em;}}@media (max-height:600px){.header,.puzzle,.controls{font-size:.8em;}}body{margin:0;}.rooter.jsx-389099333{position:fixed;bottom:0;font-size:.8em;width:100%;text-align:center;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages\\index.js */'
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: __WEBPACK_IMPORTED_MODULE_7__input_range_style__["a" /* default */].__hash,
          css: __WEBPACK_IMPORTED_MODULE_7__input_range_style__["a" /* default */]
        })
      );
    }
  }]);

  return Index;
}(__WEBPACK_IMPORTED_MODULE_1_react__["Component"]);

/* harmony default export */ __webpack_exports__["default"] = (Index);

/***/ }),

/***/ "./sudoku.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["d"] = range;
/* harmony export (immutable) */ __webpack_exports__["b"] = makePuzzle;
/* harmony export (immutable) */ __webpack_exports__["a"] = isPeer;
/* harmony export (immutable) */ __webpack_exports__["c"] = pluck;
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function randomChoice(choices) {
  return choices[Math.floor(Math.random() * choices.length)];
}

function range(n) {
  return Array.from(Array(n).keys());
}

// TODO use immutable when this is all working
function makePuzzle() {
  while (true) {
    try {
      var _ret = function () {
        var puzzle = Array.from(Array(9).keys()).map(function () {
          return Array.from(Array(9).keys());
        });
        var rows = Array.from(Array(9).keys()).map(function () {
          return new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);
        });
        var columns = Array.from(Array(9).keys()).map(function () {
          return new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);
        });
        var squares = Array.from(Array(9).keys()).map(function () {
          return new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);
        });
        Array.from(Array(9).keys()).forEach(function (i) {
          Array.from(Array(9).keys()).forEach(function (j) {
            var row = rows[i];
            var column = columns[j];
            var square = squares[Math.floor(i / 3) * 3 + Math.floor(j / 3)];
            var choices = [].concat(_toConsumableArray(row)).filter(function (x) {
              return column.has(x);
            }).filter(function (x) {
              return square.has(x);
            });
            var choice = randomChoice(choices);
            if (!choice) {
              // eslint-disable-next-line no-throw-literal
              throw 'dead end';
            }
            puzzle[i][j] = choice;
            column.delete(choice);
            row.delete(choice);
            square.delete(choice);
          });
        });
        return {
          v: puzzle
        };
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    } catch (e) {
      // eslint-disable-next-line no-continue
      continue;
    }
  }
}

/**
 * Answers the question: can the cell (i,j) in the puzzle contain the number
 in cell "c"
 * @param puzzle
 * @param i
 * @param j
 * @param c
 */
function canBeA(puzzle, i, j, c) {
  var x = Math.floor(c / 9);
  var y = c % 9;
  var value = puzzle[x][y];
  if (puzzle[i][j] === value) return true;
  if (puzzle[i][j] > 0) return false;
  // if not the cell itself, and the mth cell of the group contains the value v, then "no"
  // eslint-disable-next-line guard-for-in,no-restricted-syntax
  for (var m in Array.from(Array(9).keys())) {
    var rowPeer = { x: m, y: j };
    var columnPeer = { x: i, y: m };
    var SquarePeer = {
      x: Math.floor(i / 3) * 3 + Math.floor(m / 3),
      y: Math.floor(j / 3) * 3 + m % 3
    };
    if (!(rowPeer.x === x && rowPeer.y === y) && puzzle[(rowPeer.x, rowPeer.y)] === value) return false;
    if (!(columnPeer.x === x && columnPeer.y === y) && puzzle[(columnPeer.x, columnPeer.y)] === value) return false;
    if (!(SquarePeer.x === x && SquarePeer.y === y) && puzzle[(SquarePeer.x, SquarePeer.y)] === value) return false;
  }
  return true;
}

/**
 *
 * @param a
 * @param b
 * @returns {boolean}
 */
function isPeer(a, b) {
  if (!a || !b) return false;
  var squareA = Math.floor(a.x / 3) * 3 + Math.floor(a.y / 3);
  var squareB = Math.floor(b.x / 3) * 3 + Math.floor(b.y / 3);
  return a.x === b.x || a.y === b.y || squareA === squareB;
}

function pluck(allCells) {
  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  var puzzle = JSON.parse(JSON.stringify(allCells));
  /**
     * starts with a set of all 81 cells, and tries to remove one (randomly) at a time,
     * but not before checking that the cell can still be deduced from the remaining cells.
     * @type {Set}
     */
  var cells = new Set(Array.from(Array(81).keys()));
  var cellsLeft = new Set(cells);

  var _loop = function _loop() {
    var cell = randomChoice([].concat(_toConsumableArray(cells)));
    var x = Math.floor(cell / 9);
    var y = cell % 9;
    cellsLeft.delete(cell);
    /**
         * row, column and square record whether another cell in those groups could also take
         * on the value we are trying to pluck. (If another cell can, then we can't use the
         * group to deduce this value.) If all three groups are True, then we cannot pluck
         * this cell and must try another one.
         */
    var row = false;
    var column = false;
    var square = false;
    range(9).forEach(function (i) {
      var rowPeer = { x: i, y: y };
      var columnPeer = { x: x, y: i };
      var squarePeer = {
        x: Math.floor(Math.floor(cell / 9) / 3) * 3 + Math.floor(i / 3),
        y: Math.floor(cell / 9) % 3 * 3 + i % 3
      };
      if (rowPeer.x !== x) {
        row = canBeA(puzzle, rowPeer.x, rowPeer.y, cell);
      }
      if (columnPeer.y !== y) {
        column = canBeA(puzzle, columnPeer.x, columnPeer.y, cell);
      }
      if (squarePeer.x !== x && squarePeer.y !== y) {
        square = canBeA(puzzle, squarePeer.x, squarePeer.y, cell);
      }
    });
    if (row && column && square) {
      // eslint-disable-next-line no-continue
      return 'continue';
    } else {
      // this is a pluckable cell!
      // eslint-disable-next-line no-param-reassign
      puzzle[x][y] = 0; // 0 denotes a blank cell
      /**
             * remove from the set of visible cells (pluck it)
             * we don't need to reset "cellsleft" because if a cell was not pluckable
             * earlier, then it will still not be pluckable now (with less information
             * on the board).
             */
      cells.delete(cell);
    }
  };

  while (cellsLeft.size && cells.size > n) {
    var _ret2 = _loop();

    if (_ret2 === 'continue') continue;
  }
  return { puzzle: puzzle, size: cells.size };
}

/***/ }),

/***/ 2:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./pages/index.js");


/***/ }),

/***/ "color":
/***/ (function(module, exports) {

module.exports = require("color");

/***/ }),

/***/ "immutable":
/***/ (function(module, exports) {

module.exports = require("immutable");

/***/ }),

/***/ "next/head":
/***/ (function(module, exports) {

module.exports = require("next/head");

/***/ }),

/***/ "prop-types":
/***/ (function(module, exports) {

module.exports = require("prop-types");

/***/ }),

/***/ "react":
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),

/***/ "react-input-range":
/***/ (function(module, exports) {

module.exports = require("react-input-range");

/***/ }),

/***/ "react-popover":
/***/ (function(module, exports) {

module.exports = require("react-popover");

/***/ }),

/***/ "styled-jsx/style":
/***/ (function(module, exports) {

module.exports = require("styled-jsx/style");

/***/ })

/******/ });
//# sourceMappingURL=index.js.map